//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class CharacterVehicleBlock : GuerillaBlock, IWriteQueueable
    {
        [Moonfish.Tags.TagReferenceAttribute("unit")]
        public Moonfish.Tags.TagReference Unit;
        [Moonfish.Tags.TagReferenceAttribute("styl")]
        public Moonfish.Tags.TagReference Style;
        public VehicleFlags CharacterVehicleVehicleFlags;
        public float AiPathfindingRadius;
        public float AiDestinationRadius;
        public float AiDecelerationDistanceworldUnits;
        public float AiTurningRadius;
        public float AiInnerTurningRadius;
        public float AiIdealTurningRadius;
        public float AiBansheeSteeringMaximum;
        public float AiMaxSteeringAngle;
        public float AiMaxSteeringDelta;
        public float AiOversteeringScale;
        public Moonfish.Model.Range AiOversteeringBounds;
        public float AiSideslipDistance;
        public float AiAvoidanceDistance;
        public float AiMinUrgency;
        public float AiThrottleMaximum;
        public float AiGoalMinThrottleScale;
        public float AiTurnMinThrottleScale;
        public float AiDirectionMinThrottleScale;
        public float AiAccelerationScale;
        public float AiThrottleBlend;
        public float TheoreticalMaxSpeed;
        public float ErrorScale;
        public float AiAllowableAimDeviationAngle;
        public float AiChargeTightAngleDistance;
        public float AiChargeTightAngle;
        public float AiChargeRepeatTimeout;
        public float AiChargeLookaheadTime;
        public float AiChargeConsiderDistance;
        public float AiChargeAbortDistance;
        public float VehicleRamTimeout;
        public float RamParalysisTime;
        public float AiCoverDamageThreshold;
        public float AiCoverMinDistance;
        public float AiCoverTime;
        public float AiCoverMinBoostDistance;
        public float TurtlingRecentDamageThreshold;
        public float TurtlingMinTime;
        public float TurtlingTimeout;
        public ObstacleIgnoreSizeEnum ObstacleIgnoreSize;
        private byte[] fieldpad = new byte[2];
        public override int SerializedSize
        {
            get
            {
                return 180;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Unit = binaryReader.ReadTagReference();
            this.Style = binaryReader.ReadTagReference();
            this.CharacterVehicleVehicleFlags = ((VehicleFlags)(binaryReader.ReadInt32()));
            this.AiPathfindingRadius = binaryReader.ReadSingle();
            this.AiDestinationRadius = binaryReader.ReadSingle();
            this.AiDecelerationDistanceworldUnits = binaryReader.ReadSingle();
            this.AiTurningRadius = binaryReader.ReadSingle();
            this.AiInnerTurningRadius = binaryReader.ReadSingle();
            this.AiIdealTurningRadius = binaryReader.ReadSingle();
            this.AiBansheeSteeringMaximum = binaryReader.ReadSingle();
            this.AiMaxSteeringAngle = binaryReader.ReadSingle();
            this.AiMaxSteeringDelta = binaryReader.ReadSingle();
            this.AiOversteeringScale = binaryReader.ReadSingle();
            this.AiOversteeringBounds = binaryReader.ReadRange();
            this.AiSideslipDistance = binaryReader.ReadSingle();
            this.AiAvoidanceDistance = binaryReader.ReadSingle();
            this.AiMinUrgency = binaryReader.ReadSingle();
            this.AiThrottleMaximum = binaryReader.ReadSingle();
            this.AiGoalMinThrottleScale = binaryReader.ReadSingle();
            this.AiTurnMinThrottleScale = binaryReader.ReadSingle();
            this.AiDirectionMinThrottleScale = binaryReader.ReadSingle();
            this.AiAccelerationScale = binaryReader.ReadSingle();
            this.AiThrottleBlend = binaryReader.ReadSingle();
            this.TheoreticalMaxSpeed = binaryReader.ReadSingle();
            this.ErrorScale = binaryReader.ReadSingle();
            this.AiAllowableAimDeviationAngle = binaryReader.ReadSingle();
            this.AiChargeTightAngleDistance = binaryReader.ReadSingle();
            this.AiChargeTightAngle = binaryReader.ReadSingle();
            this.AiChargeRepeatTimeout = binaryReader.ReadSingle();
            this.AiChargeLookaheadTime = binaryReader.ReadSingle();
            this.AiChargeConsiderDistance = binaryReader.ReadSingle();
            this.AiChargeAbortDistance = binaryReader.ReadSingle();
            this.VehicleRamTimeout = binaryReader.ReadSingle();
            this.RamParalysisTime = binaryReader.ReadSingle();
            this.AiCoverDamageThreshold = binaryReader.ReadSingle();
            this.AiCoverMinDistance = binaryReader.ReadSingle();
            this.AiCoverTime = binaryReader.ReadSingle();
            this.AiCoverMinBoostDistance = binaryReader.ReadSingle();
            this.TurtlingRecentDamageThreshold = binaryReader.ReadSingle();
            this.TurtlingMinTime = binaryReader.ReadSingle();
            this.TurtlingTimeout = binaryReader.ReadSingle();
            this.ObstacleIgnoreSize = ((ObstacleIgnoreSizeEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.Unit);
            queueableBinaryWriter.Write(this.Style);
            queueableBinaryWriter.Write(((int)(this.CharacterVehicleVehicleFlags)));
            queueableBinaryWriter.Write(this.AiPathfindingRadius);
            queueableBinaryWriter.Write(this.AiDestinationRadius);
            queueableBinaryWriter.Write(this.AiDecelerationDistanceworldUnits);
            queueableBinaryWriter.Write(this.AiTurningRadius);
            queueableBinaryWriter.Write(this.AiInnerTurningRadius);
            queueableBinaryWriter.Write(this.AiIdealTurningRadius);
            queueableBinaryWriter.Write(this.AiBansheeSteeringMaximum);
            queueableBinaryWriter.Write(this.AiMaxSteeringAngle);
            queueableBinaryWriter.Write(this.AiMaxSteeringDelta);
            queueableBinaryWriter.Write(this.AiOversteeringScale);
            queueableBinaryWriter.Write(this.AiOversteeringBounds);
            queueableBinaryWriter.Write(this.AiSideslipDistance);
            queueableBinaryWriter.Write(this.AiAvoidanceDistance);
            queueableBinaryWriter.Write(this.AiMinUrgency);
            queueableBinaryWriter.Write(this.AiThrottleMaximum);
            queueableBinaryWriter.Write(this.AiGoalMinThrottleScale);
            queueableBinaryWriter.Write(this.AiTurnMinThrottleScale);
            queueableBinaryWriter.Write(this.AiDirectionMinThrottleScale);
            queueableBinaryWriter.Write(this.AiAccelerationScale);
            queueableBinaryWriter.Write(this.AiThrottleBlend);
            queueableBinaryWriter.Write(this.TheoreticalMaxSpeed);
            queueableBinaryWriter.Write(this.ErrorScale);
            queueableBinaryWriter.Write(this.AiAllowableAimDeviationAngle);
            queueableBinaryWriter.Write(this.AiChargeTightAngleDistance);
            queueableBinaryWriter.Write(this.AiChargeTightAngle);
            queueableBinaryWriter.Write(this.AiChargeRepeatTimeout);
            queueableBinaryWriter.Write(this.AiChargeLookaheadTime);
            queueableBinaryWriter.Write(this.AiChargeConsiderDistance);
            queueableBinaryWriter.Write(this.AiChargeAbortDistance);
            queueableBinaryWriter.Write(this.VehicleRamTimeout);
            queueableBinaryWriter.Write(this.RamParalysisTime);
            queueableBinaryWriter.Write(this.AiCoverDamageThreshold);
            queueableBinaryWriter.Write(this.AiCoverMinDistance);
            queueableBinaryWriter.Write(this.AiCoverTime);
            queueableBinaryWriter.Write(this.AiCoverMinBoostDistance);
            queueableBinaryWriter.Write(this.TurtlingRecentDamageThreshold);
            queueableBinaryWriter.Write(this.TurtlingMinTime);
            queueableBinaryWriter.Write(this.TurtlingTimeout);
            queueableBinaryWriter.Write(((short)(this.ObstacleIgnoreSize)));
            queueableBinaryWriter.Write(this.fieldpad);
        }
        [System.FlagsAttribute()]
        public enum VehicleFlags : int
        {
            None = 0,
            PassengersAdoptOriginalSquad = 1,
        }
        public enum ObstacleIgnoreSizeEnum : short
        {
            None = 0,
            Tiny = 1,
            Small = 2,
            Medium = 3,
            Large = 4,
            Huge = 5,
            Immobile = 6,
        }
    }
}
