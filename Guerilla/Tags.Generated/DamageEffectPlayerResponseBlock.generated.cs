//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class DamageEffectPlayerResponseBlock : GuerillaBlock, IWriteQueueable
    {
        public ResponseTypeEnum ResponseType;
        private byte[] fieldpad = new byte[2];
        public ScreenFlashDefinitionStructBlock ScreenFlash = new ScreenFlashDefinitionStructBlock();
        public VibrationDefinitionStructBlock Vibration = new VibrationDefinitionStructBlock();
        public DamageEffectSoundEffectDefinitionBlock SoundEffect = new DamageEffectSoundEffectDefinitionBlock();
        public override int SerializedSize
        {
            get
            {
                return 76;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.ResponseType = ((ResponseTypeEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.ScreenFlash.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Vibration.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.SoundEffect.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.ScreenFlash.ReadInstances(binaryReader, pointerQueue);
            this.Vibration.ReadInstances(binaryReader, pointerQueue);
            this.SoundEffect.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            this.ScreenFlash.QueueWrites(queueableBinaryWriter);
            this.Vibration.QueueWrites(queueableBinaryWriter);
            this.SoundEffect.QueueWrites(queueableBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.ResponseType)));
            queueableBinaryWriter.Write(this.fieldpad);
            this.ScreenFlash.Write_(queueableBinaryWriter);
            this.Vibration.Write_(queueableBinaryWriter);
            this.SoundEffect.Write_(queueableBinaryWriter);
        }
        public enum ResponseTypeEnum : short
        {
            Shielded = 0,
            Unshielded = 1,
            All = 2,
        }
    }
}
