//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagBlockOriginalNameAttribute("edges_block")]
    public partial class EdgesBlock : GuerillaBlock, IWriteQueueable
    {
        public short StartVertex;
        public short EndVertex;
        public short ForwardEdge;
        public short ReverseEdge;
        public short LeftSurface;
        public short RightSurface;
        public override int SerializedSize
        {
            get
            {
                return 12;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.StartVertex = binaryReader.ReadInt16();
            this.EndVertex = binaryReader.ReadInt16();
            this.ForwardEdge = binaryReader.ReadInt16();
            this.ReverseEdge = binaryReader.ReadInt16();
            this.LeftSurface = binaryReader.ReadInt16();
            this.RightSurface = binaryReader.ReadInt16();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.StartVertex);
            queueableBinaryWriter.Write(this.EndVertex);
            queueableBinaryWriter.Write(this.ForwardEdge);
            queueableBinaryWriter.Write(this.ReverseEdge);
            queueableBinaryWriter.Write(this.LeftSurface);
            queueableBinaryWriter.Write(this.RightSurface);
        }
    }
}
