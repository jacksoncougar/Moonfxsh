//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class ObjectChangeColorFunction : GuerillaBlock, IWriteQueueable
    {
        private byte[] fieldpad = new byte[4];
        public ScaleFlags ObjectChangeColorFunctionScaleFlags;
        public Moonfish.Tags.ColourR8G8B8 ColorLowerBound;
        public Moonfish.Tags.ColourR8G8B8 ColorUpperBound;
        public Moonfish.Tags.StringIdent DarkenBy;
        public Moonfish.Tags.StringIdent ScaleBy;
        public override int SerializedSize
        {
            get
            {
                return 40;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.fieldpad = binaryReader.ReadBytes(4);
            this.ObjectChangeColorFunctionScaleFlags = ((ScaleFlags)(binaryReader.ReadInt32()));
            this.ColorLowerBound = binaryReader.ReadColorR8G8B8();
            this.ColorUpperBound = binaryReader.ReadColorR8G8B8();
            this.DarkenBy = binaryReader.ReadStringID();
            this.ScaleBy = binaryReader.ReadStringID();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(((int)(this.ObjectChangeColorFunctionScaleFlags)));
            queueableBinaryWriter.Write(this.ColorLowerBound);
            queueableBinaryWriter.Write(this.ColorUpperBound);
            queueableBinaryWriter.Write(this.DarkenBy);
            queueableBinaryWriter.Write(this.ScaleBy);
        }
        [System.FlagsAttribute()]
        public enum ScaleFlags : int
        {
            None = 0,
            BlendInHsvblendsColorsInHsvRatherThanRgbSpace = 1,
            moreColorsblendsColorsThroughMoreHuesgoesTheLongWayAroundTheColorWheel = 2,
        }
    }
}
