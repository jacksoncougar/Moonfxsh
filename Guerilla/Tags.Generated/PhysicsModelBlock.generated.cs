//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Moonfish.Guerilla.Tags.Generated;

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("phmo")]
    public partial class PhysicsModelBlock : GuerillaBlock, IWriteQueueable
    {
        public Flags PhysicsModelFlags;
        public float Mass;
        public float LowFreqDeactivationScale;
        public float HighFreqDeactivationScale;
        private byte[] fieldpad = new byte[24];
        public PhantomTypesBlock[] PhantomTypes = new PhantomTypesBlock[0];
        public PhysicsModelNodeConstraintEdgeBlock[] NodeEdges = new PhysicsModelNodeConstraintEdgeBlock[0];
        public RigidBodiesBlock[] RigidBodies = new RigidBodiesBlock[0];
        public MaterialsBlock[] Materials = new MaterialsBlock[0];
        public SpheresBlock[] Spheres = new SpheresBlock[0];
        public MultiSpheresBlock[] MultiSpheres = new MultiSpheresBlock[0];
        public PillsBlock[] Pills = new PillsBlock[0];
        public BoxesBlock[] Boxes = new BoxesBlock[0];
        public TrianglesBlock[] Triangles = new TrianglesBlock[0];
        public PolyhedraBlock[] Polyhedra = new PolyhedraBlock[0];
        public PolyhedronFourVectorsBlock[] PolyhedronFourVectors = new PolyhedronFourVectorsBlock[0];
        public PolyhedronPlaneEquationsBlock[] PolyhedronPlaneEquations = new PolyhedronPlaneEquationsBlock[0];
        public MassDistributionsBlock[] MassDistributions = new MassDistributionsBlock[0];
        public ListsBlock[] Lists = new ListsBlock[0];
        public ListShapesBlock[] ListShapes = new ListShapesBlock[0];
        public MoppsBlock[] Mopps = new MoppsBlock[0];
        public byte[] MoppCodes;
        public HingeConstraintsBlock[] HingeConstraints = new HingeConstraintsBlock[0];
        public RagdollConstraintsBlock[] RagdollConstraints = new RagdollConstraintsBlock[0];
        public RegionsBlock[] Regions = new RegionsBlock[0];
        public NodesBlock[] Nodes = new NodesBlock[0];
        public GlobalTagImportInfoBlock[] ImportInfo = new GlobalTagImportInfoBlock[0];
        public GlobalErrorReportCategoriesBlock[] Errors = new GlobalErrorReportCategoriesBlock[0];
        public PointToPathCurveBlock[] PointToPathCurves = new PointToPathCurveBlock[0];
        public LimitedHingeConstraintsBlock[] LimitedHingeConstraints = new LimitedHingeConstraintsBlock[0];
        public BallAndSocketConstraintsBlock[] BallAndSocketConstraints = new BallAndSocketConstraintsBlock[0];
        public StiffSpringConstraintsBlock[] StiffSpringConstraints = new StiffSpringConstraintsBlock[0];
        public PrismaticConstraintsBlock[] PrismaticConstraints = new PrismaticConstraintsBlock[0];
        public PhantomsBlock[] Phantoms = new PhantomsBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 272;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.PhysicsModelFlags = ((Flags)(binaryReader.ReadInt32()));
            this.Mass = binaryReader.ReadSingle();
            this.LowFreqDeactivationScale = binaryReader.ReadSingle();
            this.HighFreqDeactivationScale = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(24);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(104));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(144));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(128));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(176));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(80));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(144));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(96));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(256));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(48));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(64));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(120));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(148));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(592));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(676));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(132));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(120));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(124));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(132));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.PhantomTypes = base.ReadBlockArrayData<PhantomTypesBlock>(binaryReader, pointerQueue.Dequeue());
            this.NodeEdges = base.ReadBlockArrayData<PhysicsModelNodeConstraintEdgeBlock>(binaryReader, pointerQueue.Dequeue());
            this.RigidBodies = base.ReadBlockArrayData<RigidBodiesBlock>(binaryReader, pointerQueue.Dequeue());
            this.Materials = base.ReadBlockArrayData<MaterialsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Spheres = base.ReadBlockArrayData<SpheresBlock>(binaryReader, pointerQueue.Dequeue());
            this.MultiSpheres = base.ReadBlockArrayData<MultiSpheresBlock>(binaryReader, pointerQueue.Dequeue());
            this.Pills = base.ReadBlockArrayData<PillsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Boxes = base.ReadBlockArrayData<BoxesBlock>(binaryReader, pointerQueue.Dequeue());
            this.Triangles = base.ReadBlockArrayData<TrianglesBlock>(binaryReader, pointerQueue.Dequeue());
            this.Polyhedra = base.ReadBlockArrayData<PolyhedraBlock>(binaryReader, pointerQueue.Dequeue());
            this.PolyhedronFourVectors = base.ReadBlockArrayData<PolyhedronFourVectorsBlock>(binaryReader, pointerQueue.Dequeue());
            this.PolyhedronPlaneEquations = base.ReadBlockArrayData<PolyhedronPlaneEquationsBlock>(binaryReader, pointerQueue.Dequeue());
            this.MassDistributions = base.ReadBlockArrayData<MassDistributionsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Lists = base.ReadBlockArrayData<ListsBlock>(binaryReader, pointerQueue.Dequeue());
            this.ListShapes = base.ReadBlockArrayData<ListShapesBlock>(binaryReader, pointerQueue.Dequeue());
            this.Mopps = base.ReadBlockArrayData<MoppsBlock>(binaryReader, pointerQueue.Dequeue());
            this.MoppCodes = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
            this.HingeConstraints = base.ReadBlockArrayData<HingeConstraintsBlock>(binaryReader, pointerQueue.Dequeue());
            this.RagdollConstraints = base.ReadBlockArrayData<RagdollConstraintsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Regions = base.ReadBlockArrayData<RegionsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Nodes = base.ReadBlockArrayData<NodesBlock>(binaryReader, pointerQueue.Dequeue());
            this.ImportInfo = base.ReadBlockArrayData<GlobalTagImportInfoBlock>(binaryReader, pointerQueue.Dequeue());
            this.Errors = base.ReadBlockArrayData<GlobalErrorReportCategoriesBlock>(binaryReader, pointerQueue.Dequeue());
            this.PointToPathCurves = base.ReadBlockArrayData<PointToPathCurveBlock>(binaryReader, pointerQueue.Dequeue());
            this.LimitedHingeConstraints = base.ReadBlockArrayData<LimitedHingeConstraintsBlock>(binaryReader, pointerQueue.Dequeue());
            this.BallAndSocketConstraints = base.ReadBlockArrayData<BallAndSocketConstraintsBlock>(binaryReader, pointerQueue.Dequeue());
            this.StiffSpringConstraints = base.ReadBlockArrayData<StiffSpringConstraintsBlock>(binaryReader, pointerQueue.Dequeue());
            this.PrismaticConstraints = base.ReadBlockArrayData<PrismaticConstraintsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Phantoms = base.ReadBlockArrayData<PhantomsBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            queueableBinaryWriter.QueueWrite(this.PhantomTypes);
            queueableBinaryWriter.QueueWrite(this.NodeEdges);
            queueableBinaryWriter.QueueWrite(this.RigidBodies);
            queueableBinaryWriter.QueueWrite(this.Materials);
            queueableBinaryWriter.QueueWrite(this.Spheres);
            queueableBinaryWriter.QueueWrite(this.MultiSpheres);
            queueableBinaryWriter.QueueWrite(this.Pills);
            queueableBinaryWriter.QueueWrite(this.Boxes);
            queueableBinaryWriter.QueueWrite(this.Triangles);
            queueableBinaryWriter.QueueWrite(this.Polyhedra);
            queueableBinaryWriter.QueueWrite(this.PolyhedronFourVectors);
            queueableBinaryWriter.QueueWrite(this.PolyhedronPlaneEquations);
            queueableBinaryWriter.QueueWrite(this.MassDistributions);
            queueableBinaryWriter.QueueWrite(this.Lists);
            queueableBinaryWriter.QueueWrite(this.ListShapes);
            queueableBinaryWriter.QueueWrite(this.Mopps);
            queueableBinaryWriter.QueueWrite(this.MoppCodes);
            queueableBinaryWriter.QueueWrite(this.HingeConstraints);
            queueableBinaryWriter.QueueWrite(this.RagdollConstraints);
            queueableBinaryWriter.QueueWrite(this.Regions);
            queueableBinaryWriter.QueueWrite(this.Nodes);
            queueableBinaryWriter.QueueWrite(this.ImportInfo);
            queueableBinaryWriter.QueueWrite(this.Errors);
            queueableBinaryWriter.QueueWrite(this.PointToPathCurves);
            queueableBinaryWriter.QueueWrite(this.LimitedHingeConstraints);
            queueableBinaryWriter.QueueWrite(this.BallAndSocketConstraints);
            queueableBinaryWriter.QueueWrite(this.StiffSpringConstraints);
            queueableBinaryWriter.QueueWrite(this.PrismaticConstraints);
            queueableBinaryWriter.QueueWrite(this.Phantoms);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(((int)(this.PhysicsModelFlags)));
            queueableBinaryWriter.Write(this.Mass);
            queueableBinaryWriter.Write(this.LowFreqDeactivationScale);
            queueableBinaryWriter.Write(this.HighFreqDeactivationScale);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.WritePointer(this.PhantomTypes);
            queueableBinaryWriter.WritePointer(this.NodeEdges);
            queueableBinaryWriter.WritePointer(this.RigidBodies);
            queueableBinaryWriter.WritePointer(this.Materials);
            queueableBinaryWriter.WritePointer(this.Spheres);
            queueableBinaryWriter.WritePointer(this.MultiSpheres);
            queueableBinaryWriter.WritePointer(this.Pills);
            queueableBinaryWriter.WritePointer(this.Boxes);
            queueableBinaryWriter.WritePointer(this.Triangles);
            queueableBinaryWriter.WritePointer(this.Polyhedra);
            queueableBinaryWriter.WritePointer(this.PolyhedronFourVectors);
            queueableBinaryWriter.WritePointer(this.PolyhedronPlaneEquations);
            queueableBinaryWriter.WritePointer(this.MassDistributions);
            queueableBinaryWriter.WritePointer(this.Lists);
            queueableBinaryWriter.WritePointer(this.ListShapes);
            queueableBinaryWriter.WritePointer(this.Mopps);
            queueableBinaryWriter.WritePointer(this.MoppCodes);
            queueableBinaryWriter.WritePointer(this.HingeConstraints);
            queueableBinaryWriter.WritePointer(this.RagdollConstraints);
            queueableBinaryWriter.WritePointer(this.Regions);
            queueableBinaryWriter.WritePointer(this.Nodes);
            queueableBinaryWriter.WritePointer(this.ImportInfo);
            queueableBinaryWriter.WritePointer(this.Errors);
            queueableBinaryWriter.WritePointer(this.PointToPathCurves);
            queueableBinaryWriter.WritePointer(this.LimitedHingeConstraints);
            queueableBinaryWriter.WritePointer(this.BallAndSocketConstraints);
            queueableBinaryWriter.WritePointer(this.StiffSpringConstraints);
            queueableBinaryWriter.WritePointer(this.PrismaticConstraints);
            queueableBinaryWriter.WritePointer(this.Phantoms);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            Unused = 1,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Phmo = ((TagClass)("phmo"));
    }
}
