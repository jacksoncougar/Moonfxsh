//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class AiConversationLineBlock : GuerillaBlock, IWriteQueueable
    {
        public Flags AiConversationLineFlags;
        public Moonfish.Tags.ShortBlockIndex1 Participant;
        public AddresseeEnum Addressee;
        public Moonfish.Tags.ShortBlockIndex1 AddresseeParticipant;
        private byte[] fieldpad = new byte[4];
        public float LineDelayTime;
        private byte[] fieldpad0 = new byte[12];
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference Variant1;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference Variant2;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference Variant3;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference Variant4;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference Variant5;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference Variant6;
        public override int SerializedSize
        {
            get
            {
                return 76;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.AiConversationLineFlags = ((Flags)(binaryReader.ReadInt16()));
            this.Participant = binaryReader.ReadShortBlockIndex1();
            this.Addressee = ((AddresseeEnum)(binaryReader.ReadInt16()));
            this.AddresseeParticipant = binaryReader.ReadShortBlockIndex1();
            this.fieldpad = binaryReader.ReadBytes(4);
            this.LineDelayTime = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(12);
            this.Variant1 = binaryReader.ReadTagReference();
            this.Variant2 = binaryReader.ReadTagReference();
            this.Variant3 = binaryReader.ReadTagReference();
            this.Variant4 = binaryReader.ReadTagReference();
            this.Variant5 = binaryReader.ReadTagReference();
            this.Variant6 = binaryReader.ReadTagReference();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((short)(this.AiConversationLineFlags)));
            queueableBlamBinaryWriter.Write(this.Participant);
            queueableBlamBinaryWriter.Write(((short)(this.Addressee)));
            queueableBlamBinaryWriter.Write(this.AddresseeParticipant);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.LineDelayTime);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.Variant1);
            queueableBlamBinaryWriter.Write(this.Variant2);
            queueableBlamBinaryWriter.Write(this.Variant3);
            queueableBlamBinaryWriter.Write(this.Variant4);
            queueableBlamBinaryWriter.Write(this.Variant5);
            queueableBlamBinaryWriter.Write(this.Variant6);
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            AddresseeLookAtSpeaker = 1,
            EveryoneLookAtSpeaker = 2,
            EveryoneLookAtAddressee = 4,
            WaitAfterUntilToldToAdvance = 8,
            WaitUntilSpeakerNearby = 16,
            WaitUntilEveryoneNearby = 32,
        }
        public enum AddresseeEnum : short
        {
            None = 0,
            Player = 1,
            Participant = 2,
        }
    }
}
