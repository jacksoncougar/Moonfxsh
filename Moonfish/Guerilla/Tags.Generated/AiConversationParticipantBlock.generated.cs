//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class AiConversationParticipantBlock : GuerillaBlock, IWriteQueueable
    {
        private byte[] fieldpad = new byte[8];
        public Moonfish.Tags.ShortBlockIndex1 UseThisObject;
        public Moonfish.Tags.ShortBlockIndex1 SetNewName;
        private byte[] fieldpad0 = new byte[12];
        private byte[] fieldpad1 = new byte[12];
        public Moonfish.Tags.String32 EncounterName;
        private byte[] fieldpad2 = new byte[4];
        private byte[] fieldpad3 = new byte[12];
        public override int SerializedSize
        {
            get
            {
                return 84;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.fieldpad = binaryReader.ReadBytes(8);
            this.UseThisObject = binaryReader.ReadShortBlockIndex1();
            this.SetNewName = binaryReader.ReadShortBlockIndex1();
            this.fieldpad0 = binaryReader.ReadBytes(12);
            this.fieldpad1 = binaryReader.ReadBytes(12);
            this.EncounterName = binaryReader.ReadString32();
            this.fieldpad2 = binaryReader.ReadBytes(4);
            this.fieldpad3 = binaryReader.ReadBytes(12);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.UseThisObject);
            queueableBinaryWriter.Write(this.SetNewName);
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.fieldpad1);
            queueableBinaryWriter.Write(this.EncounterName);
            queueableBinaryWriter.Write(this.fieldpad2);
            queueableBinaryWriter.Write(this.fieldpad3);
        }
    }
}
