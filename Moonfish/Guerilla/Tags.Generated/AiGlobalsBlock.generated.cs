//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("ai_globals_block")]
    public partial class AiGlobalsBlock : GuerillaBlock, IWriteDeferrable
    {
        public float DangerBroadlyFacing;
        private byte[] fieldpad = new byte[4];
        public float DangerShootingNear;
        private byte[] fieldpad0 = new byte[4];
        public float DangerShootingAt;
        private byte[] fieldpad1 = new byte[4];
        public float DangerExtremelyClose;
        private byte[] fieldpad2 = new byte[4];
        public float DangerShieldDamage;
        public float DangerExetendedShieldDamage;
        public float DangerBodyDamage;
        public float DangerExtendedBodyDamage;
        private byte[] fieldpad3 = new byte[48];
        [Moonfish.Tags.TagReferenceAttribute("adlg")]
        public Moonfish.Tags.TagReference GlobalDialogueTag;
        public Moonfish.Tags.StringIdent DefaultMissionDialogueSoundEffect;
        private byte[] fieldpad4 = new byte[20];
        public float JumpDown;
        public float JumpStep;
        public float JumpCrouch;
        public float JumpStand;
        public float JumpStorey;
        public float JumpTower;
        public float MaxJumpDownHeightDown;
        public float MaxJumpDownHeightStep;
        public float MaxJumpDownHeightCrouch;
        public float MaxJumpDownHeightStand;
        public float MaxJumpDownHeightStorey;
        public float MaxJumpDownHeightTower;
        public Moonfish.Model.Range HoistStep;
        public Moonfish.Model.Range HoistCrouch;
        public Moonfish.Model.Range HoistStand;
        private byte[] fieldpad5 = new byte[24];
        public Moonfish.Model.Range VaultStep;
        public Moonfish.Model.Range VaultCrouch;
        private byte[] fieldpad6 = new byte[48];
        public AiGlobalsGravemindBlock[] GravemindProperties = new AiGlobalsGravemindBlock[0];
        private byte[] fieldpad7 = new byte[48];
        public float ScaryTargetThrehold;
        public float ScaryWeaponThrehold;
        public float PlayerScariness;
        public float BerserkingActorScariness;
        public override int SerializedSize
        {
            get
            {
                return 360;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.DangerBroadlyFacing = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(4);
            this.DangerShootingNear = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(4);
            this.DangerShootingAt = binaryReader.ReadSingle();
            this.fieldpad1 = binaryReader.ReadBytes(4);
            this.DangerExtremelyClose = binaryReader.ReadSingle();
            this.fieldpad2 = binaryReader.ReadBytes(4);
            this.DangerShieldDamage = binaryReader.ReadSingle();
            this.DangerExetendedShieldDamage = binaryReader.ReadSingle();
            this.DangerBodyDamage = binaryReader.ReadSingle();
            this.DangerExtendedBodyDamage = binaryReader.ReadSingle();
            this.fieldpad3 = binaryReader.ReadBytes(48);
            this.GlobalDialogueTag = binaryReader.ReadTagReference();
            this.DefaultMissionDialogueSoundEffect = binaryReader.ReadStringIdent();
            this.fieldpad4 = binaryReader.ReadBytes(20);
            this.JumpDown = binaryReader.ReadSingle();
            this.JumpStep = binaryReader.ReadSingle();
            this.JumpCrouch = binaryReader.ReadSingle();
            this.JumpStand = binaryReader.ReadSingle();
            this.JumpStorey = binaryReader.ReadSingle();
            this.JumpTower = binaryReader.ReadSingle();
            this.MaxJumpDownHeightDown = binaryReader.ReadSingle();
            this.MaxJumpDownHeightStep = binaryReader.ReadSingle();
            this.MaxJumpDownHeightCrouch = binaryReader.ReadSingle();
            this.MaxJumpDownHeightStand = binaryReader.ReadSingle();
            this.MaxJumpDownHeightStorey = binaryReader.ReadSingle();
            this.MaxJumpDownHeightTower = binaryReader.ReadSingle();
            this.HoistStep = binaryReader.ReadRange();
            this.HoistCrouch = binaryReader.ReadRange();
            this.HoistStand = binaryReader.ReadRange();
            this.fieldpad5 = binaryReader.ReadBytes(24);
            this.VaultStep = binaryReader.ReadRange();
            this.VaultCrouch = binaryReader.ReadRange();
            this.fieldpad6 = binaryReader.ReadBytes(48);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            this.fieldpad7 = binaryReader.ReadBytes(48);
            this.ScaryTargetThrehold = binaryReader.ReadSingle();
            this.ScaryWeaponThrehold = binaryReader.ReadSingle();
            this.PlayerScariness = binaryReader.ReadSingle();
            this.BerserkingActorScariness = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.GravemindProperties = base.ReadBlockArrayData<AiGlobalsGravemindBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.GravemindProperties);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.DangerBroadlyFacing);
            writer.Write(this.fieldpad);
            writer.Write(this.DangerShootingNear);
            writer.Write(this.fieldpad0);
            writer.Write(this.DangerShootingAt);
            writer.Write(this.fieldpad1);
            writer.Write(this.DangerExtremelyClose);
            writer.Write(this.fieldpad2);
            writer.Write(this.DangerShieldDamage);
            writer.Write(this.DangerExetendedShieldDamage);
            writer.Write(this.DangerBodyDamage);
            writer.Write(this.DangerExtendedBodyDamage);
            writer.Write(this.fieldpad3);
            writer.Write(this.GlobalDialogueTag);
            writer.Write(this.DefaultMissionDialogueSoundEffect);
            writer.Write(this.fieldpad4);
            writer.Write(this.JumpDown);
            writer.Write(this.JumpStep);
            writer.Write(this.JumpCrouch);
            writer.Write(this.JumpStand);
            writer.Write(this.JumpStorey);
            writer.Write(this.JumpTower);
            writer.Write(this.MaxJumpDownHeightDown);
            writer.Write(this.MaxJumpDownHeightStep);
            writer.Write(this.MaxJumpDownHeightCrouch);
            writer.Write(this.MaxJumpDownHeightStand);
            writer.Write(this.MaxJumpDownHeightStorey);
            writer.Write(this.MaxJumpDownHeightTower);
            writer.Write(this.HoistStep);
            writer.Write(this.HoistCrouch);
            writer.Write(this.HoistStand);
            writer.Write(this.fieldpad5);
            writer.Write(this.VaultStep);
            writer.Write(this.VaultCrouch);
            writer.Write(this.fieldpad6);
            writer.WritePointer(this.GravemindProperties);
            writer.Write(this.fieldpad7);
            writer.Write(this.ScaryTargetThrehold);
            writer.Write(this.ScaryWeaponThrehold);
            writer.Write(this.PlayerScariness);
            writer.Write(this.BerserkingActorScariness);
        }
    }
}
