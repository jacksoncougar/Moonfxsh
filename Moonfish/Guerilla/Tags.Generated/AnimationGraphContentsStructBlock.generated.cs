//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("animation_graph_contents_struct_block")]
    public partial class AnimationGraphContentsStructBlock : GuerillaBlock, IWriteQueueable
    {
        public AnimationModeBlock[] ModesAABBCC = new AnimationModeBlock[0];
        public VehicleSuspensionBlock[] VehicleSuspensionCCAABB = new VehicleSuspensionBlock[0];
        public ObjectAnimationBlock[] ObjectOverlaysCCAABB = new ObjectAnimationBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 24;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.ModesAABBCC = base.ReadBlockArrayData<AnimationModeBlock>(binaryReader, pointerQueue.Dequeue());
            this.VehicleSuspensionCCAABB = base.ReadBlockArrayData<VehicleSuspensionBlock>(binaryReader, pointerQueue.Dequeue());
            this.ObjectOverlaysCCAABB = base.ReadBlockArrayData<ObjectAnimationBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            queueableBinaryWriter.QueueWrite(this.ModesAABBCC);
            queueableBinaryWriter.QueueWrite(this.VehicleSuspensionCCAABB);
            queueableBinaryWriter.QueueWrite(this.ObjectOverlaysCCAABB);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.WritePointer(this.ModesAABBCC);
            queueableBinaryWriter.WritePointer(this.VehicleSuspensionCCAABB);
            queueableBinaryWriter.WritePointer(this.ObjectOverlaysCCAABB);
        }
    }
}
