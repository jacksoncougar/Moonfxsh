//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("animation_graph_node_block")]
    public partial class AnimationGraphNodeBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.StringIdent Name;
        public Moonfish.Tags.ShortBlockIndex1 NextSiblingNodeIndex;
        public Moonfish.Tags.ShortBlockIndex1 FirstChildNodeIndex;
        public Moonfish.Tags.ShortBlockIndex1 ParentNodeIndex;
        public ModelFlags AnimationGraphNodeModelFlags;
        public NodeJointFlags AnimationGraphNodeNodeJointFlags;
        public OpenTK.Vector3 BaseVector;
        public float VectorRange;
        public float ZPos;
        public override int SerializedSize
        {
            get
            {
                return 32;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadStringIdent();
            this.NextSiblingNodeIndex = binaryReader.ReadShortBlockIndex1();
            this.FirstChildNodeIndex = binaryReader.ReadShortBlockIndex1();
            this.ParentNodeIndex = binaryReader.ReadShortBlockIndex1();
            this.AnimationGraphNodeModelFlags = ((ModelFlags)(binaryReader.ReadByte()));
            this.AnimationGraphNodeNodeJointFlags = ((NodeJointFlags)(binaryReader.ReadByte()));
            this.BaseVector = binaryReader.ReadVector3();
            this.VectorRange = binaryReader.ReadSingle();
            this.ZPos = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Name);
            writer.Write(this.NextSiblingNodeIndex);
            writer.Write(this.FirstChildNodeIndex);
            writer.Write(this.ParentNodeIndex);
            writer.Write(((byte)(this.AnimationGraphNodeModelFlags)));
            writer.Write(((byte)(this.AnimationGraphNodeNodeJointFlags)));
            writer.Write(this.BaseVector);
            writer.Write(this.VectorRange);
            writer.Write(this.ZPos);
        }
        [System.FlagsAttribute()]
        public enum ModelFlags : byte
        {
            None = 0,
            PrimaryModel = 1,
            SecondaryModel = 2,
            LocalRoot = 4,
            LeftHand = 8,
            RightHand = 16,
            LeftArmMember = 32,
        }
        [System.FlagsAttribute()]
        public enum NodeJointFlags : byte
        {
            None = 0,
            Ballsocket = 1,
            Hinge = 2,
            NoMovement = 4,
        }
    }
}
