//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("animation_graph_resources_struct_block")]
    public partial class AnimationGraphResourcesStructBlock : GuerillaBlock, IWriteDeferrable
    {
        [Moonfish.Tags.TagReferenceAttribute("jmad")]
        public Moonfish.Tags.TagReference ParentAnimationGraph;
        public InheritanceFlags AnimationGraphResourcesStructInheritanceFlags;
        public PrivateFlags AnimationGraphResourcesStructPrivateFlags;
        public short AnimationCodecPack;
        public AnimationGraphNodeBlock[] SkeletonNodesABCDCC = new AnimationGraphNodeBlock[0];
        public AnimationGraphSoundReferenceBlock[] SoundReferencesABCDCC = new AnimationGraphSoundReferenceBlock[0];
        public AnimationGraphEffectReferenceBlock[] EffectReferencesABCDCC = new AnimationGraphEffectReferenceBlock[0];
        public AnimationBlendScreenBlock[] BlendScreensABCDCC = new AnimationBlendScreenBlock[0];
        public AnimationPoolBlock[] AnimationsABCDCC = new AnimationPoolBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 52;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.ParentAnimationGraph = binaryReader.ReadTagReference();
            this.AnimationGraphResourcesStructInheritanceFlags = ((InheritanceFlags)(binaryReader.ReadByte()));
            this.AnimationGraphResourcesStructPrivateFlags = ((PrivateFlags)(binaryReader.ReadByte()));
            this.AnimationCodecPack = binaryReader.ReadInt16();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(28));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(108));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.SkeletonNodesABCDCC = base.ReadBlockArrayData<AnimationGraphNodeBlock>(binaryReader, pointerQueue.Dequeue());
            this.SoundReferencesABCDCC = base.ReadBlockArrayData<AnimationGraphSoundReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.EffectReferencesABCDCC = base.ReadBlockArrayData<AnimationGraphEffectReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.BlendScreensABCDCC = base.ReadBlockArrayData<AnimationBlendScreenBlock>(binaryReader, pointerQueue.Dequeue());
            this.AnimationsABCDCC = base.ReadBlockArrayData<AnimationPoolBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.SkeletonNodesABCDCC);
            writer.Defer(this.SoundReferencesABCDCC);
            writer.Defer(this.EffectReferencesABCDCC);
            writer.Defer(this.BlendScreensABCDCC);
            writer.Defer(this.AnimationsABCDCC);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.ParentAnimationGraph);
            writer.Write(((byte)(this.AnimationGraphResourcesStructInheritanceFlags)));
            writer.Write(((byte)(this.AnimationGraphResourcesStructPrivateFlags)));
            writer.Write(this.AnimationCodecPack);
            writer.WritePointer(this.SkeletonNodesABCDCC);
            writer.WritePointer(this.SoundReferencesABCDCC);
            writer.WritePointer(this.EffectReferencesABCDCC);
            writer.WritePointer(this.BlendScreensABCDCC);
            writer.WritePointer(this.AnimationsABCDCC);
        }
        [System.FlagsAttribute()]
        public enum InheritanceFlags : byte
        {
            None = 0,
            InheritRootTransScaleOnly = 1,
            InheritForUseOnPlayer = 2,
        }
        [System.FlagsAttribute()]
        public enum PrivateFlags : byte
        {
            None = 0,
            PreparedForCache = 1,
            Unused = 2,
            ImportedWithCodecCompressors = 4,
            UnusedSmellyFlag = 8,
            WrittenToCache = 16,
            AnimationDataReordered = 32,
        }
    }
}
