//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("animation_reference_block")]
    public partial class AnimationReferenceBlock : GuerillaBlock, IWriteDeferrable
    {
        public Flags AnimationReferenceFlags;
        /// <summary>
        /// Defines the primary intro transitional animation
        /// </summary>
        public int AnimationPeriod;
        public ScreenAnimationKeyframeReferenceBlock[] Keyframes = new ScreenAnimationKeyframeReferenceBlock[0];
        /// <summary>
        /// Defines the primary outro transitional animation
        /// </summary>
        public int AnimationPeriod0;
        public ScreenAnimationKeyframeReferenceBlock[] Keyframes0 = new ScreenAnimationKeyframeReferenceBlock[0];
        /// <summary>
        /// Defines the ambient animation
        /// </summary>
        public int AnimationPeriod1;
        public AmbientAnimationLoopingStyleEnum AmbientAnimationLoopingStyle;
        private byte[] fieldpad = new byte[2];
        public ScreenAnimationKeyframeReferenceBlock[] Keyframes1 = new ScreenAnimationKeyframeReferenceBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 44;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.AnimationReferenceFlags = ((Flags)(binaryReader.ReadInt32()));
            this.AnimationPeriod = binaryReader.ReadInt32();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            this.AnimationPeriod0 = binaryReader.ReadInt32();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            this.AnimationPeriod1 = binaryReader.ReadInt32();
            this.AmbientAnimationLoopingStyle = ((AmbientAnimationLoopingStyleEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Keyframes = base.ReadBlockArrayData<ScreenAnimationKeyframeReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.Keyframes0 = base.ReadBlockArrayData<ScreenAnimationKeyframeReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.Keyframes1 = base.ReadBlockArrayData<ScreenAnimationKeyframeReferenceBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Keyframes);
            writer.Defer(this.Keyframes0);
            writer.Defer(this.Keyframes1);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((int)(this.AnimationReferenceFlags)));
            writer.Write(this.AnimationPeriod);
            writer.WritePointer(this.Keyframes);
            writer.Write(this.AnimationPeriod0);
            writer.WritePointer(this.Keyframes0);
            writer.Write(this.AnimationPeriod1);
            writer.Write(((short)(this.AmbientAnimationLoopingStyle)));
            writer.Write(this.fieldpad);
            writer.WritePointer(this.Keyframes1);
        }
        /// <summary>
        /// Animations used by screen definitions for transitions and ambient animating
        /// </summary>
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            Unused = 1,
        }
        public enum AmbientAnimationLoopingStyleEnum : short
        {
            NONE = 0,
            ReverseLoop = 1,
            Loop = 2,
            DontLoop = 3,
        }
    }
}
