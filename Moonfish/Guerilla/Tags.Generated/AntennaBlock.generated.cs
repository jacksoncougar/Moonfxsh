//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("ant!")]
    [TagBlockOriginalNameAttribute("antenna_block")]
    public partial class AntennaBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.StringIdent AttachmentMarkerName;
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference Bitmaps;
        [Moonfish.Tags.TagReferenceAttribute("pphy")]
        public Moonfish.Tags.TagReference Physics;
        private byte[] fieldpad = new byte[80];
        public float SpringStrengthCoefficient;
        public float FalloffPixels;
        public float CutoffPixels;
        private byte[] fieldpad0 = new byte[40];
        public AntennaVertexBlock[] Vertices = new AntennaVertexBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 160;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.AttachmentMarkerName = binaryReader.ReadStringIdent();
            this.Bitmaps = binaryReader.ReadTagReference();
            this.Physics = binaryReader.ReadTagReference();
            this.fieldpad = binaryReader.ReadBytes(80);
            this.SpringStrengthCoefficient = binaryReader.ReadSingle();
            this.FalloffPixels = binaryReader.ReadSingle();
            this.CutoffPixels = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(40);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(128));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Vertices = base.ReadBlockArrayData<AntennaVertexBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.Vertices);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.AttachmentMarkerName);
            queueableBinaryWriter.Write(this.Bitmaps);
            queueableBinaryWriter.Write(this.Physics);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.SpringStrengthCoefficient);
            queueableBinaryWriter.Write(this.FalloffPixels);
            queueableBinaryWriter.Write(this.CutoffPixels);
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.WritePointer(this.Vertices);
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Ant = ((TagClass)("ant!"));
    }
}
