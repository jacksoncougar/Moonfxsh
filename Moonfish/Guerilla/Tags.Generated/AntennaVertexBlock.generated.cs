//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class AntennaVertexBlock : GuerillaBlock, IWriteQueueable
    {
        public float SpringStrengthCoefficient;
        private byte[] fieldpad = new byte[24];
        public OpenTK.Vector2 Angles;
        public float Length;
        public short SequenceIndex;
        private byte[] fieldpad0 = new byte[2];
        public OpenTK.Vector4 Color;
        public OpenTK.Vector4 LODColor;
        private byte[] fieldpad1 = new byte[40];
        private byte[] fieldpad2 = new byte[12];
        public override int SerializedSize
        {
            get
            {
                return 128;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.SpringStrengthCoefficient = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(24);
            this.Angles = binaryReader.ReadVector2();
            this.Length = binaryReader.ReadSingle();
            this.SequenceIndex = binaryReader.ReadInt16();
            this.fieldpad0 = binaryReader.ReadBytes(2);
            this.Color = binaryReader.ReadVector4();
            this.LODColor = binaryReader.ReadVector4();
            this.fieldpad1 = binaryReader.ReadBytes(40);
            this.fieldpad2 = binaryReader.ReadBytes(12);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.SpringStrengthCoefficient);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.Angles);
            queueableBinaryWriter.Write(this.Length);
            queueableBinaryWriter.Write(this.SequenceIndex);
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.Color);
            queueableBinaryWriter.Write(this.LODColor);
            queueableBinaryWriter.Write(this.fieldpad1);
            queueableBinaryWriter.Write(this.fieldpad2);
        }
    }
}
