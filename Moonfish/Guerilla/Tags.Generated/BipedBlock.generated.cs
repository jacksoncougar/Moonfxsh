//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("bipd")]
    public partial class BipedBlock : UnitBlock, IWriteQueueable
    {
        public float MovingTurningSpeed;
        public BipedFlags BipedBipedFlags;
        public float StationaryTurningThreshold;
        public float JumpVelocity;
        public float MaximumSoftLandingTime;
        public float MaximumHardLandingTime;
        public float MinimumSoftLandingVelocity;
        public float MinimumHardLandingVelocity;
        public float MaximumHardLandingVelocity;
        public float DeathHardLandingVelocity;
        public float StunDuration;
        public float StandingCameraHeight;
        public float CrouchingCameraHeight;
        public float CrouchTransitionTime;
        public float CameraInterpolationStart;
        public float CameraInterpolationEnd;
        public float CameraForwardMovementScale;
        public float CameraSideMovementScale;
        public float CameraVerticalMovementScale;
        public float CameraExclusionDistance;
        public float AutoaimWidth;
        public BipedLockOnDataStructBlock LockonData = new BipedLockOnDataStructBlock();
        private byte[] fieldpad4 = new byte[16];
        public float HeadShotAccScale;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference AreaDamageEffect;
        public CharacterPhysicsStructBlock Physics = new CharacterPhysicsStructBlock();
        public ContactPointBlock[] ContactPoints = new ContactPointBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("char")]
        public Moonfish.Tags.TagReference ReanimationCharacter;
        [Moonfish.Tags.TagReferenceAttribute("char")]
        public Moonfish.Tags.TagReference DeathSpawnCharacter;
        public short DeathSpawnCount;
        private byte[] fieldpad5 = new byte[2];
        public override int SerializedSize
        {
            get
            {
                return 788;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.MovingTurningSpeed = binaryReader.ReadSingle();
            this.BipedBipedFlags = ((BipedFlags)(binaryReader.ReadInt32()));
            this.StationaryTurningThreshold = binaryReader.ReadSingle();
            this.JumpVelocity = binaryReader.ReadSingle();
            this.MaximumSoftLandingTime = binaryReader.ReadSingle();
            this.MaximumHardLandingTime = binaryReader.ReadSingle();
            this.MinimumSoftLandingVelocity = binaryReader.ReadSingle();
            this.MinimumHardLandingVelocity = binaryReader.ReadSingle();
            this.MaximumHardLandingVelocity = binaryReader.ReadSingle();
            this.DeathHardLandingVelocity = binaryReader.ReadSingle();
            this.StunDuration = binaryReader.ReadSingle();
            this.StandingCameraHeight = binaryReader.ReadSingle();
            this.CrouchingCameraHeight = binaryReader.ReadSingle();
            this.CrouchTransitionTime = binaryReader.ReadSingle();
            this.CameraInterpolationStart = binaryReader.ReadSingle();
            this.CameraInterpolationEnd = binaryReader.ReadSingle();
            this.CameraForwardMovementScale = binaryReader.ReadSingle();
            this.CameraSideMovementScale = binaryReader.ReadSingle();
            this.CameraVerticalMovementScale = binaryReader.ReadSingle();
            this.CameraExclusionDistance = binaryReader.ReadSingle();
            this.AutoaimWidth = binaryReader.ReadSingle();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.LockonData.ReadFields(binaryReader)));
            this.fieldpad4 = binaryReader.ReadBytes(16);
            this.HeadShotAccScale = binaryReader.ReadSingle();
            this.AreaDamageEffect = binaryReader.ReadTagReference();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Physics.ReadFields(binaryReader)));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            this.ReanimationCharacter = binaryReader.ReadTagReference();
            this.DeathSpawnCharacter = binaryReader.ReadTagReference();
            this.DeathSpawnCount = binaryReader.ReadInt16();
            this.fieldpad5 = binaryReader.ReadBytes(2);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.LockonData.ReadInstances(binaryReader, pointerQueue);
            this.Physics.ReadInstances(binaryReader, pointerQueue);
            this.ContactPoints = base.ReadBlockArrayData<ContactPointBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            this.LockonData.QueueWrites(queueableBlamBinaryWriter);
            this.Physics.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.ContactPoints);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.MovingTurningSpeed);
            queueableBlamBinaryWriter.Write(((int)(this.BipedBipedFlags)));
            queueableBlamBinaryWriter.Write(this.StationaryTurningThreshold);
            queueableBlamBinaryWriter.Write(this.JumpVelocity);
            queueableBlamBinaryWriter.Write(this.MaximumSoftLandingTime);
            queueableBlamBinaryWriter.Write(this.MaximumHardLandingTime);
            queueableBlamBinaryWriter.Write(this.MinimumSoftLandingVelocity);
            queueableBlamBinaryWriter.Write(this.MinimumHardLandingVelocity);
            queueableBlamBinaryWriter.Write(this.MaximumHardLandingVelocity);
            queueableBlamBinaryWriter.Write(this.DeathHardLandingVelocity);
            queueableBlamBinaryWriter.Write(this.StunDuration);
            queueableBlamBinaryWriter.Write(this.StandingCameraHeight);
            queueableBlamBinaryWriter.Write(this.CrouchingCameraHeight);
            queueableBlamBinaryWriter.Write(this.CrouchTransitionTime);
            queueableBlamBinaryWriter.Write(this.CameraInterpolationStart);
            queueableBlamBinaryWriter.Write(this.CameraInterpolationEnd);
            queueableBlamBinaryWriter.Write(this.CameraForwardMovementScale);
            queueableBlamBinaryWriter.Write(this.CameraSideMovementScale);
            queueableBlamBinaryWriter.Write(this.CameraVerticalMovementScale);
            queueableBlamBinaryWriter.Write(this.CameraExclusionDistance);
            queueableBlamBinaryWriter.Write(this.AutoaimWidth);
            this.LockonData.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.fieldpad4);
            queueableBlamBinaryWriter.Write(this.HeadShotAccScale);
            queueableBlamBinaryWriter.Write(this.AreaDamageEffect);
            this.Physics.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.WritePointer(this.ContactPoints);
            queueableBlamBinaryWriter.Write(this.ReanimationCharacter);
            queueableBlamBinaryWriter.Write(this.DeathSpawnCharacter);
            queueableBlamBinaryWriter.Write(this.DeathSpawnCount);
            queueableBlamBinaryWriter.Write(this.fieldpad5);
        }
        [System.FlagsAttribute()]
        public enum BipedFlags : int
        {
            None = 0,
            TurnsWithoutAnimating = 1,
            PassesThroughOtherBipeds = 2,
            ImmuneToFallingDamage = 4,
            RotateWhileAirborne = 8,
            UsesLimpBodyPhysics = 16,
            Unused = 32,
            RandomSpeedIncrease = 64,
            Unused0 = 128,
            SpawnDeathChildrenOnDestroy = 256,
            StunnedByEmpDamage = 512,
            DeadPhysicsWhenStunned = 1024,
            AlwaysRagdollWhenDead = 2048,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Bipd = ((TagClass)("bipd"));
    }
}
