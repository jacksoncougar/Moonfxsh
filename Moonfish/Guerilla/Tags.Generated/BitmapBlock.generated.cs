//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("bitm")]
    public partial class BitmapBlock : GuerillaBlock, IWriteQueueable
    {
        public TypeEnum Type;
        public FormatEnum Format;
        public UsageEnum Usage;
        public Flags BitmapFlags;
        /// <summary>
        /// These properties control how mipmaps are postprocessed.
        /// </summary>
        public float DetailFadeFactor;
        public float SharpenAmount;
        public float BumpHeight;
        public SpriteSizeEnum SpriteSize;
        public short EMPTYSTRING;
        /// <summary>
        /// The original image file used to import the bitmap group.
        /// </summary>
        public short ColorPlateWidth;
        public short ColorPlateHeight;
        private byte[] data = new byte[8];
        /// <summary>
        /// Pixel data after being processed by the tool.
        /// </summary>
        private byte[] data0 = new byte[8];
        /// <summary>
        /// EMPTY STRING
        /// </summary>
        public float BlurFilterSize;
        public float AlphaBias;
        public short MipmapCount;
        public SpriteUsageEnum SpriteUsage;
        public short SpriteSpacing;
        public ForceFormatEnum ForceFormat;
        public BitmapGroupSequenceBlock[] Sequences = new BitmapGroupSequenceBlock[0];
        public BitmapDataBlock[] Bitmaps = new BitmapDataBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 76;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Type = ((TypeEnum)(binaryReader.ReadInt16()));
            this.Format = ((FormatEnum)(binaryReader.ReadInt16()));
            this.Usage = ((UsageEnum)(binaryReader.ReadInt16()));
            this.BitmapFlags = ((Flags)(binaryReader.ReadInt16()));
            this.DetailFadeFactor = binaryReader.ReadSingle();
            this.SharpenAmount = binaryReader.ReadSingle();
            this.BumpHeight = binaryReader.ReadSingle();
            this.SpriteSize = ((SpriteSizeEnum)(binaryReader.ReadInt16()));
            this.EMPTYSTRING = binaryReader.ReadInt16();
            this.ColorPlateWidth = binaryReader.ReadInt16();
            this.ColorPlateHeight = binaryReader.ReadInt16();
            this.data = binaryReader.ReadBytes(8);
            this.data0 = binaryReader.ReadBytes(8);
            this.BlurFilterSize = binaryReader.ReadSingle();
            this.AlphaBias = binaryReader.ReadSingle();
            this.MipmapCount = binaryReader.ReadInt16();
            this.SpriteUsage = ((SpriteUsageEnum)(binaryReader.ReadInt16()));
            this.SpriteSpacing = binaryReader.ReadInt16();
            this.ForceFormat = ((ForceFormatEnum)(binaryReader.ReadInt16()));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(60));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(116));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Sequences = base.ReadBlockArrayData<BitmapGroupSequenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.Bitmaps = base.ReadBlockArrayData<BitmapDataBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.Sequences);
            queueableBlamBinaryWriter.QueueWrite(this.Bitmaps);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((short)(this.Type)));
            queueableBlamBinaryWriter.Write(((short)(this.Format)));
            queueableBlamBinaryWriter.Write(((short)(this.Usage)));
            queueableBlamBinaryWriter.Write(((short)(this.BitmapFlags)));
            queueableBlamBinaryWriter.Write(this.DetailFadeFactor);
            queueableBlamBinaryWriter.Write(this.SharpenAmount);
            queueableBlamBinaryWriter.Write(this.BumpHeight);
            queueableBlamBinaryWriter.Write(((short)(this.SpriteSize)));
            queueableBlamBinaryWriter.Write(this.EMPTYSTRING);
            queueableBlamBinaryWriter.Write(this.ColorPlateWidth);
            queueableBlamBinaryWriter.Write(this.ColorPlateHeight);
            queueableBlamBinaryWriter.Write(this.data);
            queueableBlamBinaryWriter.Write(this.data0);
            queueableBlamBinaryWriter.Write(this.BlurFilterSize);
            queueableBlamBinaryWriter.Write(this.AlphaBias);
            queueableBlamBinaryWriter.Write(this.MipmapCount);
            queueableBlamBinaryWriter.Write(((short)(this.SpriteUsage)));
            queueableBlamBinaryWriter.Write(this.SpriteSpacing);
            queueableBlamBinaryWriter.Write(((short)(this.ForceFormat)));
            queueableBlamBinaryWriter.WritePointer(this.Sequences);
            queueableBlamBinaryWriter.WritePointer(this.Bitmaps);
        }
        /// <summary>
        /// Type controls bitmap geometry. All dimensions must be a power of 2 except for SPRITES and INTERFACE BITMAPS:
        /// </summary>
        public enum TypeEnum : short
        {
            /// <summary>
            ///  2D TEXTURES: Ordinary 2D textures will be generated.
            /// 
            /// </summary>
            TextureArray2D = 0,
            /// <summary>
            ///  3D TEXTURES: Volume textures will be generated from each sequence of 2D texture slices.
            /// 
            /// </summary>
            TextureArray3D = 1,
            /// <summary>
            ///  CUBE MAPS: Generated from each consecutive set of six 2D textures in each sequence, all faces of a cube map must be square and the same size.
            /// 
            /// </summary>
            Cubemaps = 2,
            /// <summary>
            ///  SPRITES: Sprite texture pages will be generated.
            /// 
            /// </summary>
            Sprites = 3,
            /// <summary>
            ///  INTERFACE BITMAPS: Similar to 2D TEXTURES but without mipmaps and without the power of 2 restriction.
            /// </summary>
            InterfaceBitmaps = 4,
        }
        /// <summary>
        /// Format controls how pixels will be stored internally:
        /// </summary>
        public enum FormatEnum : short
        {
            /// <summary>
            ///  COMPRESSED WITH COLOR-KEY TRANSPARENCY: DXT1 compression, using 4 bits/pixel. 4-x-4 blocks of pixels, are reduced to two colors and interpolated, alpha channel uses color-key transparency instead of alpha from the plate (all zero-alpha pixels also have zero-color).
            /// 
            /// </summary>
            CompressedWithColorKeyTransparency = 0,
            /// <summary>
            ///  COMPRESSED WITH EXPLICIT ALPHA: DXT2/3 compression, using 8 bits/pixel. Same as DXT1 without the color key transparency, alpha channel uses alpha from plate quantized down to 4 bits/pixel.
            /// 
            /// </summary>
            CompressedWithExplicitAlpha = 1,
            /// <summary>
            ///  COMPRESSED WITH INTERPOLATED ALPHA: DXT4/5 compression, using 8 bits/pixel. Same as DXT2/3, except alpha is smoother. Better for smooth alpha gradients, but worse for noisy alpha.
            /// 
            /// </summary>
            CompressedWithInterpolatedAlpha = 2,
            /// <summary>
            ///  16-BIT COLOR: Uses 16 bits/pixel. Depending on the alpha channel, bitmaps are quantized to either r5g6b5 (no alpha), a1r5g5b5 (1-bit alpha), or a4r4g4b4 (>1-bit alpha).
            /// 
            /// </summary>
            Color16Bit = 3,
            /// <summary>
            ///  32-BIT COLOR: Uses 32 bits/pixel. Very high quality and can have alpha at no added cost. This format takes up the most memory, however. Bitmap formats are x8r8g8b8 and a8r8g8b.
            /// 
            /// </summary>
            Color32Bit = 4,
            /// <summary>
            ///  MONOCHROME: Uses either 8 or 16 bits/pixel. Bitmap formats are a8 (alpha), y8 (intensity), ay8 (combined alpha intensity), and a8y8 (separate alpha intensity).
            /// </summary>
            Monochrome = 5,
        }
        /// <summary>
        /// Usage controls how mipmaps are generated:
        /// </summary>
        public enum UsageEnum : short
        {
            /// <summary>
            ///  ALPHA BLEND: Pixels with zero alpha are ignored in mipmaps, to prevent bleeding the transparent color.
            /// 
            /// </summary>
            AlphaBlend = 0,
            /// <summary>
            ///  DEFAULT: Downsampling works normally, as in Photoshop.
            /// 
            /// </summary>
            Default = 1,
            /// <summary>
            ///  HEIGHT MAP: The bitmap (normally grayscale) is a height map that gets converted to a bump map. Uses <bump height> below. Alpha is passed through unmodified.
            /// 
            /// </summary>
            HeightMap = 2,
            /// <summary>
            ///  DETAIL MAP: Mipmap color fades to gray, controlled by <detail fade factor> below. Alpha fades to white.
            /// 
            /// </summary>
            DetailMap = 3,
            /// <summary>
            ///  LIGHT MAP: Generates no mipmaps. Do not use!
            /// 
            /// </summary>
            LightMap = 4,
            /// <summary>
            ///  VECTOR MAP: Used mostly for special effects; pixels are treated as xyz vectors and normalized after downsampling. Alpha is passed through unmodified.
            /// </summary>
            VectorMap = 5,
            HeightMapBLUE255 = 6,
            Embm = 7,
            HeightMapA8L8 = 8,
            HeightMapG8B8 = 9,
            HeightMapG8B8WAlpha = 10,
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            EnableDiffusionDithering = 1,
            DisableHeightMapCompression = 2,
            UniformSpriteSequences = 4,
            FilthySpriteBugFix = 8,
            UseSharpBumpFilter = 16,
            UNUSED = 32,
            UseClampedMirroredBumpFilter = 64,
            InvertDetailFade = 128,
            SwapXyVectorComponents = 256,
            ConvertFromSigned = 512,
            ConvertToSigned = 1024,
            ImportMipmapChains = 2048,
            IntentionallyTrueColor = 4096,
        }
        public enum SpriteSizeEnum : short
        {
            Size32X32 = 0,
            Size64X64 = 1,
            Size128X128 = 2,
            Size256X256 = 3,
            Size512X512 = 4,
            Size1024X1024 = 5,
        }
        /// <summary>
        /// Sprite usage controls the background color of sprite plates.
        /// </summary>
        public enum SpriteUsageEnum : short
        {
            BlendAddSubtractMax = 0,
            MultiplyMin = 1,
            DoubleMultiply = 2,
        }
        /// <summary>
        /// EMPTY STRING
        /// </summary>
        public enum ForceFormatEnum : short
        {
            Default = 0,
            ForceG8B8 = 1,
            ForceDXT1 = 2,
            ForceDXT3 = 3,
            ForceDXT5 = 4,
            ForceALPHALUMINANCE8 = 5,
            ForceA4R4G4B4 = 6,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Bitm = ((TagClass)("bitm"));
    }
}
