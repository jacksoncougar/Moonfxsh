//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class BitmapBlockReferenceBlock : GuerillaBlock, IWriteQueueable
    {
        public Flags BitmapReferenceFlags;
        public AnimationIndexEnum AnimationIndex;
        public short IntroAnimationDelayMilliseconds;
        public BitmapBlendMethodEnum BitmapBlendMethod;
        public short InitialSpriteFrame;
        public Moonfish.Tags.Point Topleft;
        public float HorizTextureWrapssecond;
        public float VertTextureWrapssecond;
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference BitmapTag;
        public short RenderDepthBias;
        private byte[] fieldpad = new byte[2];
        public float SpriteAnimationSpeedFps;
        public Moonfish.Tags.Point ProgressBottomleft;
        public Moonfish.Tags.StringIdent StringIdentifier;
        public OpenTK.Vector2 ProgressScale;
        public override int SerializedSize
        {
            get
            {
                return 56;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.BitmapReferenceFlags = ((Flags)(binaryReader.ReadInt32()));
            this.AnimationIndex = ((AnimationIndexEnum)(binaryReader.ReadInt16()));
            this.IntroAnimationDelayMilliseconds = binaryReader.ReadInt16();
            this.BitmapBlendMethod = ((BitmapBlendMethodEnum)(binaryReader.ReadInt16()));
            this.InitialSpriteFrame = binaryReader.ReadInt16();
            this.Topleft = binaryReader.ReadPoint();
            this.HorizTextureWrapssecond = binaryReader.ReadSingle();
            this.VertTextureWrapssecond = binaryReader.ReadSingle();
            this.BitmapTag = binaryReader.ReadTagReference();
            this.RenderDepthBias = binaryReader.ReadInt16();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.SpriteAnimationSpeedFps = binaryReader.ReadSingle();
            this.ProgressBottomleft = binaryReader.ReadPoint();
            this.StringIdentifier = binaryReader.ReadStringIdent();
            this.ProgressScale = binaryReader.ReadVector2();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(((int)(this.BitmapReferenceFlags)));
            queueableBinaryWriter.Write(((short)(this.AnimationIndex)));
            queueableBinaryWriter.Write(this.IntroAnimationDelayMilliseconds);
            queueableBinaryWriter.Write(((short)(this.BitmapBlendMethod)));
            queueableBinaryWriter.Write(this.InitialSpriteFrame);
            queueableBinaryWriter.Write(this.Topleft);
            queueableBinaryWriter.Write(this.HorizTextureWrapssecond);
            queueableBinaryWriter.Write(this.VertTextureWrapssecond);
            queueableBinaryWriter.Write(this.BitmapTag);
            queueableBinaryWriter.Write(this.RenderDepthBias);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.SpriteAnimationSpeedFps);
            queueableBinaryWriter.Write(this.ProgressBottomleft);
            queueableBinaryWriter.Write(this.StringIdentifier);
            queueableBinaryWriter.Write(this.ProgressScale);
        }
        /// <summary>
        /// Specify more flavor bitmaps here
        /// </summary>
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            IgnoreForListSkinSizeCalculation = 1,
            SwapOnRelativeListPosition = 2,
            RenderAsProgressBar = 4,
        }
        public enum AnimationIndexEnum : short
        {
            NONE = 0,
            _00 = 1,
            _01 = 2,
            _02 = 3,
            _03 = 4,
            _04 = 5,
            _05 = 6,
            _06 = 7,
            _07 = 8,
            _08 = 9,
            _09 = 10,
            _10 = 11,
            _11 = 12,
            _12 = 13,
            _13 = 14,
            _14 = 15,
            _15 = 16,
            _16 = 17,
            _17 = 18,
            _18 = 19,
            _19 = 20,
            _20 = 21,
            _21 = 22,
            _22 = 23,
            _23 = 24,
            _24 = 25,
            _25 = 26,
            _26 = 27,
            _27 = 28,
            _28 = 29,
            _29 = 30,
            _30 = 31,
            _31 = 32,
            _32 = 33,
            _33 = 34,
            _34 = 35,
            _35 = 36,
            _36 = 37,
            _37 = 38,
            _38 = 39,
            _39 = 40,
            _40 = 41,
            _41 = 42,
            _42 = 43,
            _43 = 44,
            _44 = 45,
            _45 = 46,
            _46 = 47,
            _47 = 48,
            _48 = 49,
            _49 = 50,
            _50 = 51,
            _51 = 52,
            _52 = 53,
            _53 = 54,
            _54 = 55,
            _55 = 56,
            _56 = 57,
            _57 = 58,
            _58 = 59,
            _59 = 60,
            _60 = 61,
            _61 = 62,
            _62 = 63,
            _63 = 64,
        }
        public enum BitmapBlendMethodEnum : short
        {
            Standard = 0,
            Multiply = 1,
            UNUSED = 2,
        }
    }
}
