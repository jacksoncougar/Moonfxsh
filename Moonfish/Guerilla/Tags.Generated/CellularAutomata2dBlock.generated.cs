//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("whip")]
    [TagBlockOriginalNameAttribute("cellular_automata2d_block")]
    public partial class CellularAutomata2dBlock : GuerillaBlock, IWriteDeferrable
    {
        public short UpdatesPerSecond;
        private byte[] fieldpad = new byte[2];
        public float DeadCellPenalty;
        public float LiveCellBonus;
        private byte[] fieldpad0 = new byte[80];
        public short Width;
        public short Height;
        public float CellWidth;
        public float Height0;
        public OpenTK.Vector2 Velocity;
        private byte[] fieldpad1 = new byte[28];
        public Moonfish.Tags.StringIdent Marker;
        public InterpolationFlags CellularAutomata2dInterpolationFlags;
        public Moonfish.Tags.ColourR8G8B8 BaseColor;
        public Moonfish.Tags.ColourR8G8B8 PeakColor;
        private byte[] fieldpad2 = new byte[76];
        public short Width0;
        public short Height1;
        public float CellWidth0;
        public OpenTK.Vector2 Velocity0;
        private byte[] fieldpad3 = new byte[48];
        public Moonfish.Tags.StringIdent Marker0;
        public short TextureWidth;
        private byte[] fieldpad4 = new byte[2];
        private byte[] fieldpad5 = new byte[48];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference Texture;
        private byte[] fieldpad6 = new byte[160];
        public RulesBlock[] Rules = new RulesBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 544;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.UpdatesPerSecond = binaryReader.ReadInt16();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.DeadCellPenalty = binaryReader.ReadSingle();
            this.LiveCellBonus = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(80);
            this.Width = binaryReader.ReadInt16();
            this.Height = binaryReader.ReadInt16();
            this.CellWidth = binaryReader.ReadSingle();
            this.Height0 = binaryReader.ReadSingle();
            this.Velocity = binaryReader.ReadVector2();
            this.fieldpad1 = binaryReader.ReadBytes(28);
            this.Marker = binaryReader.ReadStringIdent();
            this.CellularAutomata2dInterpolationFlags = ((InterpolationFlags)(binaryReader.ReadInt32()));
            this.BaseColor = binaryReader.ReadColourR8G8B8();
            this.PeakColor = binaryReader.ReadColourR8G8B8();
            this.fieldpad2 = binaryReader.ReadBytes(76);
            this.Width0 = binaryReader.ReadInt16();
            this.Height1 = binaryReader.ReadInt16();
            this.CellWidth0 = binaryReader.ReadSingle();
            this.Velocity0 = binaryReader.ReadVector2();
            this.fieldpad3 = binaryReader.ReadBytes(48);
            this.Marker0 = binaryReader.ReadStringIdent();
            this.TextureWidth = binaryReader.ReadInt16();
            this.fieldpad4 = binaryReader.ReadBytes(2);
            this.fieldpad5 = binaryReader.ReadBytes(48);
            this.Texture = binaryReader.ReadTagReference();
            this.fieldpad6 = binaryReader.ReadBytes(160);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(84));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Rules = base.ReadBlockArrayData<RulesBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Rules);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.UpdatesPerSecond);
            writer.Write(this.fieldpad);
            writer.Write(this.DeadCellPenalty);
            writer.Write(this.LiveCellBonus);
            writer.Write(this.fieldpad0);
            writer.Write(this.Width);
            writer.Write(this.Height);
            writer.Write(this.CellWidth);
            writer.Write(this.Height0);
            writer.Write(this.Velocity);
            writer.Write(this.fieldpad1);
            writer.Write(this.Marker);
            writer.Write(((int)(this.CellularAutomata2dInterpolationFlags)));
            writer.Write(this.BaseColor);
            writer.Write(this.PeakColor);
            writer.Write(this.fieldpad2);
            writer.Write(this.Width0);
            writer.Write(this.Height1);
            writer.Write(this.CellWidth0);
            writer.Write(this.Velocity0);
            writer.Write(this.fieldpad3);
            writer.Write(this.Marker0);
            writer.Write(this.TextureWidth);
            writer.Write(this.fieldpad4);
            writer.Write(this.fieldpad5);
            writer.Write(this.Texture);
            writer.Write(this.fieldpad6);
            writer.WritePointer(this.Rules);
        }
        [System.FlagsAttribute()]
        public enum InterpolationFlags : int
        {
            None = 0,
            BlendInHsvblendsColorsInHsvRatherThanRgbSpace = 1,
            moreColorsblendsColorsThroughMoreHuesgoesTheLongWayAroundTheColorWheel = 2,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Whip = ((TagClass)("whip"));
    }
}
