//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("char")]
    [TagBlockOriginalNameAttribute("character_block")]
    public partial class CharacterBlock : GuerillaBlock, IWriteDeferrable
    {
        public CharacterFlags CharacterCharacterFlags;
        [Moonfish.Tags.TagReferenceAttribute("char")]
        public Moonfish.Tags.TagReference ParentCharacter;
        [Moonfish.Tags.TagReferenceAttribute("unit")]
        public Moonfish.Tags.TagReference Unit;
        [Moonfish.Tags.TagReferenceAttribute("crea")]
        public Moonfish.Tags.TagReference Creature;
        [Moonfish.Tags.TagReferenceAttribute("styl")]
        public Moonfish.Tags.TagReference Style;
        [Moonfish.Tags.TagReferenceAttribute("char")]
        public Moonfish.Tags.TagReference MajorCharacter;
        public CharacterVariantsBlock[] Variants = new CharacterVariantsBlock[0];
        public CharacterGeneralBlock[] GeneralProperties = new CharacterGeneralBlock[0];
        public CharacterVitalityBlock[] VitalityProperties = new CharacterVitalityBlock[0];
        public CharacterPlacementBlock[] PlacementProperties = new CharacterPlacementBlock[0];
        public CharacterPerceptionBlock[] PerceptionProperties = new CharacterPerceptionBlock[0];
        public CharacterLookBlock[] LookProperties = new CharacterLookBlock[0];
        public CharacterMovementBlock[] MovementProperties = new CharacterMovementBlock[0];
        public CharacterSwarmBlock[] SwarmProperties = new CharacterSwarmBlock[0];
        public CharacterReadyBlock[] ReadyProperties = new CharacterReadyBlock[0];
        public CharacterEngageBlock[] EngageProperties = new CharacterEngageBlock[0];
        public CharacterChargeBlock[] ChargeProperties = new CharacterChargeBlock[0];
        public CharacterEvasionBlock[] EvasionProperties = new CharacterEvasionBlock[0];
        public CharacterCoverBlock[] CoverProperties = new CharacterCoverBlock[0];
        public CharacterRetreatBlock[] RetreatProperties = new CharacterRetreatBlock[0];
        public CharacterSearchBlock[] SearchProperties = new CharacterSearchBlock[0];
        public CharacterPresearchBlock[] PresearchProperties = new CharacterPresearchBlock[0];
        public CharacterIdleBlock[] IdleProperties = new CharacterIdleBlock[0];
        public CharacterVocalizationBlock[] VocalizationProperties = new CharacterVocalizationBlock[0];
        public CharacterBoardingBlock[] BoardingProperties = new CharacterBoardingBlock[0];
        public CharacterBossBlock[] BossProperties = new CharacterBossBlock[0];
        public CharacterWeaponsBlock[] WeaponsProperties = new CharacterWeaponsBlock[0];
        public CharacterFiringPatternPropertiesBlock[] FiringPatternProperties = new CharacterFiringPatternPropertiesBlock[0];
        public CharacterGrenadesBlock[] GrenadesProperties = new CharacterGrenadesBlock[0];
        public CharacterVehicleBlock[] VehicleProperties = new CharacterVehicleBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 236;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.CharacterCharacterFlags = ((CharacterFlags)(binaryReader.ReadInt32()));
            this.ParentCharacter = binaryReader.ReadTagReference();
            this.Unit = binaryReader.ReadTagReference();
            this.Creature = binaryReader.ReadTagReference();
            this.Style = binaryReader.ReadTagReference();
            this.MajorCharacter = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(112));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(52));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(52));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(80));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(36));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(64));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(64));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(76));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(36));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(204));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(60));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(180));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Variants = base.ReadBlockArrayData<CharacterVariantsBlock>(binaryReader, pointerQueue.Dequeue());
            this.GeneralProperties = base.ReadBlockArrayData<CharacterGeneralBlock>(binaryReader, pointerQueue.Dequeue());
            this.VitalityProperties = base.ReadBlockArrayData<CharacterVitalityBlock>(binaryReader, pointerQueue.Dequeue());
            this.PlacementProperties = base.ReadBlockArrayData<CharacterPlacementBlock>(binaryReader, pointerQueue.Dequeue());
            this.PerceptionProperties = base.ReadBlockArrayData<CharacterPerceptionBlock>(binaryReader, pointerQueue.Dequeue());
            this.LookProperties = base.ReadBlockArrayData<CharacterLookBlock>(binaryReader, pointerQueue.Dequeue());
            this.MovementProperties = base.ReadBlockArrayData<CharacterMovementBlock>(binaryReader, pointerQueue.Dequeue());
            this.SwarmProperties = base.ReadBlockArrayData<CharacterSwarmBlock>(binaryReader, pointerQueue.Dequeue());
            this.ReadyProperties = base.ReadBlockArrayData<CharacterReadyBlock>(binaryReader, pointerQueue.Dequeue());
            this.EngageProperties = base.ReadBlockArrayData<CharacterEngageBlock>(binaryReader, pointerQueue.Dequeue());
            this.ChargeProperties = base.ReadBlockArrayData<CharacterChargeBlock>(binaryReader, pointerQueue.Dequeue());
            this.EvasionProperties = base.ReadBlockArrayData<CharacterEvasionBlock>(binaryReader, pointerQueue.Dequeue());
            this.CoverProperties = base.ReadBlockArrayData<CharacterCoverBlock>(binaryReader, pointerQueue.Dequeue());
            this.RetreatProperties = base.ReadBlockArrayData<CharacterRetreatBlock>(binaryReader, pointerQueue.Dequeue());
            this.SearchProperties = base.ReadBlockArrayData<CharacterSearchBlock>(binaryReader, pointerQueue.Dequeue());
            this.PresearchProperties = base.ReadBlockArrayData<CharacterPresearchBlock>(binaryReader, pointerQueue.Dequeue());
            this.IdleProperties = base.ReadBlockArrayData<CharacterIdleBlock>(binaryReader, pointerQueue.Dequeue());
            this.VocalizationProperties = base.ReadBlockArrayData<CharacterVocalizationBlock>(binaryReader, pointerQueue.Dequeue());
            this.BoardingProperties = base.ReadBlockArrayData<CharacterBoardingBlock>(binaryReader, pointerQueue.Dequeue());
            this.BossProperties = base.ReadBlockArrayData<CharacterBossBlock>(binaryReader, pointerQueue.Dequeue());
            this.WeaponsProperties = base.ReadBlockArrayData<CharacterWeaponsBlock>(binaryReader, pointerQueue.Dequeue());
            this.FiringPatternProperties = base.ReadBlockArrayData<CharacterFiringPatternPropertiesBlock>(binaryReader, pointerQueue.Dequeue());
            this.GrenadesProperties = base.ReadBlockArrayData<CharacterGrenadesBlock>(binaryReader, pointerQueue.Dequeue());
            this.VehicleProperties = base.ReadBlockArrayData<CharacterVehicleBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Variants);
            writer.Defer(this.GeneralProperties);
            writer.Defer(this.VitalityProperties);
            writer.Defer(this.PlacementProperties);
            writer.Defer(this.PerceptionProperties);
            writer.Defer(this.LookProperties);
            writer.Defer(this.MovementProperties);
            writer.Defer(this.SwarmProperties);
            writer.Defer(this.ReadyProperties);
            writer.Defer(this.EngageProperties);
            writer.Defer(this.ChargeProperties);
            writer.Defer(this.EvasionProperties);
            writer.Defer(this.CoverProperties);
            writer.Defer(this.RetreatProperties);
            writer.Defer(this.SearchProperties);
            writer.Defer(this.PresearchProperties);
            writer.Defer(this.IdleProperties);
            writer.Defer(this.VocalizationProperties);
            writer.Defer(this.BoardingProperties);
            writer.Defer(this.BossProperties);
            writer.Defer(this.WeaponsProperties);
            writer.Defer(this.FiringPatternProperties);
            writer.Defer(this.GrenadesProperties);
            writer.Defer(this.VehicleProperties);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((int)(this.CharacterCharacterFlags)));
            writer.Write(this.ParentCharacter);
            writer.Write(this.Unit);
            writer.Write(this.Creature);
            writer.Write(this.Style);
            writer.Write(this.MajorCharacter);
            writer.WritePointer(this.Variants);
            writer.WritePointer(this.GeneralProperties);
            writer.WritePointer(this.VitalityProperties);
            writer.WritePointer(this.PlacementProperties);
            writer.WritePointer(this.PerceptionProperties);
            writer.WritePointer(this.LookProperties);
            writer.WritePointer(this.MovementProperties);
            writer.WritePointer(this.SwarmProperties);
            writer.WritePointer(this.ReadyProperties);
            writer.WritePointer(this.EngageProperties);
            writer.WritePointer(this.ChargeProperties);
            writer.WritePointer(this.EvasionProperties);
            writer.WritePointer(this.CoverProperties);
            writer.WritePointer(this.RetreatProperties);
            writer.WritePointer(this.SearchProperties);
            writer.WritePointer(this.PresearchProperties);
            writer.WritePointer(this.IdleProperties);
            writer.WritePointer(this.VocalizationProperties);
            writer.WritePointer(this.BoardingProperties);
            writer.WritePointer(this.BossProperties);
            writer.WritePointer(this.WeaponsProperties);
            writer.WritePointer(this.FiringPatternProperties);
            writer.WritePointer(this.GrenadesProperties);
            writer.WritePointer(this.VehicleProperties);
        }
        [System.FlagsAttribute()]
        public enum CharacterFlags : int
        {
            None = 0,
            Flag1 = 1,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Char = ((TagClass)("char"));
    }
}
