//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("character_charge_block")]
    public partial class CharacterChargeBlock : GuerillaBlock, IWriteDeferrable
    {
        public ChargeFlags CharacterChargeChargeFlags;
        public float MeleeConsiderRange;
        public float MeleeChance;
        public float MeleeAttackRange;
        public float MeleeAbortRange;
        public float MeleeAttackTimeout;
        public float MeleeAttackDelayTimer;
        public Moonfish.Model.Range MeleeLeapRange;
        public float MeleeLeapChance;
        public float IdealLeapVelocity;
        public float MaxLeapVelocity;
        public float MeleeLeapBallistic;
        public float MeleeDelayTimer;
        [Moonfish.Tags.TagReferenceAttribute("weap")]
        public Moonfish.Tags.TagReference BerserkWeapon;
        public override int SerializedSize
        {
            get
            {
                return 64;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.CharacterChargeChargeFlags = ((ChargeFlags)(binaryReader.ReadInt32()));
            this.MeleeConsiderRange = binaryReader.ReadSingle();
            this.MeleeChance = binaryReader.ReadSingle();
            this.MeleeAttackRange = binaryReader.ReadSingle();
            this.MeleeAbortRange = binaryReader.ReadSingle();
            this.MeleeAttackTimeout = binaryReader.ReadSingle();
            this.MeleeAttackDelayTimer = binaryReader.ReadSingle();
            this.MeleeLeapRange = binaryReader.ReadRange();
            this.MeleeLeapChance = binaryReader.ReadSingle();
            this.IdealLeapVelocity = binaryReader.ReadSingle();
            this.MaxLeapVelocity = binaryReader.ReadSingle();
            this.MeleeLeapBallistic = binaryReader.ReadSingle();
            this.MeleeDelayTimer = binaryReader.ReadSingle();
            this.BerserkWeapon = binaryReader.ReadTagReference();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((int)(this.CharacterChargeChargeFlags)));
            writer.Write(this.MeleeConsiderRange);
            writer.Write(this.MeleeChance);
            writer.Write(this.MeleeAttackRange);
            writer.Write(this.MeleeAbortRange);
            writer.Write(this.MeleeAttackTimeout);
            writer.Write(this.MeleeAttackDelayTimer);
            writer.Write(this.MeleeLeapRange);
            writer.Write(this.MeleeLeapChance);
            writer.Write(this.IdealLeapVelocity);
            writer.Write(this.MaxLeapVelocity);
            writer.Write(this.MeleeLeapBallistic);
            writer.Write(this.MeleeDelayTimer);
            writer.Write(this.BerserkWeapon);
        }
        [System.FlagsAttribute()]
        public enum ChargeFlags : int
        {
            None = 0,
            OffhandMeleeAllowed = 1,
            BerserkWheneverCharge = 2,
        }
    }
}
