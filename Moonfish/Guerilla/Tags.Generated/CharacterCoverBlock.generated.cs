//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class CharacterCoverBlock : GuerillaBlock, IWriteQueueable
    {
        public CoverFlags CharacterCoverCoverFlags;
        public Moonfish.Model.Range HideBehindCoverTime;
        public float CoverVitalityThreshold;
        public float CoverShieldFraction;
        public float CoverCheckDelay;
        public float EmergeFromCoverWhenShieldFractionReachesThreshold;
        public float CoverDangerThreshold;
        public float DangerUpperThreshold;
        /// <summary>
        /// The Bounds on the chance of seeking cover.
        ///The lower bound is valid when the danger is at 'danger threshold'
        ///The upper bound is valid when the danger is at or above 'danger upper threshold'.
        ///It is interpolated linearly everywhere in between.
        /// All chances are expressed as 'chance of triggering cover in a 1 second period'.
        /// </summary>
        public Moonfish.Model.Range CoverChance;
        public float ProximitySelfpreserve;
        public float DisallowCoverDistance;
        public float ProximityMeleeDistance;
        public float UnreachableEnemyDangerThreshold;
        public float ScaryTargetThreshold;
        public override int SerializedSize
        {
            get
            {
                return 64;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.CharacterCoverCoverFlags = ((CoverFlags)(binaryReader.ReadInt32()));
            this.HideBehindCoverTime = binaryReader.ReadRange();
            this.CoverVitalityThreshold = binaryReader.ReadSingle();
            this.CoverShieldFraction = binaryReader.ReadSingle();
            this.CoverCheckDelay = binaryReader.ReadSingle();
            this.EmergeFromCoverWhenShieldFractionReachesThreshold = binaryReader.ReadSingle();
            this.CoverDangerThreshold = binaryReader.ReadSingle();
            this.DangerUpperThreshold = binaryReader.ReadSingle();
            this.CoverChance = binaryReader.ReadRange();
            this.ProximitySelfpreserve = binaryReader.ReadSingle();
            this.DisallowCoverDistance = binaryReader.ReadSingle();
            this.ProximityMeleeDistance = binaryReader.ReadSingle();
            this.UnreachableEnemyDangerThreshold = binaryReader.ReadSingle();
            this.ScaryTargetThreshold = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((int)(this.CharacterCoverCoverFlags)));
            queueableBlamBinaryWriter.Write(this.HideBehindCoverTime);
            queueableBlamBinaryWriter.Write(this.CoverVitalityThreshold);
            queueableBlamBinaryWriter.Write(this.CoverShieldFraction);
            queueableBlamBinaryWriter.Write(this.CoverCheckDelay);
            queueableBlamBinaryWriter.Write(this.EmergeFromCoverWhenShieldFractionReachesThreshold);
            queueableBlamBinaryWriter.Write(this.CoverDangerThreshold);
            queueableBlamBinaryWriter.Write(this.DangerUpperThreshold);
            queueableBlamBinaryWriter.Write(this.CoverChance);
            queueableBlamBinaryWriter.Write(this.ProximitySelfpreserve);
            queueableBlamBinaryWriter.Write(this.DisallowCoverDistance);
            queueableBlamBinaryWriter.Write(this.ProximityMeleeDistance);
            queueableBlamBinaryWriter.Write(this.UnreachableEnemyDangerThreshold);
            queueableBlamBinaryWriter.Write(this.ScaryTargetThreshold);
        }
        [System.FlagsAttribute()]
        public enum CoverFlags : int
        {
            None = 0,
            Flag1 = 1,
        }
    }
}
