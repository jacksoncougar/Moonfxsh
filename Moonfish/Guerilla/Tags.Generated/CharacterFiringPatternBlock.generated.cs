//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("character_firing_pattern_block")]
    public partial class CharacterFiringPatternBlock : GuerillaBlock, IWriteQueueable
    {
        public float RateOfFire;
        public float TargetTracking;
        public float TargetLeading;
        /// <summary>
        /// at the start of every burst we pick a random point near the target to fire at, on either the left or the right side.
        ///the burst origin angle controls whether this error is exactly horizontal or might have some vertical component.
        ///
        ///over the course of the burst we move our projectiles back in the opposite direction towards the target. this return motion is also controlled by an angle that specifies how close to the horizontal it is.
        ///
        ///for example if the burst origin angle and the burst return angle were both zero, and the return length was the same as the burst length, every burst would start the same amount away from the target (on either the left or right) and move back to exactly over the target at the end of the burst.
        /// </summary>
        public float BurstOriginRadius;
        public float BurstOriginAngle;
        public Moonfish.Model.Range BurstReturnLength;
        public float BurstReturnAngle;
        public Moonfish.Model.Range BurstDuration;
        public Moonfish.Model.Range BurstSeparation;
        public float WeaponDamageModifier;
        public float ProjectileError;
        public float BurstAngularVelocity;
        public float MaximumErrorAngle;
        public override int SerializedSize
        {
            get
            {
                return 64;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.RateOfFire = binaryReader.ReadSingle();
            this.TargetTracking = binaryReader.ReadSingle();
            this.TargetLeading = binaryReader.ReadSingle();
            this.BurstOriginRadius = binaryReader.ReadSingle();
            this.BurstOriginAngle = binaryReader.ReadSingle();
            this.BurstReturnLength = binaryReader.ReadRange();
            this.BurstReturnAngle = binaryReader.ReadSingle();
            this.BurstDuration = binaryReader.ReadRange();
            this.BurstSeparation = binaryReader.ReadRange();
            this.WeaponDamageModifier = binaryReader.ReadSingle();
            this.ProjectileError = binaryReader.ReadSingle();
            this.BurstAngularVelocity = binaryReader.ReadSingle();
            this.MaximumErrorAngle = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.RateOfFire);
            queueableBinaryWriter.Write(this.TargetTracking);
            queueableBinaryWriter.Write(this.TargetLeading);
            queueableBinaryWriter.Write(this.BurstOriginRadius);
            queueableBinaryWriter.Write(this.BurstOriginAngle);
            queueableBinaryWriter.Write(this.BurstReturnLength);
            queueableBinaryWriter.Write(this.BurstReturnAngle);
            queueableBinaryWriter.Write(this.BurstDuration);
            queueableBinaryWriter.Write(this.BurstSeparation);
            queueableBinaryWriter.Write(this.WeaponDamageModifier);
            queueableBinaryWriter.Write(this.ProjectileError);
            queueableBinaryWriter.Write(this.BurstAngularVelocity);
            queueableBinaryWriter.Write(this.MaximumErrorAngle);
        }
    }
}
