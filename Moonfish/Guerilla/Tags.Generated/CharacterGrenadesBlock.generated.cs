//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("character_grenades_block")]
    public partial class CharacterGrenadesBlock : GuerillaBlock, IWriteDeferrable
    {
        public GrenadesFlags CharacterGrenadesGrenadesFlags;
        public GrenadeTypeEnum GrenadeType;
        public TrajectoryTypeEnum TrajectoryType;
        private byte[] fieldpad = new byte[2];
        public short MinimumEnemyCount;
        public float EnemyRadius;
        public float GrenadeIdealVelocity;
        public float GrenadeVelocity;
        public Moonfish.Model.Range GrenadeRanges;
        public float CollateralDamageRadius;
        public float GrenadeChance;
        public float GrenadeThrowDelay;
        public float GrenadeUncoverChance;
        public float AntivehicleGrenadeChance;
        public int GrenadeCount;
        public float DontDropGrenadesChance;
        public override int SerializedSize
        {
            get
            {
                return 60;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.CharacterGrenadesGrenadesFlags = ((GrenadesFlags)(binaryReader.ReadInt32()));
            this.GrenadeType = ((GrenadeTypeEnum)(binaryReader.ReadInt16()));
            this.TrajectoryType = ((TrajectoryTypeEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.MinimumEnemyCount = binaryReader.ReadInt16();
            this.EnemyRadius = binaryReader.ReadSingle();
            this.GrenadeIdealVelocity = binaryReader.ReadSingle();
            this.GrenadeVelocity = binaryReader.ReadSingle();
            this.GrenadeRanges = binaryReader.ReadRange();
            this.CollateralDamageRadius = binaryReader.ReadSingle();
            this.GrenadeChance = binaryReader.ReadSingle();
            this.GrenadeThrowDelay = binaryReader.ReadSingle();
            this.GrenadeUncoverChance = binaryReader.ReadSingle();
            this.AntivehicleGrenadeChance = binaryReader.ReadSingle();
            this.GrenadeCount = binaryReader.ReadInt32();
            this.DontDropGrenadesChance = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((int)(this.CharacterGrenadesGrenadesFlags)));
            writer.Write(((short)(this.GrenadeType)));
            writer.Write(((short)(this.TrajectoryType)));
            writer.Write(this.fieldpad);
            writer.Write(this.MinimumEnemyCount);
            writer.Write(this.EnemyRadius);
            writer.Write(this.GrenadeIdealVelocity);
            writer.Write(this.GrenadeVelocity);
            writer.Write(this.GrenadeRanges);
            writer.Write(this.CollateralDamageRadius);
            writer.Write(this.GrenadeChance);
            writer.Write(this.GrenadeThrowDelay);
            writer.Write(this.GrenadeUncoverChance);
            writer.Write(this.AntivehicleGrenadeChance);
            writer.Write(this.GrenadeCount);
            writer.Write(this.DontDropGrenadesChance);
        }
        [System.FlagsAttribute()]
        public enum GrenadesFlags : int
        {
            None = 0,
            Flag1 = 1,
        }
        public enum GrenadeTypeEnum : short
        {
            HumanFragmentation = 0,
            CovenantPlasma = 1,
        }
        public enum TrajectoryTypeEnum : short
        {
            Toss = 0,
            Lob = 1,
            Bounce = 2,
        }
    }
}
