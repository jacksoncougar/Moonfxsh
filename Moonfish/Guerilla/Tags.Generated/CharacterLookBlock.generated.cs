//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class CharacterLookBlock : GuerillaBlock, IWriteQueueable
    {
        public OpenTK.Vector2 MaximumAimingDeviation;
        public OpenTK.Vector2 MaximumLookingDeviation;
        private byte[] fieldpad = new byte[16];
        public float NoncombatLookDeltaL;
        public float NoncombatLookDeltaR;
        public float CombatLookDeltaL;
        public float CombatLookDeltaR;
        public Moonfish.Model.Range NoncombatIdleLooking;
        public Moonfish.Model.Range NoncombatIdleAiming;
        public Moonfish.Model.Range CombatIdleLooking;
        public Moonfish.Model.Range CombatIdleAiming;
        public override int SerializedSize
        {
            get
            {
                return 80;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.MaximumAimingDeviation = binaryReader.ReadVector2();
            this.MaximumLookingDeviation = binaryReader.ReadVector2();
            this.fieldpad = binaryReader.ReadBytes(16);
            this.NoncombatLookDeltaL = binaryReader.ReadSingle();
            this.NoncombatLookDeltaR = binaryReader.ReadSingle();
            this.CombatLookDeltaL = binaryReader.ReadSingle();
            this.CombatLookDeltaR = binaryReader.ReadSingle();
            this.NoncombatIdleLooking = binaryReader.ReadRange();
            this.NoncombatIdleAiming = binaryReader.ReadRange();
            this.CombatIdleLooking = binaryReader.ReadRange();
            this.CombatIdleAiming = binaryReader.ReadRange();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.MaximumAimingDeviation);
            queueableBlamBinaryWriter.Write(this.MaximumLookingDeviation);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.NoncombatLookDeltaL);
            queueableBlamBinaryWriter.Write(this.NoncombatLookDeltaR);
            queueableBlamBinaryWriter.Write(this.CombatLookDeltaL);
            queueableBlamBinaryWriter.Write(this.CombatLookDeltaR);
            queueableBlamBinaryWriter.Write(this.NoncombatIdleLooking);
            queueableBlamBinaryWriter.Write(this.NoncombatIdleAiming);
            queueableBlamBinaryWriter.Write(this.CombatIdleLooking);
            queueableBlamBinaryWriter.Write(this.CombatIdleAiming);
        }
    }
}
