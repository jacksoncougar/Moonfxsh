//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class CharacterRetreatBlock : GuerillaBlock, IWriteQueueable
    {
        public RetreatFlags CharacterRetreatRetreatFlags;
        public float ShieldThreshold;
        public float ScaryTargetThreshold;
        public float DangerThreshold;
        public float ProximityThreshold;
        public Moonfish.Model.Range MinmaxForcedCowerTimeBounds;
        public Moonfish.Model.Range MinmaxCowerTimeoutBounds;
        public float ProximityAmbushThreshold;
        public float AwarenessAmbushThreshold;
        public float LeaderDeadRetreatChance;
        public float PeerDeadRetreatChance;
        public float SecondPeerDeadRetreatChance;
        public float ZigzagAngle;
        public float ZigzagPeriod;
        public float RetreatGrenadeChance;
        [Moonfish.Tags.TagReferenceAttribute("weap")]
        public Moonfish.Tags.TagReference BackupWeapon;
        public override int SerializedSize
        {
            get
            {
                return 76;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.CharacterRetreatRetreatFlags = ((RetreatFlags)(binaryReader.ReadInt32()));
            this.ShieldThreshold = binaryReader.ReadSingle();
            this.ScaryTargetThreshold = binaryReader.ReadSingle();
            this.DangerThreshold = binaryReader.ReadSingle();
            this.ProximityThreshold = binaryReader.ReadSingle();
            this.MinmaxForcedCowerTimeBounds = binaryReader.ReadRange();
            this.MinmaxCowerTimeoutBounds = binaryReader.ReadRange();
            this.ProximityAmbushThreshold = binaryReader.ReadSingle();
            this.AwarenessAmbushThreshold = binaryReader.ReadSingle();
            this.LeaderDeadRetreatChance = binaryReader.ReadSingle();
            this.PeerDeadRetreatChance = binaryReader.ReadSingle();
            this.SecondPeerDeadRetreatChance = binaryReader.ReadSingle();
            this.ZigzagAngle = binaryReader.ReadSingle();
            this.ZigzagPeriod = binaryReader.ReadSingle();
            this.RetreatGrenadeChance = binaryReader.ReadSingle();
            this.BackupWeapon = binaryReader.ReadTagReference();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((int)(this.CharacterRetreatRetreatFlags)));
            queueableBlamBinaryWriter.Write(this.ShieldThreshold);
            queueableBlamBinaryWriter.Write(this.ScaryTargetThreshold);
            queueableBlamBinaryWriter.Write(this.DangerThreshold);
            queueableBlamBinaryWriter.Write(this.ProximityThreshold);
            queueableBlamBinaryWriter.Write(this.MinmaxForcedCowerTimeBounds);
            queueableBlamBinaryWriter.Write(this.MinmaxCowerTimeoutBounds);
            queueableBlamBinaryWriter.Write(this.ProximityAmbushThreshold);
            queueableBlamBinaryWriter.Write(this.AwarenessAmbushThreshold);
            queueableBlamBinaryWriter.Write(this.LeaderDeadRetreatChance);
            queueableBlamBinaryWriter.Write(this.PeerDeadRetreatChance);
            queueableBlamBinaryWriter.Write(this.SecondPeerDeadRetreatChance);
            queueableBlamBinaryWriter.Write(this.ZigzagAngle);
            queueableBlamBinaryWriter.Write(this.ZigzagPeriod);
            queueableBlamBinaryWriter.Write(this.RetreatGrenadeChance);
            queueableBlamBinaryWriter.Write(this.BackupWeapon);
        }
        [System.FlagsAttribute()]
        public enum RetreatFlags : int
        {
            None = 0,
            ZigzagWhenFleeing = 1,
            Unused1 = 2,
        }
    }
}
