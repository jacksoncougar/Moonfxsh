//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class CharacterVitalityBlock : GuerillaBlock, IWriteQueueable
    {
        public VitalityFlags CharacterVitalityVitalityFlags;
        public float NormalBodyVitality;
        public float NormalShieldVitality;
        public float LegendaryBodyVitality;
        public float LegendaryShieldVitality;
        public float BodyRechargeFraction;
        public float SoftPingThreshold;
        public float SoftPingThreshold0;
        public float SoftPingMinInterruptTime;
        public float HardPingThreshold;
        public float HardPingThreshold0;
        public float HardPingMinInterruptTime;
        public float CurrentDamageDecayDelay;
        public float CurrentDamageDecayTime;
        public float RecentDamageDecayDelay;
        public float RecentDamageDecayTime;
        public float BodyRechargeDelayTime;
        public float BodyRechargeTime;
        public float ShieldRechargeDelayTime;
        public float ShieldRechargeTime;
        public float StunThreshold;
        public Moonfish.Model.Range StunTimeBounds;
        public float ExtendedShieldDamageThreshold;
        public float ExtendedBodyDamageThreshold;
        public float SuicideRadius;
        private byte[] fieldskip = new byte[8];
        public override int SerializedSize
        {
            get
            {
                return 112;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.CharacterVitalityVitalityFlags = ((VitalityFlags)(binaryReader.ReadInt32()));
            this.NormalBodyVitality = binaryReader.ReadSingle();
            this.NormalShieldVitality = binaryReader.ReadSingle();
            this.LegendaryBodyVitality = binaryReader.ReadSingle();
            this.LegendaryShieldVitality = binaryReader.ReadSingle();
            this.BodyRechargeFraction = binaryReader.ReadSingle();
            this.SoftPingThreshold = binaryReader.ReadSingle();
            this.SoftPingThreshold0 = binaryReader.ReadSingle();
            this.SoftPingMinInterruptTime = binaryReader.ReadSingle();
            this.HardPingThreshold = binaryReader.ReadSingle();
            this.HardPingThreshold0 = binaryReader.ReadSingle();
            this.HardPingMinInterruptTime = binaryReader.ReadSingle();
            this.CurrentDamageDecayDelay = binaryReader.ReadSingle();
            this.CurrentDamageDecayTime = binaryReader.ReadSingle();
            this.RecentDamageDecayDelay = binaryReader.ReadSingle();
            this.RecentDamageDecayTime = binaryReader.ReadSingle();
            this.BodyRechargeDelayTime = binaryReader.ReadSingle();
            this.BodyRechargeTime = binaryReader.ReadSingle();
            this.ShieldRechargeDelayTime = binaryReader.ReadSingle();
            this.ShieldRechargeTime = binaryReader.ReadSingle();
            this.StunThreshold = binaryReader.ReadSingle();
            this.StunTimeBounds = binaryReader.ReadRange();
            this.ExtendedShieldDamageThreshold = binaryReader.ReadSingle();
            this.ExtendedBodyDamageThreshold = binaryReader.ReadSingle();
            this.SuicideRadius = binaryReader.ReadSingle();
            this.fieldskip = binaryReader.ReadBytes(8);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((int)(this.CharacterVitalityVitalityFlags)));
            queueableBlamBinaryWriter.Write(this.NormalBodyVitality);
            queueableBlamBinaryWriter.Write(this.NormalShieldVitality);
            queueableBlamBinaryWriter.Write(this.LegendaryBodyVitality);
            queueableBlamBinaryWriter.Write(this.LegendaryShieldVitality);
            queueableBlamBinaryWriter.Write(this.BodyRechargeFraction);
            queueableBlamBinaryWriter.Write(this.SoftPingThreshold);
            queueableBlamBinaryWriter.Write(this.SoftPingThreshold0);
            queueableBlamBinaryWriter.Write(this.SoftPingMinInterruptTime);
            queueableBlamBinaryWriter.Write(this.HardPingThreshold);
            queueableBlamBinaryWriter.Write(this.HardPingThreshold0);
            queueableBlamBinaryWriter.Write(this.HardPingMinInterruptTime);
            queueableBlamBinaryWriter.Write(this.CurrentDamageDecayDelay);
            queueableBlamBinaryWriter.Write(this.CurrentDamageDecayTime);
            queueableBlamBinaryWriter.Write(this.RecentDamageDecayDelay);
            queueableBlamBinaryWriter.Write(this.RecentDamageDecayTime);
            queueableBlamBinaryWriter.Write(this.BodyRechargeDelayTime);
            queueableBlamBinaryWriter.Write(this.BodyRechargeTime);
            queueableBlamBinaryWriter.Write(this.ShieldRechargeDelayTime);
            queueableBlamBinaryWriter.Write(this.ShieldRechargeTime);
            queueableBlamBinaryWriter.Write(this.StunThreshold);
            queueableBlamBinaryWriter.Write(this.StunTimeBounds);
            queueableBlamBinaryWriter.Write(this.ExtendedShieldDamageThreshold);
            queueableBlamBinaryWriter.Write(this.ExtendedBodyDamageThreshold);
            queueableBlamBinaryWriter.Write(this.SuicideRadius);
            queueableBlamBinaryWriter.Write(this.fieldskip);
        }
        [System.FlagsAttribute()]
        public enum VitalityFlags : int
        {
            None = 0,
            Unused = 1,
        }
    }
}
