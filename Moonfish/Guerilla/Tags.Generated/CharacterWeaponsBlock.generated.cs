//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("character_weapons_block")]
    public partial class CharacterWeaponsBlock : GuerillaBlock, IWriteDeferrable
    {
        public WeaponsFlags CharacterWeaponsWeaponsFlags;
        [Moonfish.Tags.TagReferenceAttribute("weap")]
        public Moonfish.Tags.TagReference Weapon;
        public float MaximumFiringRange;
        public float MinimumFiringRange;
        public Moonfish.Model.Range NormalCombatRange;
        public float BombardmentRange;
        public float MaxSpecialTargetDistance;
        public Moonfish.Model.Range TimidCombatRange;
        public Moonfish.Model.Range AggressiveCombatRange;
        public float SuperballisticRange;
        public Moonfish.Model.Range BallisticFiringBounds;
        public Moonfish.Model.Range BallisticFractionBounds;
        public Moonfish.Model.Range FirstBurstDelayTime;
        public float SurpriseDelayTime;
        public float SurpriseFirewildlyTime;
        public float DeathFirewildlyChance;
        public float DeathFirewildlyTime;
        public OpenTK.Vector3 CustomStandGunOffset;
        public OpenTK.Vector3 CustomCrouchGunOffset;
        public SpecialfireModeEnum SpecialfireMode;
        public SpecialfireSituationEnum SpecialfireSituation;
        public float SpecialfireChance;
        public float SpecialfireDelay;
        public float SpecialDamageModifier;
        public float SpecialProjectileError;
        public Moonfish.Model.Range DropWeaponLoaded;
        public int DropWeaponAmmo;
        /// <summary>
        /// Parameters control how accuracy changes over the duration of a series of bursts
        ///Accuracy is an analog value between 0 and 1. At zero, the parameters of the first
        ///firing-pattern block is used. At 1, the parameters in the second block is used. In
        ///between, all the values are linearly interpolated
        /// </summary>
        public Moonfish.Model.Range NormalAccuracyBounds;
        public float NormalAccuracyTime;
        public Moonfish.Model.Range HeroicAccuracyBounds;
        public float HeroicAccuracyTime;
        public Moonfish.Model.Range LegendaryAccuracyBounds;
        public float LegendaryAccuracyTime;
        public CharacterFiringPatternBlock[] FiringPatterns = new CharacterFiringPatternBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference WeaponMeleeDamage;
        public override int SerializedSize
        {
            get
            {
                return 204;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.CharacterWeaponsWeaponsFlags = ((WeaponsFlags)(binaryReader.ReadInt32()));
            this.Weapon = binaryReader.ReadTagReference();
            this.MaximumFiringRange = binaryReader.ReadSingle();
            this.MinimumFiringRange = binaryReader.ReadSingle();
            this.NormalCombatRange = binaryReader.ReadRange();
            this.BombardmentRange = binaryReader.ReadSingle();
            this.MaxSpecialTargetDistance = binaryReader.ReadSingle();
            this.TimidCombatRange = binaryReader.ReadRange();
            this.AggressiveCombatRange = binaryReader.ReadRange();
            this.SuperballisticRange = binaryReader.ReadSingle();
            this.BallisticFiringBounds = binaryReader.ReadRange();
            this.BallisticFractionBounds = binaryReader.ReadRange();
            this.FirstBurstDelayTime = binaryReader.ReadRange();
            this.SurpriseDelayTime = binaryReader.ReadSingle();
            this.SurpriseFirewildlyTime = binaryReader.ReadSingle();
            this.DeathFirewildlyChance = binaryReader.ReadSingle();
            this.DeathFirewildlyTime = binaryReader.ReadSingle();
            this.CustomStandGunOffset = binaryReader.ReadVector3();
            this.CustomCrouchGunOffset = binaryReader.ReadVector3();
            this.SpecialfireMode = ((SpecialfireModeEnum)(binaryReader.ReadInt16()));
            this.SpecialfireSituation = ((SpecialfireSituationEnum)(binaryReader.ReadInt16()));
            this.SpecialfireChance = binaryReader.ReadSingle();
            this.SpecialfireDelay = binaryReader.ReadSingle();
            this.SpecialDamageModifier = binaryReader.ReadSingle();
            this.SpecialProjectileError = binaryReader.ReadSingle();
            this.DropWeaponLoaded = binaryReader.ReadRange();
            this.DropWeaponAmmo = binaryReader.ReadInt32();
            this.NormalAccuracyBounds = binaryReader.ReadRange();
            this.NormalAccuracyTime = binaryReader.ReadSingle();
            this.HeroicAccuracyBounds = binaryReader.ReadRange();
            this.HeroicAccuracyTime = binaryReader.ReadSingle();
            this.LegendaryAccuracyBounds = binaryReader.ReadRange();
            this.LegendaryAccuracyTime = binaryReader.ReadSingle();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(64));
            this.WeaponMeleeDamage = binaryReader.ReadTagReference();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.FiringPatterns = base.ReadBlockArrayData<CharacterFiringPatternBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.FiringPatterns);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((int)(this.CharacterWeaponsWeaponsFlags)));
            writer.Write(this.Weapon);
            writer.Write(this.MaximumFiringRange);
            writer.Write(this.MinimumFiringRange);
            writer.Write(this.NormalCombatRange);
            writer.Write(this.BombardmentRange);
            writer.Write(this.MaxSpecialTargetDistance);
            writer.Write(this.TimidCombatRange);
            writer.Write(this.AggressiveCombatRange);
            writer.Write(this.SuperballisticRange);
            writer.Write(this.BallisticFiringBounds);
            writer.Write(this.BallisticFractionBounds);
            writer.Write(this.FirstBurstDelayTime);
            writer.Write(this.SurpriseDelayTime);
            writer.Write(this.SurpriseFirewildlyTime);
            writer.Write(this.DeathFirewildlyChance);
            writer.Write(this.DeathFirewildlyTime);
            writer.Write(this.CustomStandGunOffset);
            writer.Write(this.CustomCrouchGunOffset);
            writer.Write(((short)(this.SpecialfireMode)));
            writer.Write(((short)(this.SpecialfireSituation)));
            writer.Write(this.SpecialfireChance);
            writer.Write(this.SpecialfireDelay);
            writer.Write(this.SpecialDamageModifier);
            writer.Write(this.SpecialProjectileError);
            writer.Write(this.DropWeaponLoaded);
            writer.Write(this.DropWeaponAmmo);
            writer.Write(this.NormalAccuracyBounds);
            writer.Write(this.NormalAccuracyTime);
            writer.Write(this.HeroicAccuracyBounds);
            writer.Write(this.HeroicAccuracyTime);
            writer.Write(this.LegendaryAccuracyBounds);
            writer.Write(this.LegendaryAccuracyTime);
            writer.WritePointer(this.FiringPatterns);
            writer.Write(this.WeaponMeleeDamage);
        }
        [System.FlagsAttribute()]
        public enum WeaponsFlags : int
        {
            None = 0,
            BurstingInhibitsMovement = 1,
            MustCrouchToShoot = 2,
            UseExtendedSafetosaveRange = 4,
        }
        public enum SpecialfireModeEnum : short
        {
            None = 0,
            Overcharge = 1,
            SecondaryTrigger = 2,
        }
        public enum SpecialfireSituationEnum : short
        {
            Never = 0,
            EnemyVisible = 1,
            EnemyOutOfSight = 2,
            Strafing = 3,
        }
    }
}
