//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class ClothPropertiesBlock : GuerillaBlock, IWriteQueueable
    {
        public IntegrationTypeEnum IntegrationType;
        public short NumberIterations;
        public float Weight;
        public float Drag;
        public float WindScale;
        public float WindFlappinessScale;
        public float LongestRod;
        private byte[] fieldpad = new byte[24];
        public override int SerializedSize
        {
            get
            {
                return 48;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.IntegrationType = ((IntegrationTypeEnum)(binaryReader.ReadInt16()));
            this.NumberIterations = binaryReader.ReadInt16();
            this.Weight = binaryReader.ReadSingle();
            this.Drag = binaryReader.ReadSingle();
            this.WindScale = binaryReader.ReadSingle();
            this.WindFlappinessScale = binaryReader.ReadSingle();
            this.LongestRod = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(24);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((short)(this.IntegrationType)));
            queueableBlamBinaryWriter.Write(this.NumberIterations);
            queueableBlamBinaryWriter.Write(this.Weight);
            queueableBlamBinaryWriter.Write(this.Drag);
            queueableBlamBinaryWriter.Write(this.WindScale);
            queueableBlamBinaryWriter.Write(this.WindFlappinessScale);
            queueableBlamBinaryWriter.Write(this.LongestRod);
            queueableBlamBinaryWriter.Write(this.fieldpad);
        }
        public enum IntegrationTypeEnum : short
        {
            Verlet = 0,
        }
    }
}
