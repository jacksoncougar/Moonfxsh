//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("collision_bsp_physics_block")]
    public partial class CollisionBspPhysicsBlock : GuerillaBlock, IWriteQueueable
    {
        private byte[] fieldskip = new byte[4];
        public short Size;
        public short Count;
        private byte[] fieldskip0 = new byte[4];
        private byte[] fieldpad = new byte[4];
        private byte[] fieldskip1 = new byte[32];
        private byte[] fieldpad0 = new byte[16];
        private byte[] fieldskip2 = new byte[4];
        public short Size0;
        public short Count0;
        private byte[] fieldskip3 = new byte[4];
        private byte[] fieldpad1 = new byte[4];
        private byte[] fieldskip4 = new byte[4];
        public short Size1;
        public short Count1;
        private byte[] fieldskip5 = new byte[4];
        private byte[] fieldpad2 = new byte[8];
        public byte[] MoppCodeData;
        private byte[] padding = new byte[4];
        public override int SerializedSize
        {
            get
            {
                return 112;
            }
        }
        public override int Alignment
        {
            get
            {
                return 16;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.fieldskip = binaryReader.ReadBytes(4);
            this.Size = binaryReader.ReadInt16();
            this.Count = binaryReader.ReadInt16();
            this.fieldskip0 = binaryReader.ReadBytes(4);
            this.fieldpad = binaryReader.ReadBytes(4);
            this.fieldskip1 = binaryReader.ReadBytes(32);
            this.fieldpad0 = binaryReader.ReadBytes(16);
            this.fieldskip2 = binaryReader.ReadBytes(4);
            this.Size0 = binaryReader.ReadInt16();
            this.Count0 = binaryReader.ReadInt16();
            this.fieldskip3 = binaryReader.ReadBytes(4);
            this.fieldpad1 = binaryReader.ReadBytes(4);
            this.fieldskip4 = binaryReader.ReadBytes(4);
            this.Size1 = binaryReader.ReadInt16();
            this.Count1 = binaryReader.ReadInt16();
            this.fieldskip5 = binaryReader.ReadBytes(4);
            this.fieldpad2 = binaryReader.ReadBytes(8);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            this.padding = binaryReader.ReadBytes(4);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.MoppCodeData = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.MoppCodeData);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.fieldskip);
            queueableBinaryWriter.Write(this.Size);
            queueableBinaryWriter.Write(this.Count);
            queueableBinaryWriter.Write(this.fieldskip0);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.fieldskip1);
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.fieldskip2);
            queueableBinaryWriter.Write(this.Size0);
            queueableBinaryWriter.Write(this.Count0);
            queueableBinaryWriter.Write(this.fieldskip3);
            queueableBinaryWriter.Write(this.fieldpad1);
            queueableBinaryWriter.Write(this.fieldskip4);
            queueableBinaryWriter.Write(this.Size1);
            queueableBinaryWriter.Write(this.Count1);
            queueableBinaryWriter.Write(this.fieldskip5);
            queueableBinaryWriter.Write(this.fieldpad2);
            queueableBinaryWriter.WritePointer(this.MoppCodeData);
            queueableBinaryWriter.Write(this.padding);
        }
    }
}
