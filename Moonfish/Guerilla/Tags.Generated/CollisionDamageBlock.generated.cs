//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("collision_damage_block")]
    public partial class CollisionDamageBlock : GuerillaBlock, IWriteDeferrable
    {
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference CollisionDamage;
        public float MinGameAcc;
        public float MaxGameAcc;
        public float MinGameScale;
        public float MaxGameScale;
        public float MinAbsAcc;
        public float MaxAbsAcc;
        public float MinAbsScale;
        public float MaxAbsScale;
        private byte[] fieldpad = new byte[32];
        public override int SerializedSize
        {
            get
            {
                return 72;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.CollisionDamage = binaryReader.ReadTagReference();
            this.MinGameAcc = binaryReader.ReadSingle();
            this.MaxGameAcc = binaryReader.ReadSingle();
            this.MinGameScale = binaryReader.ReadSingle();
            this.MaxGameScale = binaryReader.ReadSingle();
            this.MinAbsAcc = binaryReader.ReadSingle();
            this.MaxAbsAcc = binaryReader.ReadSingle();
            this.MinAbsScale = binaryReader.ReadSingle();
            this.MaxAbsScale = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(32);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.CollisionDamage);
            writer.Write(this.MinGameAcc);
            writer.Write(this.MaxGameAcc);
            writer.Write(this.MinGameScale);
            writer.Write(this.MaxGameScale);
            writer.Write(this.MinAbsAcc);
            writer.Write(this.MaxAbsAcc);
            writer.Write(this.MinAbsScale);
            writer.Write(this.MaxAbsScale);
            writer.Write(this.fieldpad);
        }
    }
}
