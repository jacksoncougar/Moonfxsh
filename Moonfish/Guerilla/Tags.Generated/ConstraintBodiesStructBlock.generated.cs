//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("constraint_bodies_struct_block")]
    public partial class ConstraintBodiesStructBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.StringIdent Name;
        public Moonfish.Tags.ShortBlockIndex1 NodeA;
        public Moonfish.Tags.ShortBlockIndex1 NodeB;
        public float AScale;
        public OpenTK.Vector3 AForward;
        public OpenTK.Vector3 ALeft;
        public OpenTK.Vector3 AUp;
        public OpenTK.Vector3 APosition;
        public float BScale;
        public OpenTK.Vector3 BForward;
        public OpenTK.Vector3 BLeft;
        public OpenTK.Vector3 BUp;
        public OpenTK.Vector3 BPosition;
        public Moonfish.Tags.ShortBlockIndex1 EdgeIndex;
        private byte[] fieldpad = new byte[2];
        public override int SerializedSize
        {
            get
            {
                return 116;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadStringIdent();
            this.NodeA = binaryReader.ReadShortBlockIndex1();
            this.NodeB = binaryReader.ReadShortBlockIndex1();
            this.AScale = binaryReader.ReadSingle();
            this.AForward = binaryReader.ReadVector3();
            this.ALeft = binaryReader.ReadVector3();
            this.AUp = binaryReader.ReadVector3();
            this.APosition = binaryReader.ReadVector3();
            this.BScale = binaryReader.ReadSingle();
            this.BForward = binaryReader.ReadVector3();
            this.BLeft = binaryReader.ReadVector3();
            this.BUp = binaryReader.ReadVector3();
            this.BPosition = binaryReader.ReadVector3();
            this.EdgeIndex = binaryReader.ReadShortBlockIndex1();
            this.fieldpad = binaryReader.ReadBytes(2);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Name);
            writer.Write(this.NodeA);
            writer.Write(this.NodeB);
            writer.Write(this.AScale);
            writer.Write(this.AForward);
            writer.Write(this.ALeft);
            writer.Write(this.AUp);
            writer.Write(this.APosition);
            writer.Write(this.BScale);
            writer.Write(this.BForward);
            writer.Write(this.BLeft);
            writer.Write(this.BUp);
            writer.Write(this.BPosition);
            writer.Write(this.EdgeIndex);
            writer.Write(this.fieldpad);
        }
    }
}
