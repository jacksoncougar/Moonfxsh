//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("cs_point_set_block")]
    public partial class CsPointSetBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.String32 Name;
        public CsPointBlock[] Points = new CsPointBlock[0];
        public Moonfish.Tags.ShortBlockIndex1 BspIndex;
        public short ManualReferenceFrame;
        public Flags CsPointSetFlags;
        public override int SerializedSize
        {
            get
            {
                return 48;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadString32();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(60));
            this.BspIndex = binaryReader.ReadShortBlockIndex1();
            this.ManualReferenceFrame = binaryReader.ReadInt16();
            this.CsPointSetFlags = ((Flags)(binaryReader.ReadInt32()));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Points = base.ReadBlockArrayData<CsPointBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.Points);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.Name);
            queueableBinaryWriter.WritePointer(this.Points);
            queueableBinaryWriter.Write(this.BspIndex);
            queueableBinaryWriter.Write(this.ManualReferenceFrame);
            queueableBinaryWriter.Write(((int)(this.CsPointSetFlags)));
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            ManualReferenceFrame = 1,
            TurretDeployment = 2,
        }
    }
}
