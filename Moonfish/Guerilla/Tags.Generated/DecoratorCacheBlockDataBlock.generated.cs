//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("decorator_cache_block_data_block")]
    public partial class DecoratorCacheBlockDataBlock : GuerillaBlock, IWriteDeferrable
    {
        public DecoratorPlacementBlock[] Placements = new DecoratorPlacementBlock[0];
        public DecalVerticesBlock[] DecalVertices = new DecalVerticesBlock[0];
        public IndicesBlock[] DecalIndices = new IndicesBlock[0];
        public Moonfish.Tags.VertexBuffer DecalVertexBuffer;
        private byte[] fieldpad = new byte[16];
        public SpriteVerticesBlock[] SpriteVertices = new SpriteVerticesBlock[0];
        public IndicesBlock[] SpriteIndices = new IndicesBlock[0];
        public Moonfish.Tags.VertexBuffer SpriteVertexBuffer;
        private byte[] fieldpad0 = new byte[16];
        public override int SerializedSize
        {
            get
            {
                return 136;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(2));
            this.DecalVertexBuffer = binaryReader.ReadVertexBuffer();
            this.fieldpad = binaryReader.ReadBytes(16);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(48));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(2));
            this.SpriteVertexBuffer = binaryReader.ReadVertexBuffer();
            this.fieldpad0 = binaryReader.ReadBytes(16);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Placements = base.ReadBlockArrayData<DecoratorPlacementBlock>(binaryReader, pointerQueue.Dequeue());
            this.DecalVertices = base.ReadBlockArrayData<DecalVerticesBlock>(binaryReader, pointerQueue.Dequeue());
            this.DecalIndices = base.ReadBlockArrayData<IndicesBlock>(binaryReader, pointerQueue.Dequeue());
            this.SpriteVertices = base.ReadBlockArrayData<SpriteVerticesBlock>(binaryReader, pointerQueue.Dequeue());
            this.SpriteIndices = base.ReadBlockArrayData<IndicesBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Placements);
            writer.Defer(this.DecalVertices);
            writer.Defer(this.DecalIndices);
            writer.Defer(this.DecalVertexBuffer);
            writer.Defer(this.SpriteVertices);
            writer.Defer(this.SpriteIndices);
            writer.Defer(this.SpriteVertexBuffer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.WritePointer(this.Placements);
            writer.WritePointer(this.DecalVertices);
            writer.WritePointer(this.DecalIndices);
            writer.Write(this.DecalVertexBuffer);
            writer.Write(this.fieldpad);
            writer.WritePointer(this.SpriteVertices);
            writer.WritePointer(this.SpriteIndices);
            writer.Write(this.SpriteVertexBuffer);
            writer.Write(this.fieldpad0);
        }
    }
}
