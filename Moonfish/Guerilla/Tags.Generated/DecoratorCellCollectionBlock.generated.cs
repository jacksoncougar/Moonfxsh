//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("decorator_cell_collection_block")]
    public partial class DecoratorCellCollectionBlock : GuerillaBlock, IWriteDeferrable
    {
        public ChildIndicesBlock[] ChildIndices00 = new ChildIndicesBlock[8];
        public Moonfish.Tags.ShortBlockIndex1 CacheBlockIndex;
        public short GroupCount;
        public int GroupStartIndex;
        public override int SerializedSize
        {
            get
            {
                return 24;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            int i;
            for (i = 0; (i < 8); i = (i + 1))
            {
                this.ChildIndices00[i] = new ChildIndicesBlock();
                pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.ChildIndices00[i].ReadFields(binaryReader)));
            }
            this.CacheBlockIndex = binaryReader.ReadShortBlockIndex1();
            this.GroupCount = binaryReader.ReadInt16();
            this.GroupStartIndex = binaryReader.ReadInt32();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            int i;
            for (i = 0; (i < 8); i = (i + 1))
            {
                this.ChildIndices00[i].ReadInstances(binaryReader, pointerQueue);
            }
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            int i;
            for (i = 0; (i < 8); i = (i + 1))
            {
                this.ChildIndices00[i].DeferReferences(writer);
            }
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            int i;
            for (i = 0; (i < 8); i = (i + 1))
            {
                this.ChildIndices00[i].Write(writer);
            }
            writer.Write(this.CacheBlockIndex);
            writer.Write(this.GroupCount);
            writer.Write(this.GroupStartIndex);
        }
        [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
        public class ChildIndicesBlock : GuerillaBlock, IWriteDeferrable
        {
            public short ChildIndex;
            public override int SerializedSize
            {
                get
                {
                    return 2;
                }
            }
            public override int Alignment
            {
                get
                {
                    return 1;
                }
            }
            public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
            {
                System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
                this.ChildIndex = binaryReader.ReadInt16();
                return pointerQueue;
            }
            public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
            {
                base.ReadInstances(binaryReader, pointerQueue);
            }
            public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
            {
                base.DeferReferences(writer);
            }
            public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
            {
                base.Write(writer);
                writer.Write(this.ChildIndex);
            }
        }
    }
}
