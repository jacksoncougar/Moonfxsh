//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("decorator_group_block")]
    public partial class DecoratorGroupBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.ByteBlockIndex1 DecoratorSet;
        public DecoratorTypeEnum DecoratorType;
        public byte ShaderIndex;
        public byte CompressedRadius;
        public short Cluster;
        public Moonfish.Tags.ShortBlockIndex1 CacheBlock;
        public short DecoratorStartIndex;
        public short DecoratorCount;
        public short VertexStartOffset;
        public short VertexCount;
        public short IndexStartOffset;
        public short IndexCount;
        public int CompressedBoundingCenter;
        public override int SerializedSize
        {
            get
            {
                return 24;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.DecoratorSet = binaryReader.ReadByteBlockIndex1();
            this.DecoratorType = ((DecoratorTypeEnum)(binaryReader.ReadByte()));
            this.ShaderIndex = binaryReader.ReadByte();
            this.CompressedRadius = binaryReader.ReadByte();
            this.Cluster = binaryReader.ReadInt16();
            this.CacheBlock = binaryReader.ReadShortBlockIndex1();
            this.DecoratorStartIndex = binaryReader.ReadInt16();
            this.DecoratorCount = binaryReader.ReadInt16();
            this.VertexStartOffset = binaryReader.ReadInt16();
            this.VertexCount = binaryReader.ReadInt16();
            this.IndexStartOffset = binaryReader.ReadInt16();
            this.IndexCount = binaryReader.ReadInt16();
            this.CompressedBoundingCenter = binaryReader.ReadInt32();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.DecoratorSet);
            queueableBinaryWriter.Write(((byte)(this.DecoratorType)));
            queueableBinaryWriter.Write(this.ShaderIndex);
            queueableBinaryWriter.Write(this.CompressedRadius);
            queueableBinaryWriter.Write(this.Cluster);
            queueableBinaryWriter.Write(this.CacheBlock);
            queueableBinaryWriter.Write(this.DecoratorStartIndex);
            queueableBinaryWriter.Write(this.DecoratorCount);
            queueableBinaryWriter.Write(this.VertexStartOffset);
            queueableBinaryWriter.Write(this.VertexCount);
            queueableBinaryWriter.Write(this.IndexStartOffset);
            queueableBinaryWriter.Write(this.IndexCount);
            queueableBinaryWriter.Write(this.CompressedBoundingCenter);
        }
        public enum DecoratorTypeEnum : byte
        {
            Model = 0,
            FloatingDecal = 1,
            ProjectedDecal = 2,
            ScreenFacingQuad = 3,
            AxisRotatingQuad = 4,
            CrossQuad = 5,
        }
    }
}
