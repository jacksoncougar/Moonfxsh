//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class DecoratorPermutationsBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.StringIdent Name;
        public Moonfish.Tags.ByteBlockIndex1 Shader;
        private byte[] fieldpad = new byte[3];
        public Flags DecoratorPermutationsFlags;
        public FadeDistanceEnum FadeDistance;
        public byte Index;
        public byte DistributionWeight;
        public Moonfish.Model.Range Scale;
        public Moonfish.Tags.ColourR1G1B1 Tint1;
        private byte[] fieldpad0 = new byte[1];
        public Moonfish.Tags.ColourR1G1B1 Tint2;
        private byte[] fieldpad1 = new byte[1];
        public float BaseMapTintPercentage;
        public float LightmapTintPercentage;
        public float WindScale;
        public override int SerializedSize
        {
            get
            {
                return 40;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadStringIdent();
            this.Shader = binaryReader.ReadByteBlockIndex1();
            this.fieldpad = binaryReader.ReadBytes(3);
            this.DecoratorPermutationsFlags = ((Flags)(binaryReader.ReadByte()));
            this.FadeDistance = ((FadeDistanceEnum)(binaryReader.ReadByte()));
            this.Index = binaryReader.ReadByte();
            this.DistributionWeight = binaryReader.ReadByte();
            this.Scale = binaryReader.ReadRange();
            this.Tint1 = binaryReader.ReadColourR1G1B1();
            this.fieldpad0 = binaryReader.ReadBytes(1);
            this.Tint2 = binaryReader.ReadColourR1G1B1();
            this.fieldpad1 = binaryReader.ReadBytes(1);
            this.BaseMapTintPercentage = binaryReader.ReadSingle();
            this.LightmapTintPercentage = binaryReader.ReadSingle();
            this.WindScale = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.Name);
            queueableBlamBinaryWriter.Write(this.Shader);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(((byte)(this.DecoratorPermutationsFlags)));
            queueableBlamBinaryWriter.Write(((byte)(this.FadeDistance)));
            queueableBlamBinaryWriter.Write(this.Index);
            queueableBlamBinaryWriter.Write(this.DistributionWeight);
            queueableBlamBinaryWriter.Write(this.Scale);
            queueableBlamBinaryWriter.Write(this.Tint1);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.Tint2);
            queueableBlamBinaryWriter.Write(this.fieldpad1);
            queueableBlamBinaryWriter.Write(this.BaseMapTintPercentage);
            queueableBlamBinaryWriter.Write(this.LightmapTintPercentage);
            queueableBlamBinaryWriter.Write(this.WindScale);
        }
        [System.FlagsAttribute()]
        public enum Flags : byte
        {
            None = 0,
            AlignToNormal = 1,
            OnlyOnGround = 2,
            Upright = 4,
        }
        public enum FadeDistanceEnum : byte
        {
            Close = 0,
            Medium = 1,
            Far = 2,
        }
    }
}
