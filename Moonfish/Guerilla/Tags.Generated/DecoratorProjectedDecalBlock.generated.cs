//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("decorator_projected_decal_block")]
    public partial class DecoratorProjectedDecalBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.ByteBlockIndex1 DecoratorSet;
        public byte DecoratorClass;
        public byte DecoratorPermutation;
        public byte SpriteIndex;
        public OpenTK.Vector3 Position;
        public OpenTK.Vector3 Left;
        public OpenTK.Vector3 Up;
        public OpenTK.Vector3 Extents;
        public OpenTK.Vector3 PreviousPosition;
        public override int SerializedSize
        {
            get
            {
                return 64;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.DecoratorSet = binaryReader.ReadByteBlockIndex1();
            this.DecoratorClass = binaryReader.ReadByte();
            this.DecoratorPermutation = binaryReader.ReadByte();
            this.SpriteIndex = binaryReader.ReadByte();
            this.Position = binaryReader.ReadVector3();
            this.Left = binaryReader.ReadVector3();
            this.Up = binaryReader.ReadVector3();
            this.Extents = binaryReader.ReadVector3();
            this.PreviousPosition = binaryReader.ReadVector3();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.DecoratorSet);
            writer.Write(this.DecoratorClass);
            writer.Write(this.DecoratorPermutation);
            writer.Write(this.SpriteIndex);
            writer.Write(this.Position);
            writer.Write(this.Left);
            writer.Write(this.Up);
            writer.Write(this.Extents);
            writer.Write(this.PreviousPosition);
        }
    }
}
