//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("devi")]
    public partial class DeviceBlock : ObjectBlock, IWriteQueueable
    {
        public DeviceFlags DeviceDeviceFlags;
        public float PowerTransitionTime;
        public float PowerAccelerationTime;
        public float PositionTransitionTime;
        public float PositionAccelerationTime;
        public float DepoweredPositionTransitionTime;
        public float DepoweredPositionAccelerationTime;
        public LightmapFlags DeviceLightmapFlags;
        private byte[] fieldpad3 = new byte[2];
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference Open;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference Close;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference Opened;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference Closed;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference Depowered;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference Repowered;
        public float DelayTime;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference DelayEffect;
        public float AutomaticActivationRadius;
        public override int SerializedSize
        {
            get
            {
                return 284;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.DeviceDeviceFlags = ((DeviceFlags)(binaryReader.ReadInt32()));
            this.PowerTransitionTime = binaryReader.ReadSingle();
            this.PowerAccelerationTime = binaryReader.ReadSingle();
            this.PositionTransitionTime = binaryReader.ReadSingle();
            this.PositionAccelerationTime = binaryReader.ReadSingle();
            this.DepoweredPositionTransitionTime = binaryReader.ReadSingle();
            this.DepoweredPositionAccelerationTime = binaryReader.ReadSingle();
            this.DeviceLightmapFlags = ((LightmapFlags)(binaryReader.ReadInt16()));
            this.fieldpad3 = binaryReader.ReadBytes(2);
            this.Open = binaryReader.ReadTagReference();
            this.Close = binaryReader.ReadTagReference();
            this.Opened = binaryReader.ReadTagReference();
            this.Closed = binaryReader.ReadTagReference();
            this.Depowered = binaryReader.ReadTagReference();
            this.Repowered = binaryReader.ReadTagReference();
            this.DelayTime = binaryReader.ReadSingle();
            this.DelayEffect = binaryReader.ReadTagReference();
            this.AutomaticActivationRadius = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((int)(this.DeviceDeviceFlags)));
            queueableBlamBinaryWriter.Write(this.PowerTransitionTime);
            queueableBlamBinaryWriter.Write(this.PowerAccelerationTime);
            queueableBlamBinaryWriter.Write(this.PositionTransitionTime);
            queueableBlamBinaryWriter.Write(this.PositionAccelerationTime);
            queueableBlamBinaryWriter.Write(this.DepoweredPositionTransitionTime);
            queueableBlamBinaryWriter.Write(this.DepoweredPositionAccelerationTime);
            queueableBlamBinaryWriter.Write(((short)(this.DeviceLightmapFlags)));
            queueableBlamBinaryWriter.Write(this.fieldpad3);
            queueableBlamBinaryWriter.Write(this.Open);
            queueableBlamBinaryWriter.Write(this.Close);
            queueableBlamBinaryWriter.Write(this.Opened);
            queueableBlamBinaryWriter.Write(this.Closed);
            queueableBlamBinaryWriter.Write(this.Depowered);
            queueableBlamBinaryWriter.Write(this.Repowered);
            queueableBlamBinaryWriter.Write(this.DelayTime);
            queueableBlamBinaryWriter.Write(this.DelayEffect);
            queueableBlamBinaryWriter.Write(this.AutomaticActivationRadius);
        }
        [System.FlagsAttribute()]
        public enum DeviceFlags : int
        {
            None = 0,
            PositionLoops = 1,
            unused = 2,
            AllowInterpolation = 4,
        }
        [System.FlagsAttribute()]
        public enum LightmapFlags : short
        {
            None = 0,
            DontUseInLightmap = 1,
            DontUseInLightprobe = 2,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Devi = ((TagClass)("devi"));
    }
}
