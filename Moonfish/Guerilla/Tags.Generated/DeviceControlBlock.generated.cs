//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("ctrl")]
    [TagBlockOriginalNameAttribute("device_control_block")]
    public partial class DeviceControlBlock : DeviceBlock, IWriteDeferrable
    {
        public TypeEnum Type;
        public TriggersWhenEnum TriggersWhen;
        public float CallValue;
        public Moonfish.Tags.StringIdent ActionString;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference On;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference Off;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference Deny;
        public override int SerializedSize
        {
            get
            {
                return 320;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Type = ((TypeEnum)(binaryReader.ReadInt16()));
            this.TriggersWhen = ((TriggersWhenEnum)(binaryReader.ReadInt16()));
            this.CallValue = binaryReader.ReadSingle();
            this.ActionString = binaryReader.ReadStringIdent();
            this.On = binaryReader.ReadTagReference();
            this.Off = binaryReader.ReadTagReference();
            this.Deny = binaryReader.ReadTagReference();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((short)(this.Type)));
            writer.Write(((short)(this.TriggersWhen)));
            writer.Write(this.CallValue);
            writer.Write(this.ActionString);
            writer.Write(this.On);
            writer.Write(this.Off);
            writer.Write(this.Deny);
        }
        public enum TypeEnum : short
        {
            ToggleSwitch = 0,
            OnButton = 1,
            OffButton = 2,
            CallButton = 3,
        }
        public enum TriggersWhenEnum : short
        {
            TouchedByPlayer = 0,
            Destroyed = 1,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Ctrl = ((TagClass)("ctrl"));
    }
}
