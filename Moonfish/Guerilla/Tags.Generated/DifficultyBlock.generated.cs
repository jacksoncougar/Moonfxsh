//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class DifficultyBlock : GuerillaBlock, IWriteQueueable
    {
        /// <summary>
        /// scale values for enemy health and damage settings
        /// </summary>
        public float EasyEnemyDamage;
        public float NormalEnemyDamage;
        public float HardEnemyDamage;
        public float ImpossEnemyDamage;
        public float EasyEnemyVitality;
        public float NormalEnemyVitality;
        public float HardEnemyVitality;
        public float ImpossEnemyVitality;
        public float EasyEnemyShield;
        public float NormalEnemyShield;
        public float HardEnemyShield;
        public float ImpossEnemyShield;
        public float EasyEnemyRecharge;
        public float NormalEnemyRecharge;
        public float HardEnemyRecharge;
        public float ImpossEnemyRecharge;
        public float EasyFriendDamage;
        public float NormalFriendDamage;
        public float HardFriendDamage;
        public float ImpossFriendDamage;
        public float EasyFriendVitality;
        public float NormalFriendVitality;
        public float HardFriendVitality;
        public float ImpossFriendVitality;
        public float EasyFriendShield;
        public float NormalFriendShield;
        public float HardFriendShield;
        public float ImpossFriendShield;
        public float EasyFriendRecharge;
        public float NormalFriendRecharge;
        public float HardFriendRecharge;
        public float ImpossFriendRecharge;
        public float EasyInfectionForms;
        public float NormalInfectionForms;
        public float HardInfectionForms;
        public float ImpossInfectionForms;
        private byte[] fieldpad = new byte[16];
        /// <summary>
        /// difficulty-affecting values for enemy ranged combat settings
        /// </summary>
        public float EasyRateOfFire;
        public float NormalRateOfFire;
        public float HardRateOfFire;
        public float ImpossRateOfFire;
        public float EasyProjectileError;
        public float NormalProjectileError;
        public float HardProjectileError;
        public float ImpossProjectileError;
        public float EasyBurstError;
        public float NormalBurstError;
        public float HardBurstError;
        public float ImpossBurstError;
        public float EasyNewTargetDelay;
        public float NormalNewTargetDelay;
        public float HardNewTargetDelay;
        public float ImpossNewTargetDelay;
        public float EasyBurstSeparation;
        public float NormalBurstSeparation;
        public float HardBurstSeparation;
        public float ImpossBurstSeparation;
        public float EasyTargetTracking;
        public float NormalTargetTracking;
        public float HardTargetTracking;
        public float ImpossTargetTracking;
        public float EasyTargetLeading;
        public float NormalTargetLeading;
        public float HardTargetLeading;
        public float ImpossTargetLeading;
        public float EasyOverchargeChance;
        public float NormalOverchargeChance;
        public float HardOverchargeChance;
        public float ImpossOverchargeChance;
        public float EasySpecialFireDelay;
        public float NormalSpecialFireDelay;
        public float HardSpecialFireDelay;
        public float ImpossSpecialFireDelay;
        public float EasyGuidanceVsPlayer;
        public float NormalGuidanceVsPlayer;
        public float HardGuidanceVsPlayer;
        public float ImpossGuidanceVsPlayer;
        public float EasyMeleeDelayBase;
        public float NormalMeleeDelayBase;
        public float HardMeleeDelayBase;
        public float ImpossMeleeDelayBase;
        public float EasyMeleeDelayScale;
        public float NormalMeleeDelayScale;
        public float HardMeleeDelayScale;
        public float ImpossMeleeDelayScale;
        private byte[] fieldpad0 = new byte[16];
        /// <summary>
        /// difficulty-affecting values for enemy grenade behavior
        /// </summary>
        public float EasyGrenadeChanceScale;
        public float NormalGrenadeChanceScale;
        public float HardGrenadeChanceScale;
        public float ImpossGrenadeChanceScale;
        public float EasyGrenadeTimerScale;
        public float NormalGrenadeTimerScale;
        public float HardGrenadeTimerScale;
        public float ImpossGrenadeTimerScale;
        private byte[] fieldpad1 = new byte[16];
        private byte[] fieldpad2 = new byte[16];
        private byte[] fieldpad3 = new byte[16];
        /// <summary>
        /// difficulty-affecting values for enemy placement
        /// </summary>
        public float EasyMajorUpgrade;
        public float NormalMajorUpgrade;
        public float HardMajorUpgrade;
        public float ImpossMajorUpgrade;
        public float EasyMajorUpgrade0;
        public float NormalMajorUpgrade0;
        public float HardMajorUpgrade0;
        public float ImpossMajorUpgrade0;
        public float EasyMajorUpgrade1;
        public float NormalMajorUpgrade1;
        public float HardMajorUpgrade1;
        public float ImpossMajorUpgrade1;
        /// <summary>
        /// difficulty-affecting values for vehicle driving/combat
        /// </summary>
        public float EasyPlayerVehicleRamChance;
        public float NormalPlayerVehicleRamChance;
        public float HardPlayerVehicleRamChance;
        public float ImpossPlayerVehicleRamChance;
        private byte[] fieldpad4 = new byte[16];
        private byte[] fieldpad5 = new byte[16];
        private byte[] fieldpad6 = new byte[16];
        private byte[] fieldpad7 = new byte[84];
        public override int SerializedSize
        {
            get
            {
                return 644;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.EasyEnemyDamage = binaryReader.ReadSingle();
            this.NormalEnemyDamage = binaryReader.ReadSingle();
            this.HardEnemyDamage = binaryReader.ReadSingle();
            this.ImpossEnemyDamage = binaryReader.ReadSingle();
            this.EasyEnemyVitality = binaryReader.ReadSingle();
            this.NormalEnemyVitality = binaryReader.ReadSingle();
            this.HardEnemyVitality = binaryReader.ReadSingle();
            this.ImpossEnemyVitality = binaryReader.ReadSingle();
            this.EasyEnemyShield = binaryReader.ReadSingle();
            this.NormalEnemyShield = binaryReader.ReadSingle();
            this.HardEnemyShield = binaryReader.ReadSingle();
            this.ImpossEnemyShield = binaryReader.ReadSingle();
            this.EasyEnemyRecharge = binaryReader.ReadSingle();
            this.NormalEnemyRecharge = binaryReader.ReadSingle();
            this.HardEnemyRecharge = binaryReader.ReadSingle();
            this.ImpossEnemyRecharge = binaryReader.ReadSingle();
            this.EasyFriendDamage = binaryReader.ReadSingle();
            this.NormalFriendDamage = binaryReader.ReadSingle();
            this.HardFriendDamage = binaryReader.ReadSingle();
            this.ImpossFriendDamage = binaryReader.ReadSingle();
            this.EasyFriendVitality = binaryReader.ReadSingle();
            this.NormalFriendVitality = binaryReader.ReadSingle();
            this.HardFriendVitality = binaryReader.ReadSingle();
            this.ImpossFriendVitality = binaryReader.ReadSingle();
            this.EasyFriendShield = binaryReader.ReadSingle();
            this.NormalFriendShield = binaryReader.ReadSingle();
            this.HardFriendShield = binaryReader.ReadSingle();
            this.ImpossFriendShield = binaryReader.ReadSingle();
            this.EasyFriendRecharge = binaryReader.ReadSingle();
            this.NormalFriendRecharge = binaryReader.ReadSingle();
            this.HardFriendRecharge = binaryReader.ReadSingle();
            this.ImpossFriendRecharge = binaryReader.ReadSingle();
            this.EasyInfectionForms = binaryReader.ReadSingle();
            this.NormalInfectionForms = binaryReader.ReadSingle();
            this.HardInfectionForms = binaryReader.ReadSingle();
            this.ImpossInfectionForms = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(16);
            this.EasyRateOfFire = binaryReader.ReadSingle();
            this.NormalRateOfFire = binaryReader.ReadSingle();
            this.HardRateOfFire = binaryReader.ReadSingle();
            this.ImpossRateOfFire = binaryReader.ReadSingle();
            this.EasyProjectileError = binaryReader.ReadSingle();
            this.NormalProjectileError = binaryReader.ReadSingle();
            this.HardProjectileError = binaryReader.ReadSingle();
            this.ImpossProjectileError = binaryReader.ReadSingle();
            this.EasyBurstError = binaryReader.ReadSingle();
            this.NormalBurstError = binaryReader.ReadSingle();
            this.HardBurstError = binaryReader.ReadSingle();
            this.ImpossBurstError = binaryReader.ReadSingle();
            this.EasyNewTargetDelay = binaryReader.ReadSingle();
            this.NormalNewTargetDelay = binaryReader.ReadSingle();
            this.HardNewTargetDelay = binaryReader.ReadSingle();
            this.ImpossNewTargetDelay = binaryReader.ReadSingle();
            this.EasyBurstSeparation = binaryReader.ReadSingle();
            this.NormalBurstSeparation = binaryReader.ReadSingle();
            this.HardBurstSeparation = binaryReader.ReadSingle();
            this.ImpossBurstSeparation = binaryReader.ReadSingle();
            this.EasyTargetTracking = binaryReader.ReadSingle();
            this.NormalTargetTracking = binaryReader.ReadSingle();
            this.HardTargetTracking = binaryReader.ReadSingle();
            this.ImpossTargetTracking = binaryReader.ReadSingle();
            this.EasyTargetLeading = binaryReader.ReadSingle();
            this.NormalTargetLeading = binaryReader.ReadSingle();
            this.HardTargetLeading = binaryReader.ReadSingle();
            this.ImpossTargetLeading = binaryReader.ReadSingle();
            this.EasyOverchargeChance = binaryReader.ReadSingle();
            this.NormalOverchargeChance = binaryReader.ReadSingle();
            this.HardOverchargeChance = binaryReader.ReadSingle();
            this.ImpossOverchargeChance = binaryReader.ReadSingle();
            this.EasySpecialFireDelay = binaryReader.ReadSingle();
            this.NormalSpecialFireDelay = binaryReader.ReadSingle();
            this.HardSpecialFireDelay = binaryReader.ReadSingle();
            this.ImpossSpecialFireDelay = binaryReader.ReadSingle();
            this.EasyGuidanceVsPlayer = binaryReader.ReadSingle();
            this.NormalGuidanceVsPlayer = binaryReader.ReadSingle();
            this.HardGuidanceVsPlayer = binaryReader.ReadSingle();
            this.ImpossGuidanceVsPlayer = binaryReader.ReadSingle();
            this.EasyMeleeDelayBase = binaryReader.ReadSingle();
            this.NormalMeleeDelayBase = binaryReader.ReadSingle();
            this.HardMeleeDelayBase = binaryReader.ReadSingle();
            this.ImpossMeleeDelayBase = binaryReader.ReadSingle();
            this.EasyMeleeDelayScale = binaryReader.ReadSingle();
            this.NormalMeleeDelayScale = binaryReader.ReadSingle();
            this.HardMeleeDelayScale = binaryReader.ReadSingle();
            this.ImpossMeleeDelayScale = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(16);
            this.EasyGrenadeChanceScale = binaryReader.ReadSingle();
            this.NormalGrenadeChanceScale = binaryReader.ReadSingle();
            this.HardGrenadeChanceScale = binaryReader.ReadSingle();
            this.ImpossGrenadeChanceScale = binaryReader.ReadSingle();
            this.EasyGrenadeTimerScale = binaryReader.ReadSingle();
            this.NormalGrenadeTimerScale = binaryReader.ReadSingle();
            this.HardGrenadeTimerScale = binaryReader.ReadSingle();
            this.ImpossGrenadeTimerScale = binaryReader.ReadSingle();
            this.fieldpad1 = binaryReader.ReadBytes(16);
            this.fieldpad2 = binaryReader.ReadBytes(16);
            this.fieldpad3 = binaryReader.ReadBytes(16);
            this.EasyMajorUpgrade = binaryReader.ReadSingle();
            this.NormalMajorUpgrade = binaryReader.ReadSingle();
            this.HardMajorUpgrade = binaryReader.ReadSingle();
            this.ImpossMajorUpgrade = binaryReader.ReadSingle();
            this.EasyMajorUpgrade0 = binaryReader.ReadSingle();
            this.NormalMajorUpgrade0 = binaryReader.ReadSingle();
            this.HardMajorUpgrade0 = binaryReader.ReadSingle();
            this.ImpossMajorUpgrade0 = binaryReader.ReadSingle();
            this.EasyMajorUpgrade1 = binaryReader.ReadSingle();
            this.NormalMajorUpgrade1 = binaryReader.ReadSingle();
            this.HardMajorUpgrade1 = binaryReader.ReadSingle();
            this.ImpossMajorUpgrade1 = binaryReader.ReadSingle();
            this.EasyPlayerVehicleRamChance = binaryReader.ReadSingle();
            this.NormalPlayerVehicleRamChance = binaryReader.ReadSingle();
            this.HardPlayerVehicleRamChance = binaryReader.ReadSingle();
            this.ImpossPlayerVehicleRamChance = binaryReader.ReadSingle();
            this.fieldpad4 = binaryReader.ReadBytes(16);
            this.fieldpad5 = binaryReader.ReadBytes(16);
            this.fieldpad6 = binaryReader.ReadBytes(16);
            this.fieldpad7 = binaryReader.ReadBytes(84);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.EasyEnemyDamage);
            queueableBlamBinaryWriter.Write(this.NormalEnemyDamage);
            queueableBlamBinaryWriter.Write(this.HardEnemyDamage);
            queueableBlamBinaryWriter.Write(this.ImpossEnemyDamage);
            queueableBlamBinaryWriter.Write(this.EasyEnemyVitality);
            queueableBlamBinaryWriter.Write(this.NormalEnemyVitality);
            queueableBlamBinaryWriter.Write(this.HardEnemyVitality);
            queueableBlamBinaryWriter.Write(this.ImpossEnemyVitality);
            queueableBlamBinaryWriter.Write(this.EasyEnemyShield);
            queueableBlamBinaryWriter.Write(this.NormalEnemyShield);
            queueableBlamBinaryWriter.Write(this.HardEnemyShield);
            queueableBlamBinaryWriter.Write(this.ImpossEnemyShield);
            queueableBlamBinaryWriter.Write(this.EasyEnemyRecharge);
            queueableBlamBinaryWriter.Write(this.NormalEnemyRecharge);
            queueableBlamBinaryWriter.Write(this.HardEnemyRecharge);
            queueableBlamBinaryWriter.Write(this.ImpossEnemyRecharge);
            queueableBlamBinaryWriter.Write(this.EasyFriendDamage);
            queueableBlamBinaryWriter.Write(this.NormalFriendDamage);
            queueableBlamBinaryWriter.Write(this.HardFriendDamage);
            queueableBlamBinaryWriter.Write(this.ImpossFriendDamage);
            queueableBlamBinaryWriter.Write(this.EasyFriendVitality);
            queueableBlamBinaryWriter.Write(this.NormalFriendVitality);
            queueableBlamBinaryWriter.Write(this.HardFriendVitality);
            queueableBlamBinaryWriter.Write(this.ImpossFriendVitality);
            queueableBlamBinaryWriter.Write(this.EasyFriendShield);
            queueableBlamBinaryWriter.Write(this.NormalFriendShield);
            queueableBlamBinaryWriter.Write(this.HardFriendShield);
            queueableBlamBinaryWriter.Write(this.ImpossFriendShield);
            queueableBlamBinaryWriter.Write(this.EasyFriendRecharge);
            queueableBlamBinaryWriter.Write(this.NormalFriendRecharge);
            queueableBlamBinaryWriter.Write(this.HardFriendRecharge);
            queueableBlamBinaryWriter.Write(this.ImpossFriendRecharge);
            queueableBlamBinaryWriter.Write(this.EasyInfectionForms);
            queueableBlamBinaryWriter.Write(this.NormalInfectionForms);
            queueableBlamBinaryWriter.Write(this.HardInfectionForms);
            queueableBlamBinaryWriter.Write(this.ImpossInfectionForms);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.EasyRateOfFire);
            queueableBlamBinaryWriter.Write(this.NormalRateOfFire);
            queueableBlamBinaryWriter.Write(this.HardRateOfFire);
            queueableBlamBinaryWriter.Write(this.ImpossRateOfFire);
            queueableBlamBinaryWriter.Write(this.EasyProjectileError);
            queueableBlamBinaryWriter.Write(this.NormalProjectileError);
            queueableBlamBinaryWriter.Write(this.HardProjectileError);
            queueableBlamBinaryWriter.Write(this.ImpossProjectileError);
            queueableBlamBinaryWriter.Write(this.EasyBurstError);
            queueableBlamBinaryWriter.Write(this.NormalBurstError);
            queueableBlamBinaryWriter.Write(this.HardBurstError);
            queueableBlamBinaryWriter.Write(this.ImpossBurstError);
            queueableBlamBinaryWriter.Write(this.EasyNewTargetDelay);
            queueableBlamBinaryWriter.Write(this.NormalNewTargetDelay);
            queueableBlamBinaryWriter.Write(this.HardNewTargetDelay);
            queueableBlamBinaryWriter.Write(this.ImpossNewTargetDelay);
            queueableBlamBinaryWriter.Write(this.EasyBurstSeparation);
            queueableBlamBinaryWriter.Write(this.NormalBurstSeparation);
            queueableBlamBinaryWriter.Write(this.HardBurstSeparation);
            queueableBlamBinaryWriter.Write(this.ImpossBurstSeparation);
            queueableBlamBinaryWriter.Write(this.EasyTargetTracking);
            queueableBlamBinaryWriter.Write(this.NormalTargetTracking);
            queueableBlamBinaryWriter.Write(this.HardTargetTracking);
            queueableBlamBinaryWriter.Write(this.ImpossTargetTracking);
            queueableBlamBinaryWriter.Write(this.EasyTargetLeading);
            queueableBlamBinaryWriter.Write(this.NormalTargetLeading);
            queueableBlamBinaryWriter.Write(this.HardTargetLeading);
            queueableBlamBinaryWriter.Write(this.ImpossTargetLeading);
            queueableBlamBinaryWriter.Write(this.EasyOverchargeChance);
            queueableBlamBinaryWriter.Write(this.NormalOverchargeChance);
            queueableBlamBinaryWriter.Write(this.HardOverchargeChance);
            queueableBlamBinaryWriter.Write(this.ImpossOverchargeChance);
            queueableBlamBinaryWriter.Write(this.EasySpecialFireDelay);
            queueableBlamBinaryWriter.Write(this.NormalSpecialFireDelay);
            queueableBlamBinaryWriter.Write(this.HardSpecialFireDelay);
            queueableBlamBinaryWriter.Write(this.ImpossSpecialFireDelay);
            queueableBlamBinaryWriter.Write(this.EasyGuidanceVsPlayer);
            queueableBlamBinaryWriter.Write(this.NormalGuidanceVsPlayer);
            queueableBlamBinaryWriter.Write(this.HardGuidanceVsPlayer);
            queueableBlamBinaryWriter.Write(this.ImpossGuidanceVsPlayer);
            queueableBlamBinaryWriter.Write(this.EasyMeleeDelayBase);
            queueableBlamBinaryWriter.Write(this.NormalMeleeDelayBase);
            queueableBlamBinaryWriter.Write(this.HardMeleeDelayBase);
            queueableBlamBinaryWriter.Write(this.ImpossMeleeDelayBase);
            queueableBlamBinaryWriter.Write(this.EasyMeleeDelayScale);
            queueableBlamBinaryWriter.Write(this.NormalMeleeDelayScale);
            queueableBlamBinaryWriter.Write(this.HardMeleeDelayScale);
            queueableBlamBinaryWriter.Write(this.ImpossMeleeDelayScale);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.EasyGrenadeChanceScale);
            queueableBlamBinaryWriter.Write(this.NormalGrenadeChanceScale);
            queueableBlamBinaryWriter.Write(this.HardGrenadeChanceScale);
            queueableBlamBinaryWriter.Write(this.ImpossGrenadeChanceScale);
            queueableBlamBinaryWriter.Write(this.EasyGrenadeTimerScale);
            queueableBlamBinaryWriter.Write(this.NormalGrenadeTimerScale);
            queueableBlamBinaryWriter.Write(this.HardGrenadeTimerScale);
            queueableBlamBinaryWriter.Write(this.ImpossGrenadeTimerScale);
            queueableBlamBinaryWriter.Write(this.fieldpad1);
            queueableBlamBinaryWriter.Write(this.fieldpad2);
            queueableBlamBinaryWriter.Write(this.fieldpad3);
            queueableBlamBinaryWriter.Write(this.EasyMajorUpgrade);
            queueableBlamBinaryWriter.Write(this.NormalMajorUpgrade);
            queueableBlamBinaryWriter.Write(this.HardMajorUpgrade);
            queueableBlamBinaryWriter.Write(this.ImpossMajorUpgrade);
            queueableBlamBinaryWriter.Write(this.EasyMajorUpgrade0);
            queueableBlamBinaryWriter.Write(this.NormalMajorUpgrade0);
            queueableBlamBinaryWriter.Write(this.HardMajorUpgrade0);
            queueableBlamBinaryWriter.Write(this.ImpossMajorUpgrade0);
            queueableBlamBinaryWriter.Write(this.EasyMajorUpgrade1);
            queueableBlamBinaryWriter.Write(this.NormalMajorUpgrade1);
            queueableBlamBinaryWriter.Write(this.HardMajorUpgrade1);
            queueableBlamBinaryWriter.Write(this.ImpossMajorUpgrade1);
            queueableBlamBinaryWriter.Write(this.EasyPlayerVehicleRamChance);
            queueableBlamBinaryWriter.Write(this.NormalPlayerVehicleRamChance);
            queueableBlamBinaryWriter.Write(this.HardPlayerVehicleRamChance);
            queueableBlamBinaryWriter.Write(this.ImpossPlayerVehicleRamChance);
            queueableBlamBinaryWriter.Write(this.fieldpad4);
            queueableBlamBinaryWriter.Write(this.fieldpad5);
            queueableBlamBinaryWriter.Write(this.fieldpad6);
            queueableBlamBinaryWriter.Write(this.fieldpad7);
        }
    }
}
