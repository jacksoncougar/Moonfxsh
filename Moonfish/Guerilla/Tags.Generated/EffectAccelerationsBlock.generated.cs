//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("effect_accelerations_block")]
    public partial class EffectAccelerationsBlock : GuerillaBlock, IWriteDeferrable
    {
        public CreateInEnum CreateIn;
        public EffectAccelerationsCreateInEnum EffectAccelerationsEffectAccelerationsCreateIn;
        public Moonfish.Tags.ShortBlockIndex1 Location;
        private byte[] fieldpad = new byte[2];
        public float Acceleration;
        public float InnerConeAngle;
        public float OuterConeAngle;
        public override int SerializedSize
        {
            get
            {
                return 20;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.CreateIn = ((CreateInEnum)(binaryReader.ReadInt16()));
            this.EffectAccelerationsEffectAccelerationsCreateIn = ((EffectAccelerationsCreateInEnum)(binaryReader.ReadInt16()));
            this.Location = binaryReader.ReadShortBlockIndex1();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.Acceleration = binaryReader.ReadSingle();
            this.InnerConeAngle = binaryReader.ReadSingle();
            this.OuterConeAngle = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((short)(this.CreateIn)));
            writer.Write(((short)(this.EffectAccelerationsEffectAccelerationsCreateIn)));
            writer.Write(this.Location);
            writer.Write(this.fieldpad);
            writer.Write(this.Acceleration);
            writer.Write(this.InnerConeAngle);
            writer.Write(this.OuterConeAngle);
        }
        public enum CreateInEnum : short
        {
            AnyEnvironment = 0,
            AirOnly = 1,
            WaterOnly = 2,
            SpaceOnly = 3,
        }
        public enum EffectAccelerationsCreateInEnum : short
        {
            EitherMode = 0,
            ViolentModeOnly = 1,
            NonviolentModeOnly = 2,
        }
    }
}
