//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("effe")]
    [TagBlockOriginalNameAttribute("effect_block")]
    public partial class EffectBlock : GuerillaBlock, IWriteDeferrable
    {
        public Flags EffectFlags;
        public Moonfish.Tags.ShortBlockIndex1 LoopStartEvent;
        private byte[] fieldskip = new byte[2];
        private byte[] fieldpad = new byte[4];
        public EffectLocationsBlock[] Locations = new EffectLocationsBlock[0];
        public EffectEventBlock[] Events = new EffectEventBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("lsnd")]
        public Moonfish.Tags.TagReference LoopingSound;
        public Moonfish.Tags.ShortBlockIndex1 Location;
        private byte[] fieldskip0 = new byte[2];
        public float AlwaysPlayDistance;
        public float NeverPlayDistance;
        public override int SerializedSize
        {
            get
            {
                return 48;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.EffectFlags = ((Flags)(binaryReader.ReadInt32()));
            this.LoopStartEvent = binaryReader.ReadShortBlockIndex1();
            this.fieldskip = binaryReader.ReadBytes(2);
            this.fieldpad = binaryReader.ReadBytes(4);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            this.LoopingSound = binaryReader.ReadTagReference();
            this.Location = binaryReader.ReadShortBlockIndex1();
            this.fieldskip0 = binaryReader.ReadBytes(2);
            this.AlwaysPlayDistance = binaryReader.ReadSingle();
            this.NeverPlayDistance = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Locations = base.ReadBlockArrayData<EffectLocationsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Events = base.ReadBlockArrayData<EffectEventBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Locations);
            writer.Defer(this.Events);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((int)(this.EffectFlags)));
            writer.Write(this.LoopStartEvent);
            writer.Write(this.fieldskip);
            writer.Write(this.fieldpad);
            writer.WritePointer(this.Locations);
            writer.WritePointer(this.Events);
            writer.Write(this.LoopingSound);
            writer.Write(this.Location);
            writer.Write(this.fieldskip0);
            writer.Write(this.AlwaysPlayDistance);
            writer.Write(this.NeverPlayDistance);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            DeletedWhenAttachmentDeactivates = 1,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Effe = ((TagClass)("effe"));
    }
}
