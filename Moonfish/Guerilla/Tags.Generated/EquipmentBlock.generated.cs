//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("eqip")]
    [TagBlockOriginalNameAttribute("equipment_block")]
    public partial class EquipmentBlock : ItemBlock, IWriteQueueable
    {
        public PowerupTypeEnum PowerupType;
        public GrenadeTypeEnum GrenadeType;
        public float PowerupTime;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference PickupSound;
        public override int SerializedSize
        {
            get
            {
                return 316;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.PowerupType = ((PowerupTypeEnum)(binaryReader.ReadInt16()));
            this.GrenadeType = ((GrenadeTypeEnum)(binaryReader.ReadInt16()));
            this.PowerupTime = binaryReader.ReadSingle();
            this.PickupSound = binaryReader.ReadTagReference();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.PowerupType)));
            queueableBinaryWriter.Write(((short)(this.GrenadeType)));
            queueableBinaryWriter.Write(this.PowerupTime);
            queueableBinaryWriter.Write(this.PickupSound);
        }
        public enum PowerupTypeEnum : short
        {
            None = 0,
            DoubleSpeed = 1,
            OverShield = 2,
            ActiveCamouflage = 3,
            FullspectrumVision = 4,
            Health = 5,
            Grenade = 6,
        }
        public enum GrenadeTypeEnum : short
        {
            HumanFragmentation = 0,
            CovenantPlasma = 1,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Eqip = ((TagClass)("eqip"));
    }
}
