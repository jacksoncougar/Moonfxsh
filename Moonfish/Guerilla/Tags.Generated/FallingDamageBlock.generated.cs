//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class FallingDamageBlock : GuerillaBlock, IWriteQueueable
    {
        private byte[] fieldpad = new byte[8];
        public Moonfish.Model.Range HarmfulFallingDistance;
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference FallingDamage;
        private byte[] fieldpad0 = new byte[8];
        public float MaximumFallingDistance;
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference DistanceDamage;
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference VehicleEnvironemtnCollisionDamageEffect;
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference VehicleKilledUnitDamageEffect;
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference VehicleCollisionDamage;
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference FlamingDeathDamage;
        private byte[] fieldpad1 = new byte[28];
        public override int SerializedSize
        {
            get
            {
                return 104;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.fieldpad = binaryReader.ReadBytes(8);
            this.HarmfulFallingDistance = binaryReader.ReadRange();
            this.FallingDamage = binaryReader.ReadTagReference();
            this.fieldpad0 = binaryReader.ReadBytes(8);
            this.MaximumFallingDistance = binaryReader.ReadSingle();
            this.DistanceDamage = binaryReader.ReadTagReference();
            this.VehicleEnvironemtnCollisionDamageEffect = binaryReader.ReadTagReference();
            this.VehicleKilledUnitDamageEffect = binaryReader.ReadTagReference();
            this.VehicleCollisionDamage = binaryReader.ReadTagReference();
            this.FlamingDeathDamage = binaryReader.ReadTagReference();
            this.fieldpad1 = binaryReader.ReadBytes(28);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.HarmfulFallingDistance);
            queueableBlamBinaryWriter.Write(this.FallingDamage);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.MaximumFallingDistance);
            queueableBlamBinaryWriter.Write(this.DistanceDamage);
            queueableBlamBinaryWriter.Write(this.VehicleEnvironemtnCollisionDamageEffect);
            queueableBlamBinaryWriter.Write(this.VehicleKilledUnitDamageEffect);
            queueableBlamBinaryWriter.Write(this.VehicleCollisionDamage);
            queueableBlamBinaryWriter.Write(this.FlamingDeathDamage);
            queueableBlamBinaryWriter.Write(this.fieldpad1);
        }
    }
}
