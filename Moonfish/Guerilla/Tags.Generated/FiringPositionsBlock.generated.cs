//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("firing_positions_block")]
    public partial class FiringPositionsBlock : GuerillaBlock, IWriteDeferrable
    {
        /// <summary>
        /// Ctrl-N: Creates a new area and assigns it to the current selection of firing points.
        /// </summary>
        public OpenTK.Vector3 Position;
        public short ReferenceFrame;
        public Flags FiringPositionsFlags;
        public Moonfish.Tags.ShortBlockIndex1 Area;
        public short ClusterIndex;
        private byte[] fieldskip = new byte[4];
        public OpenTK.Vector2 Normal;
        public override int SerializedSize
        {
            get
            {
                return 32;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Position = binaryReader.ReadVector3();
            this.ReferenceFrame = binaryReader.ReadInt16();
            this.FiringPositionsFlags = ((Flags)(binaryReader.ReadInt16()));
            this.Area = binaryReader.ReadShortBlockIndex1();
            this.ClusterIndex = binaryReader.ReadInt16();
            this.fieldskip = binaryReader.ReadBytes(4);
            this.Normal = binaryReader.ReadVector2();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Position);
            writer.Write(this.ReferenceFrame);
            writer.Write(((short)(this.FiringPositionsFlags)));
            writer.Write(this.Area);
            writer.Write(this.ClusterIndex);
            writer.Write(this.fieldskip);
            writer.Write(this.Normal);
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            Open = 1,
            Partial = 2,
            Closed = 4,
            Mobile = 8,
            WallLean = 16,
            Perch = 32,
            GroundPoint = 64,
            DynamicCoverPoint = 128,
        }
    }
}
