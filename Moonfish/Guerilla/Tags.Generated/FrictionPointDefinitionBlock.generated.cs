//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("friction_point_definition_block")]
    public partial class FrictionPointDefinitionBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.StringIdent MarkerName;
        public Flags FrictionPointDefinitionFlags;
        public float FractionOfTotalMass;
        public float Radius;
        public float DamagedRadius;
        public FrictionTypeEnum FrictionType;
        private byte[] fieldpad = new byte[2];
        public float MovingFrictionVelocityDiff;
        public float EbrakeMovingFriction;
        public float EbrakeFriction;
        public float EbrakeMovingFrictionVelDiff;
        private byte[] fieldpad0 = new byte[20];
        public Moonfish.Tags.StringIdent CollisionGlobalMaterialName;
        private byte[] fieldpad1 = new byte[2];
        public ModelStateDestroyedEnum ModelStateDestroyed;
        public Moonfish.Tags.StringIdent RegionName;
        private byte[] fieldpad2 = new byte[4];
        public override int SerializedSize
        {
            get
            {
                return 76;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.MarkerName = binaryReader.ReadStringIdent();
            this.FrictionPointDefinitionFlags = ((Flags)(binaryReader.ReadInt32()));
            this.FractionOfTotalMass = binaryReader.ReadSingle();
            this.Radius = binaryReader.ReadSingle();
            this.DamagedRadius = binaryReader.ReadSingle();
            this.FrictionType = ((FrictionTypeEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.MovingFrictionVelocityDiff = binaryReader.ReadSingle();
            this.EbrakeMovingFriction = binaryReader.ReadSingle();
            this.EbrakeFriction = binaryReader.ReadSingle();
            this.EbrakeMovingFrictionVelDiff = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(20);
            this.CollisionGlobalMaterialName = binaryReader.ReadStringIdent();
            this.fieldpad1 = binaryReader.ReadBytes(2);
            this.ModelStateDestroyed = ((ModelStateDestroyedEnum)(binaryReader.ReadInt16()));
            this.RegionName = binaryReader.ReadStringIdent();
            this.fieldpad2 = binaryReader.ReadBytes(4);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.MarkerName);
            writer.Write(((int)(this.FrictionPointDefinitionFlags)));
            writer.Write(this.FractionOfTotalMass);
            writer.Write(this.Radius);
            writer.Write(this.DamagedRadius);
            writer.Write(((short)(this.FrictionType)));
            writer.Write(this.fieldpad);
            writer.Write(this.MovingFrictionVelocityDiff);
            writer.Write(this.EbrakeMovingFriction);
            writer.Write(this.EbrakeFriction);
            writer.Write(this.EbrakeMovingFrictionVelDiff);
            writer.Write(this.fieldpad0);
            writer.Write(this.CollisionGlobalMaterialName);
            writer.Write(this.fieldpad1);
            writer.Write(((short)(this.ModelStateDestroyed)));
            writer.Write(this.RegionName);
            writer.Write(this.fieldpad2);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            GetsDamageFromRegion = 1,
            Powered = 2,
            FrontTurning = 4,
            RearTurning = 8,
            AttachedToEbrake = 16,
            CanBeDestroyed = 32,
        }
        public enum FrictionTypeEnum : short
        {
            Point = 0,
            Forward = 1,
        }
        public enum ModelStateDestroyedEnum : short
        {
            Default = 0,
            MinorDamage = 1,
            MediumDamage = 2,
            MajorDamage = 3,
            Destroyed = 4,
        }
    }
}
