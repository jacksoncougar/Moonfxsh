//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class GlobalDamageSectionBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.StringIdent Name;
        public Flags GlobalDamageSectionFlags;
        public float VitalityPercentage;
        public InstantaneousDamageRepsonseBlock[] InstantResponses = new InstantaneousDamageRepsonseBlock[0];
        public GNullBlock[] GNullBlock = new GNullBlock[0];
        public GNullBlock[] GNullBlock0 = new GNullBlock[0];
        public float StunTime;
        public float RechargeTime;
        private byte[] fieldpad = new byte[4];
        public Moonfish.Tags.StringIdent ResurrectionRestoredRegionName;
        private byte[] fieldpad0 = new byte[4];
        public override int SerializedSize
        {
            get
            {
                return 56;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadStringIdent();
            this.GlobalDamageSectionFlags = ((Flags)(binaryReader.ReadInt32()));
            this.VitalityPercentage = binaryReader.ReadSingle();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(80));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            this.StunTime = binaryReader.ReadSingle();
            this.RechargeTime = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(4);
            this.ResurrectionRestoredRegionName = binaryReader.ReadStringIdent();
            this.fieldpad0 = binaryReader.ReadBytes(4);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.InstantResponses = base.ReadBlockArrayData<InstantaneousDamageRepsonseBlock>(binaryReader, pointerQueue.Dequeue());
            this.GNullBlock = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
            this.GNullBlock0 = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.InstantResponses);
            queueableBlamBinaryWriter.QueueWrite(this.GNullBlock);
            queueableBlamBinaryWriter.QueueWrite(this.GNullBlock0);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.Name);
            queueableBlamBinaryWriter.Write(((int)(this.GlobalDamageSectionFlags)));
            queueableBlamBinaryWriter.Write(this.VitalityPercentage);
            queueableBlamBinaryWriter.WritePointer(this.InstantResponses);
            queueableBlamBinaryWriter.WritePointer(this.GNullBlock);
            queueableBlamBinaryWriter.WritePointer(this.GNullBlock0);
            queueableBlamBinaryWriter.Write(this.StunTime);
            queueableBlamBinaryWriter.Write(this.RechargeTime);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.ResurrectionRestoredRegionName);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
        }
        /// <summary>
        /// absorbs body damage: damage to this section does not count against body vitality
        /// </summary>
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            /// <summary>
            ///  headshottable: takes extra headshot damage when shot
            /// 
            /// </summary>
            AbsorbsBodyDamage = 1,
            /// <summary>
            ///  ignores shields: damage to this section bypasses shields
            /// </summary>
            TakesFullDmgWhenObjectDies = 2,
            CannotDieWithRiders = 4,
            TakesFullDmgWhenObjDstryd = 8,
            RestoredOnRessurection = 16,
            Unused = 32,
            Unused0 = 64,
            Heatshottable = 128,
            IgnoresShields = 256,
        }
    }
}
