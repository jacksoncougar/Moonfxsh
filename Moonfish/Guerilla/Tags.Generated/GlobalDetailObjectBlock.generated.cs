//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("global_detail_object_block")]
    public partial class GlobalDetailObjectBlock : GuerillaBlock, IWriteQueueable
    {
        public byte FieldCharInteger;
        public byte FieldCharInteger0;
        public byte FieldCharInteger1;
        public byte FieldCharInteger2;
        public short FieldShortInteger;
        public override int SerializedSize
        {
            get
            {
                return 6;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.FieldCharInteger = binaryReader.ReadByte();
            this.FieldCharInteger0 = binaryReader.ReadByte();
            this.FieldCharInteger1 = binaryReader.ReadByte();
            this.FieldCharInteger2 = binaryReader.ReadByte();
            this.FieldShortInteger = binaryReader.ReadInt16();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.FieldCharInteger);
            queueableBinaryWriter.Write(this.FieldCharInteger0);
            queueableBinaryWriter.Write(this.FieldCharInteger1);
            queueableBinaryWriter.Write(this.FieldCharInteger2);
            queueableBinaryWriter.Write(this.FieldShortInteger);
        }
    }
}
