//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("global_geometry_section_struct_block")]
    public partial class GlobalGeometrySectionStructBlock : GuerillaBlock, IWriteDeferrable
    {
        public GlobalGeometryPartBlockNew[] Parts = new GlobalGeometryPartBlockNew[0];
        public GlobalSubpartsBlock[] Subparts = new GlobalSubpartsBlock[0];
        public GlobalVisibilityBoundsBlock[] VisibilityBounds = new GlobalVisibilityBoundsBlock[0];
        public GlobalGeometrySectionRawVertexBlock[] RawVertices = new GlobalGeometrySectionRawVertexBlock[0];
        public GlobalGeometrySectionStripIndexBlock[] StripIndices = new GlobalGeometrySectionStripIndexBlock[0];
        [Moonfish.Guerilla.LayoutAttribute(Pack=16)]
        private byte[] VisibilityMoppCode;
        public GlobalGeometrySectionStripIndexBlock[] MoppReorderTable = new GlobalGeometrySectionStripIndexBlock[0];
        public GlobalGeometrySectionVertexBufferBlock[] VertexBuffers = new GlobalGeometrySectionVertexBufferBlock[0];
        private byte[] fieldpad = new byte[4];
        public override int SerializedSize
        {
            get
            {
                return 68;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(72));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(196));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(2));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(2));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            this.fieldpad = binaryReader.ReadBytes(4);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Parts = base.ReadBlockArrayData<GlobalGeometryPartBlockNew>(binaryReader, pointerQueue.Dequeue());
            this.Subparts = base.ReadBlockArrayData<GlobalSubpartsBlock>(binaryReader, pointerQueue.Dequeue());
            this.VisibilityBounds = base.ReadBlockArrayData<GlobalVisibilityBoundsBlock>(binaryReader, pointerQueue.Dequeue());
            this.RawVertices = base.ReadBlockArrayData<GlobalGeometrySectionRawVertexBlock>(binaryReader, pointerQueue.Dequeue());
            this.StripIndices = base.ReadBlockArrayData<GlobalGeometrySectionStripIndexBlock>(binaryReader, pointerQueue.Dequeue());
            this.VisibilityMoppCode = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
            this.MoppReorderTable = base.ReadBlockArrayData<GlobalGeometrySectionStripIndexBlock>(binaryReader, pointerQueue.Dequeue());
            this.VertexBuffers = base.ReadBlockArrayData<GlobalGeometrySectionVertexBufferBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Parts);
            writer.Defer(this.Subparts);
            writer.Defer(this.VisibilityBounds);
            writer.Defer(this.RawVertices);
            writer.Defer(this.StripIndices);
            writer.Defer(this.VisibilityMoppCode, 16);
            writer.Defer(this.MoppReorderTable);
            writer.Defer(this.VertexBuffers);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.WritePointer(this.Parts);
            writer.WritePointer(this.Subparts);
            writer.WritePointer(this.VisibilityBounds);
            writer.WritePointer(this.RawVertices);
            writer.WritePointer(this.StripIndices);
            writer.WritePointer(this.VisibilityMoppCode);
            writer.WritePointer(this.MoppReorderTable);
            writer.WritePointer(this.VertexBuffers);
            writer.Write(this.fieldpad);
        }
    }
}
