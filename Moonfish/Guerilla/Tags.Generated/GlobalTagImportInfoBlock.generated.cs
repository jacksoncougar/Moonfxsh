//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("global_tag_import_info_block")]
    public partial class GlobalTagImportInfoBlock : GuerillaBlock, IWriteDeferrable
    {
        public int Build;
        public Moonfish.Tags.String256 Version;
        public Moonfish.Tags.String32 ImportDate;
        public Moonfish.Tags.String32 Culprit;
        private byte[] fieldpad = new byte[96];
        public Moonfish.Tags.String32 ImportTime;
        private byte[] fieldpad0 = new byte[4];
        public TagImportFileBlock[] Files = new TagImportFileBlock[0];
        private byte[] fieldpad1 = new byte[128];
        public override int SerializedSize
        {
            get
            {
                return 592;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Build = binaryReader.ReadInt32();
            this.Version = binaryReader.ReadString256();
            this.ImportDate = binaryReader.ReadString32();
            this.Culprit = binaryReader.ReadString32();
            this.fieldpad = binaryReader.ReadBytes(96);
            this.ImportTime = binaryReader.ReadString32();
            this.fieldpad0 = binaryReader.ReadBytes(4);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(528));
            this.fieldpad1 = binaryReader.ReadBytes(128);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Files = base.ReadBlockArrayData<TagImportFileBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Files);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Build);
            writer.Write(this.Version);
            writer.Write(this.ImportDate);
            writer.Write(this.Culprit);
            writer.Write(this.fieldpad);
            writer.Write(this.ImportTime);
            writer.Write(this.fieldpad0);
            writer.WritePointer(this.Files);
            writer.Write(this.fieldpad1);
        }
    }
}
