//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("global_ui_multiplayer_level_block")]
    public partial class GlobalUiMultiplayerLevelBlock : GuerillaBlock, IWriteDeferrable
    {
        public int MapID;
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference Bitmap;
        private byte[] fieldskip = new byte[576];
        private byte[] fieldskip0 = new byte[2304];
        public Moonfish.Tags.String256 Path;
        public int SortOrder;
        public Flags GlobalUiMultiplayerLevelFlags;
        private byte[] fieldpad = new byte[3];
        public byte MaxTeamsNone;
        public byte MaxTeamsCTF;
        public byte MaxTeamsSlayer;
        public byte MaxTeamsOddball;
        public byte MaxTeamsKOTH;
        public byte MaxTeamsRace;
        public byte MaxTeamsHeadhunter;
        public byte MaxTeamsJuggernaut;
        public byte MaxTeamsTerritories;
        public byte MaxTeamsAssault;
        public byte MaxTeamsStub10;
        public byte MaxTeamsStub11;
        public byte MaxTeamsStub12;
        public byte MaxTeamsStub13;
        public byte MaxTeamsStub14;
        public byte MaxTeamsStub15;
        public override int SerializedSize
        {
            get
            {
                return 3172;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.MapID = binaryReader.ReadInt32();
            this.Bitmap = binaryReader.ReadTagReference();
            this.fieldskip = binaryReader.ReadBytes(576);
            this.fieldskip0 = binaryReader.ReadBytes(2304);
            this.Path = binaryReader.ReadString256();
            this.SortOrder = binaryReader.ReadInt32();
            this.GlobalUiMultiplayerLevelFlags = ((Flags)(binaryReader.ReadByte()));
            this.fieldpad = binaryReader.ReadBytes(3);
            this.MaxTeamsNone = binaryReader.ReadByte();
            this.MaxTeamsCTF = binaryReader.ReadByte();
            this.MaxTeamsSlayer = binaryReader.ReadByte();
            this.MaxTeamsOddball = binaryReader.ReadByte();
            this.MaxTeamsKOTH = binaryReader.ReadByte();
            this.MaxTeamsRace = binaryReader.ReadByte();
            this.MaxTeamsHeadhunter = binaryReader.ReadByte();
            this.MaxTeamsJuggernaut = binaryReader.ReadByte();
            this.MaxTeamsTerritories = binaryReader.ReadByte();
            this.MaxTeamsAssault = binaryReader.ReadByte();
            this.MaxTeamsStub10 = binaryReader.ReadByte();
            this.MaxTeamsStub11 = binaryReader.ReadByte();
            this.MaxTeamsStub12 = binaryReader.ReadByte();
            this.MaxTeamsStub13 = binaryReader.ReadByte();
            this.MaxTeamsStub14 = binaryReader.ReadByte();
            this.MaxTeamsStub15 = binaryReader.ReadByte();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.MapID);
            writer.Write(this.Bitmap);
            writer.Write(this.fieldskip);
            writer.Write(this.fieldskip0);
            writer.Write(this.Path);
            writer.Write(this.SortOrder);
            writer.Write(((byte)(this.GlobalUiMultiplayerLevelFlags)));
            writer.Write(this.fieldpad);
            writer.Write(this.MaxTeamsNone);
            writer.Write(this.MaxTeamsCTF);
            writer.Write(this.MaxTeamsSlayer);
            writer.Write(this.MaxTeamsOddball);
            writer.Write(this.MaxTeamsKOTH);
            writer.Write(this.MaxTeamsRace);
            writer.Write(this.MaxTeamsHeadhunter);
            writer.Write(this.MaxTeamsJuggernaut);
            writer.Write(this.MaxTeamsTerritories);
            writer.Write(this.MaxTeamsAssault);
            writer.Write(this.MaxTeamsStub10);
            writer.Write(this.MaxTeamsStub11);
            writer.Write(this.MaxTeamsStub12);
            writer.Write(this.MaxTeamsStub13);
            writer.Write(this.MaxTeamsStub14);
            writer.Write(this.MaxTeamsStub15);
        }
        [System.FlagsAttribute()]
        public enum Flags : byte
        {
            None = 0,
            Unlockable = 1,
        }
    }
}
