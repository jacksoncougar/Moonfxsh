//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("global_weather_background_plate_block")]
    public partial class GlobalWeatherBackgroundPlateBlock : GuerillaBlock, IWriteQueueable
    {
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference Texture0;
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference Texture1;
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference Texture2;
        public float PlatePositions0;
        public float PlatePositions1;
        public float PlatePositions2;
        public OpenTK.Vector3 MoveSpeed0;
        public OpenTK.Vector3 MoveSpeed1;
        public OpenTK.Vector3 MoveSpeed2;
        public float TextureScale0;
        public float TextureScale1;
        public float TextureScale2;
        public OpenTK.Vector3 Jitter0;
        public OpenTK.Vector3 Jitter1;
        public OpenTK.Vector3 Jitter2;
        public float PlateZNear;
        public float PlateZFar;
        public float DepthBlendZNear;
        public float DepthBlendZFar;
        public float Opacity0;
        public float Opacity1;
        public float Opacity2;
        public Flags GlobalWeatherBackgroundPlateFlags;
        public Moonfish.Tags.ColourR8G8B8 TintColor0;
        public Moonfish.Tags.ColourR8G8B8 TintColor1;
        public Moonfish.Tags.ColourR8G8B8 TintColor2;
        public float Mass1;
        public float Mass2;
        public float Mass3;
        private byte[] fieldpad = new byte[736];
        public override int SerializedSize
        {
            get
            {
                return 936;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Texture0 = binaryReader.ReadTagReference();
            this.Texture1 = binaryReader.ReadTagReference();
            this.Texture2 = binaryReader.ReadTagReference();
            this.PlatePositions0 = binaryReader.ReadSingle();
            this.PlatePositions1 = binaryReader.ReadSingle();
            this.PlatePositions2 = binaryReader.ReadSingle();
            this.MoveSpeed0 = binaryReader.ReadVector3();
            this.MoveSpeed1 = binaryReader.ReadVector3();
            this.MoveSpeed2 = binaryReader.ReadVector3();
            this.TextureScale0 = binaryReader.ReadSingle();
            this.TextureScale1 = binaryReader.ReadSingle();
            this.TextureScale2 = binaryReader.ReadSingle();
            this.Jitter0 = binaryReader.ReadVector3();
            this.Jitter1 = binaryReader.ReadVector3();
            this.Jitter2 = binaryReader.ReadVector3();
            this.PlateZNear = binaryReader.ReadSingle();
            this.PlateZFar = binaryReader.ReadSingle();
            this.DepthBlendZNear = binaryReader.ReadSingle();
            this.DepthBlendZFar = binaryReader.ReadSingle();
            this.Opacity0 = binaryReader.ReadSingle();
            this.Opacity1 = binaryReader.ReadSingle();
            this.Opacity2 = binaryReader.ReadSingle();
            this.GlobalWeatherBackgroundPlateFlags = ((Flags)(binaryReader.ReadInt32()));
            this.TintColor0 = binaryReader.ReadColourR8G8B8();
            this.TintColor1 = binaryReader.ReadColourR8G8B8();
            this.TintColor2 = binaryReader.ReadColourR8G8B8();
            this.Mass1 = binaryReader.ReadSingle();
            this.Mass2 = binaryReader.ReadSingle();
            this.Mass3 = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(736);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.Texture0);
            queueableBinaryWriter.Write(this.Texture1);
            queueableBinaryWriter.Write(this.Texture2);
            queueableBinaryWriter.Write(this.PlatePositions0);
            queueableBinaryWriter.Write(this.PlatePositions1);
            queueableBinaryWriter.Write(this.PlatePositions2);
            queueableBinaryWriter.Write(this.MoveSpeed0);
            queueableBinaryWriter.Write(this.MoveSpeed1);
            queueableBinaryWriter.Write(this.MoveSpeed2);
            queueableBinaryWriter.Write(this.TextureScale0);
            queueableBinaryWriter.Write(this.TextureScale1);
            queueableBinaryWriter.Write(this.TextureScale2);
            queueableBinaryWriter.Write(this.Jitter0);
            queueableBinaryWriter.Write(this.Jitter1);
            queueableBinaryWriter.Write(this.Jitter2);
            queueableBinaryWriter.Write(this.PlateZNear);
            queueableBinaryWriter.Write(this.PlateZFar);
            queueableBinaryWriter.Write(this.DepthBlendZNear);
            queueableBinaryWriter.Write(this.DepthBlendZFar);
            queueableBinaryWriter.Write(this.Opacity0);
            queueableBinaryWriter.Write(this.Opacity1);
            queueableBinaryWriter.Write(this.Opacity2);
            queueableBinaryWriter.Write(((int)(this.GlobalWeatherBackgroundPlateFlags)));
            queueableBinaryWriter.Write(this.TintColor0);
            queueableBinaryWriter.Write(this.TintColor1);
            queueableBinaryWriter.Write(this.TintColor2);
            queueableBinaryWriter.Write(this.Mass1);
            queueableBinaryWriter.Write(this.Mass2);
            queueableBinaryWriter.Write(this.Mass3);
            queueableBinaryWriter.Write(this.fieldpad);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            ForwardMotion = 1,
            AutoPositionPlanes = 2,
            AutoScalePlanesautoUpdateSpeed = 4,
        }
    }
}
