//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("global_wind_model_struct_block")]
    public partial class GlobalWindModelStructBlock : GuerillaBlock, IWriteQueueable
    {
        public float WindTilingScale;
        public OpenTK.Vector3 WindPrimaryHeadingpitchstrength;
        public float PrimaryRateOfChange;
        public float PrimaryMinStrength;
        private byte[] fieldpad = new byte[4];
        private byte[] fieldpad0 = new byte[4];
        private byte[] fieldpad1 = new byte[12];
        public OpenTK.Vector3 WindGustingHeadingpitchstrength;
        public float GustDiretionalRateOfChange;
        public float GustStrengthRateOfChange;
        public float GustConeAngle;
        private byte[] fieldpad2 = new byte[4];
        private byte[] fieldpad3 = new byte[4];
        private byte[] fieldpad4 = new byte[12];
        private byte[] fieldpad5 = new byte[12];
        private byte[] fieldpad6 = new byte[12];
        private byte[] fieldpad7 = new byte[12];
        public float TurbulanceRateOfChange;
        public OpenTK.Vector3 TurbulenceScaleXYZ;
        public float GravityConstant;
        public GloalWindPrimitivesBlock[] WindPirmitives = new GloalWindPrimitivesBlock[0];
        private byte[] fieldpad8 = new byte[4];
        public override int SerializedSize
        {
            get
            {
                return 156;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.WindTilingScale = binaryReader.ReadSingle();
            this.WindPrimaryHeadingpitchstrength = binaryReader.ReadVector3();
            this.PrimaryRateOfChange = binaryReader.ReadSingle();
            this.PrimaryMinStrength = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(4);
            this.fieldpad0 = binaryReader.ReadBytes(4);
            this.fieldpad1 = binaryReader.ReadBytes(12);
            this.WindGustingHeadingpitchstrength = binaryReader.ReadVector3();
            this.GustDiretionalRateOfChange = binaryReader.ReadSingle();
            this.GustStrengthRateOfChange = binaryReader.ReadSingle();
            this.GustConeAngle = binaryReader.ReadSingle();
            this.fieldpad2 = binaryReader.ReadBytes(4);
            this.fieldpad3 = binaryReader.ReadBytes(4);
            this.fieldpad4 = binaryReader.ReadBytes(12);
            this.fieldpad5 = binaryReader.ReadBytes(12);
            this.fieldpad6 = binaryReader.ReadBytes(12);
            this.fieldpad7 = binaryReader.ReadBytes(12);
            this.TurbulanceRateOfChange = binaryReader.ReadSingle();
            this.TurbulenceScaleXYZ = binaryReader.ReadVector3();
            this.GravityConstant = binaryReader.ReadSingle();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            this.fieldpad8 = binaryReader.ReadBytes(4);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.WindPirmitives = base.ReadBlockArrayData<GloalWindPrimitivesBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            queueableBinaryWriter.QueueWrite(this.WindPirmitives);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.WindTilingScale);
            queueableBinaryWriter.Write(this.WindPrimaryHeadingpitchstrength);
            queueableBinaryWriter.Write(this.PrimaryRateOfChange);
            queueableBinaryWriter.Write(this.PrimaryMinStrength);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.fieldpad1);
            queueableBinaryWriter.Write(this.WindGustingHeadingpitchstrength);
            queueableBinaryWriter.Write(this.GustDiretionalRateOfChange);
            queueableBinaryWriter.Write(this.GustStrengthRateOfChange);
            queueableBinaryWriter.Write(this.GustConeAngle);
            queueableBinaryWriter.Write(this.fieldpad2);
            queueableBinaryWriter.Write(this.fieldpad3);
            queueableBinaryWriter.Write(this.fieldpad4);
            queueableBinaryWriter.Write(this.fieldpad5);
            queueableBinaryWriter.Write(this.fieldpad6);
            queueableBinaryWriter.Write(this.fieldpad7);
            queueableBinaryWriter.Write(this.TurbulanceRateOfChange);
            queueableBinaryWriter.Write(this.TurbulenceScaleXYZ);
            queueableBinaryWriter.Write(this.GravityConstant);
            queueableBinaryWriter.WritePointer(this.WindPirmitives);
            queueableBinaryWriter.Write(this.fieldpad8);
        }
    }
}
