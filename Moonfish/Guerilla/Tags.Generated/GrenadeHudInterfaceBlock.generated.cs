//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("grhi")]
    [TagBlockOriginalNameAttribute("grenade_hud_interface_block")]
    public partial class GrenadeHudInterfaceBlock : GuerillaBlock, IWriteDeferrable
    {
        public AnchorEnum Anchor;
        private byte[] fieldpad = new byte[2];
        private byte[] fieldpad0 = new byte[32];
        public Moonfish.Tags.Point AnchorOffset;
        public float WidthScale;
        public float HeightScale;
        public ScalingFlags GrenadeHudInterfaceScalingFlags;
        private byte[] fieldpad1 = new byte[2];
        private byte[] fieldpad2 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference InterfaceBitmap;
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor;
        public float FlashPeriod;
        public float FlashDelay;
        public short NumberOfFlashes;
        public FlashFlags GrenadeHudInterfaceFlashFlags;
        public float FlashLength;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor;
        private byte[] fieldpad3 = new byte[4];
        public short SequenceIndex;
        private byte[] fieldpad4 = new byte[2];
        public GlobalHudMultitextureOverlayDefinition[] MultitexOverlay = new GlobalHudMultitextureOverlayDefinition[0];
        private byte[] fieldpad5 = new byte[4];
        public Moonfish.Tags.Point AnchorOffset0;
        public float WidthScale0;
        public float HeightScale0;
        public GrenadeHudInterfaceScalingFlags0 GrenadeHudInterfaceGrenadeHudInterfaceScalingFlags0;
        private byte[] fieldpad6 = new byte[2];
        private byte[] fieldpad7 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference InterfaceBitmap0;
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor0;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor0;
        public float FlashPeriod0;
        public float FlashDelay0;
        public short NumberOfFlashes0;
        public GrenadeHudInterfaceFlashFlags0 GrenadeHudInterfaceGrenadeHudInterfaceFlashFlags0;
        public float FlashLength0;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor0;
        private byte[] fieldpad8 = new byte[4];
        public short SequenceIndex0;
        private byte[] fieldpad9 = new byte[2];
        public GlobalHudMultitextureOverlayDefinition[] MultitexOverlay0 = new GlobalHudMultitextureOverlayDefinition[0];
        private byte[] fieldpad10 = new byte[4];
        public Moonfish.Tags.Point AnchorOffset1;
        public float WidthScale1;
        public float HeightScale1;
        public GrenadeHudInterfaceScalingFlags1 GrenadeHudInterfaceGrenadeHudInterfaceScalingFlags1;
        private byte[] fieldpad11 = new byte[2];
        private byte[] fieldpad12 = new byte[20];
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor1;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor1;
        public float FlashPeriod1;
        public float FlashDelay1;
        public short NumberOfFlashes1;
        public GrenadeHudInterfaceFlashFlags1 GrenadeHudInterfaceGrenadeHudInterfaceFlashFlags1;
        public float FlashLength1;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor1;
        private byte[] fieldpad13 = new byte[4];
        public byte MaximumNumberOfDigits;
        public Flags GrenadeHudInterfaceFlags;
        public byte NumberOfFractionalDigits;
        private byte[] fieldpad14 = new byte[1];
        private byte[] fieldpad15 = new byte[12];
        public short FlashCutoff;
        private byte[] fieldpad16 = new byte[2];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference OverlayBitmap;
        public GrenadeHudOverlayBlock[] Overlays = new GrenadeHudOverlayBlock[0];
        public GrenadeHudSoundBlock[] WarningSounds = new GrenadeHudSoundBlock[0];
        private byte[] fieldpad17 = new byte[68];
        public short SequenceIndex1;
        public short WidthOffset;
        public Moonfish.Tags.Point OffsetFromReferenceCorner;
        public Moonfish.Tags.ColourA1R1G1B1 OverrideIconColor;
        public byte FrameRate030;
        public GrenadeHudInterfaceFlags0 GrenadeHudInterfaceGrenadeHudInterfaceFlags0;
        public short TextIndex;
        private byte[] fieldpad18 = new byte[48];
        public override int SerializedSize
        {
            get
            {
                return 464;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Anchor = ((AnchorEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.fieldpad0 = binaryReader.ReadBytes(32);
            this.AnchorOffset = binaryReader.ReadPoint();
            this.WidthScale = binaryReader.ReadSingle();
            this.HeightScale = binaryReader.ReadSingle();
            this.GrenadeHudInterfaceScalingFlags = ((ScalingFlags)(binaryReader.ReadInt16()));
            this.fieldpad1 = binaryReader.ReadBytes(2);
            this.fieldpad2 = binaryReader.ReadBytes(20);
            this.InterfaceBitmap = binaryReader.ReadTagReference();
            this.DefaultColor = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod = binaryReader.ReadSingle();
            this.FlashDelay = binaryReader.ReadSingle();
            this.NumberOfFlashes = binaryReader.ReadInt16();
            this.GrenadeHudInterfaceFlashFlags = ((FlashFlags)(binaryReader.ReadInt16()));
            this.FlashLength = binaryReader.ReadSingle();
            this.DisabledColor = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad3 = binaryReader.ReadBytes(4);
            this.SequenceIndex = binaryReader.ReadInt16();
            this.fieldpad4 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(452));
            this.fieldpad5 = binaryReader.ReadBytes(4);
            this.AnchorOffset0 = binaryReader.ReadPoint();
            this.WidthScale0 = binaryReader.ReadSingle();
            this.HeightScale0 = binaryReader.ReadSingle();
            this.GrenadeHudInterfaceGrenadeHudInterfaceScalingFlags0 = ((GrenadeHudInterfaceScalingFlags0)(binaryReader.ReadInt16()));
            this.fieldpad6 = binaryReader.ReadBytes(2);
            this.fieldpad7 = binaryReader.ReadBytes(20);
            this.InterfaceBitmap0 = binaryReader.ReadTagReference();
            this.DefaultColor0 = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor0 = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod0 = binaryReader.ReadSingle();
            this.FlashDelay0 = binaryReader.ReadSingle();
            this.NumberOfFlashes0 = binaryReader.ReadInt16();
            this.GrenadeHudInterfaceGrenadeHudInterfaceFlashFlags0 = ((GrenadeHudInterfaceFlashFlags0)(binaryReader.ReadInt16()));
            this.FlashLength0 = binaryReader.ReadSingle();
            this.DisabledColor0 = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad8 = binaryReader.ReadBytes(4);
            this.SequenceIndex0 = binaryReader.ReadInt16();
            this.fieldpad9 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(452));
            this.fieldpad10 = binaryReader.ReadBytes(4);
            this.AnchorOffset1 = binaryReader.ReadPoint();
            this.WidthScale1 = binaryReader.ReadSingle();
            this.HeightScale1 = binaryReader.ReadSingle();
            this.GrenadeHudInterfaceGrenadeHudInterfaceScalingFlags1 = ((GrenadeHudInterfaceScalingFlags1)(binaryReader.ReadInt16()));
            this.fieldpad11 = binaryReader.ReadBytes(2);
            this.fieldpad12 = binaryReader.ReadBytes(20);
            this.DefaultColor1 = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor1 = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod1 = binaryReader.ReadSingle();
            this.FlashDelay1 = binaryReader.ReadSingle();
            this.NumberOfFlashes1 = binaryReader.ReadInt16();
            this.GrenadeHudInterfaceGrenadeHudInterfaceFlashFlags1 = ((GrenadeHudInterfaceFlashFlags1)(binaryReader.ReadInt16()));
            this.FlashLength1 = binaryReader.ReadSingle();
            this.DisabledColor1 = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad13 = binaryReader.ReadBytes(4);
            this.MaximumNumberOfDigits = binaryReader.ReadByte();
            this.GrenadeHudInterfaceFlags = ((Flags)(binaryReader.ReadByte()));
            this.NumberOfFractionalDigits = binaryReader.ReadByte();
            this.fieldpad14 = binaryReader.ReadBytes(1);
            this.fieldpad15 = binaryReader.ReadBytes(12);
            this.FlashCutoff = binaryReader.ReadInt16();
            this.fieldpad16 = binaryReader.ReadBytes(2);
            this.OverlayBitmap = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(136));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(48));
            this.fieldpad17 = binaryReader.ReadBytes(68);
            this.SequenceIndex1 = binaryReader.ReadInt16();
            this.WidthOffset = binaryReader.ReadInt16();
            this.OffsetFromReferenceCorner = binaryReader.ReadPoint();
            this.OverrideIconColor = binaryReader.ReadColourA1R1G1B1();
            this.FrameRate030 = binaryReader.ReadByte();
            this.GrenadeHudInterfaceGrenadeHudInterfaceFlags0 = ((GrenadeHudInterfaceFlags0)(binaryReader.ReadByte()));
            this.TextIndex = binaryReader.ReadInt16();
            this.fieldpad18 = binaryReader.ReadBytes(48);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.MultitexOverlay = base.ReadBlockArrayData<GlobalHudMultitextureOverlayDefinition>(binaryReader, pointerQueue.Dequeue());
            this.MultitexOverlay0 = base.ReadBlockArrayData<GlobalHudMultitextureOverlayDefinition>(binaryReader, pointerQueue.Dequeue());
            this.Overlays = base.ReadBlockArrayData<GrenadeHudOverlayBlock>(binaryReader, pointerQueue.Dequeue());
            this.WarningSounds = base.ReadBlockArrayData<GrenadeHudSoundBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.MultitexOverlay);
            writer.Defer(this.MultitexOverlay0);
            writer.Defer(this.Overlays);
            writer.Defer(this.WarningSounds);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((short)(this.Anchor)));
            writer.Write(this.fieldpad);
            writer.Write(this.fieldpad0);
            writer.Write(this.AnchorOffset);
            writer.Write(this.WidthScale);
            writer.Write(this.HeightScale);
            writer.Write(((short)(this.GrenadeHudInterfaceScalingFlags)));
            writer.Write(this.fieldpad1);
            writer.Write(this.fieldpad2);
            writer.Write(this.InterfaceBitmap);
            writer.Write(this.DefaultColor);
            writer.Write(this.FlashingColor);
            writer.Write(this.FlashPeriod);
            writer.Write(this.FlashDelay);
            writer.Write(this.NumberOfFlashes);
            writer.Write(((short)(this.GrenadeHudInterfaceFlashFlags)));
            writer.Write(this.FlashLength);
            writer.Write(this.DisabledColor);
            writer.Write(this.fieldpad3);
            writer.Write(this.SequenceIndex);
            writer.Write(this.fieldpad4);
            writer.WritePointer(this.MultitexOverlay);
            writer.Write(this.fieldpad5);
            writer.Write(this.AnchorOffset0);
            writer.Write(this.WidthScale0);
            writer.Write(this.HeightScale0);
            writer.Write(((short)(this.GrenadeHudInterfaceGrenadeHudInterfaceScalingFlags0)));
            writer.Write(this.fieldpad6);
            writer.Write(this.fieldpad7);
            writer.Write(this.InterfaceBitmap0);
            writer.Write(this.DefaultColor0);
            writer.Write(this.FlashingColor0);
            writer.Write(this.FlashPeriod0);
            writer.Write(this.FlashDelay0);
            writer.Write(this.NumberOfFlashes0);
            writer.Write(((short)(this.GrenadeHudInterfaceGrenadeHudInterfaceFlashFlags0)));
            writer.Write(this.FlashLength0);
            writer.Write(this.DisabledColor0);
            writer.Write(this.fieldpad8);
            writer.Write(this.SequenceIndex0);
            writer.Write(this.fieldpad9);
            writer.WritePointer(this.MultitexOverlay0);
            writer.Write(this.fieldpad10);
            writer.Write(this.AnchorOffset1);
            writer.Write(this.WidthScale1);
            writer.Write(this.HeightScale1);
            writer.Write(((short)(this.GrenadeHudInterfaceGrenadeHudInterfaceScalingFlags1)));
            writer.Write(this.fieldpad11);
            writer.Write(this.fieldpad12);
            writer.Write(this.DefaultColor1);
            writer.Write(this.FlashingColor1);
            writer.Write(this.FlashPeriod1);
            writer.Write(this.FlashDelay1);
            writer.Write(this.NumberOfFlashes1);
            writer.Write(((short)(this.GrenadeHudInterfaceGrenadeHudInterfaceFlashFlags1)));
            writer.Write(this.FlashLength1);
            writer.Write(this.DisabledColor1);
            writer.Write(this.fieldpad13);
            writer.Write(this.MaximumNumberOfDigits);
            writer.Write(((byte)(this.GrenadeHudInterfaceFlags)));
            writer.Write(this.NumberOfFractionalDigits);
            writer.Write(this.fieldpad14);
            writer.Write(this.fieldpad15);
            writer.Write(this.FlashCutoff);
            writer.Write(this.fieldpad16);
            writer.Write(this.OverlayBitmap);
            writer.WritePointer(this.Overlays);
            writer.WritePointer(this.WarningSounds);
            writer.Write(this.fieldpad17);
            writer.Write(this.SequenceIndex1);
            writer.Write(this.WidthOffset);
            writer.Write(this.OffsetFromReferenceCorner);
            writer.Write(this.OverrideIconColor);
            writer.Write(this.FrameRate030);
            writer.Write(((byte)(this.GrenadeHudInterfaceGrenadeHudInterfaceFlags0)));
            writer.Write(this.TextIndex);
            writer.Write(this.fieldpad18);
        }
        public enum AnchorEnum : short
        {
            TopLeft = 0,
            TopRight = 1,
            BottomLeft = 2,
            BottomRight = 3,
            Center = 4,
            Crosshair = 5,
        }
        [System.FlagsAttribute()]
        public enum ScalingFlags : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum FlashFlags : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum GrenadeHudInterfaceScalingFlags0 : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum GrenadeHudInterfaceFlashFlags0 : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum GrenadeHudInterfaceScalingFlags1 : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum GrenadeHudInterfaceFlashFlags1 : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum Flags : byte
        {
            None = 0,
            ShowLeadingZeros = 1,
            OnlyShowWhenZoomed = 2,
            DrawATrailingM = 4,
        }
        [System.FlagsAttribute()]
        public enum GrenadeHudInterfaceFlags0 : byte
        {
            None = 0,
            UseTextFromStringListInstead = 1,
            OverrideDefaultColor = 2,
            WidthOffsetIsAbsoluteIconWidth = 4,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Grhi = ((TagClass)("grhi"));
    }
}
