//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class GrenadeHudOverlayBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.Point AnchorOffset;
        public float WidthScale;
        public float HeightScale;
        public ScalingFlags GrenadeHudOverlayScalingFlags;
        private byte[] fieldpad = new byte[2];
        private byte[] fieldpad0 = new byte[20];
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor;
        public float FlashPeriod;
        public float FlashDelay;
        public short NumberOfFlashes;
        public FlashFlags GrenadeHudOverlayFlashFlags;
        public float FlashLength;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor;
        private byte[] fieldpad1 = new byte[4];
        public float FrameRate;
        public short SequenceIndex;
        public Type GrenadeHudOverlayType;
        public Flags GrenadeHudOverlayFlags;
        private byte[] fieldpad2 = new byte[16];
        private byte[] fieldpad3 = new byte[40];
        public override int SerializedSize
        {
            get
            {
                return 136;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.AnchorOffset = binaryReader.ReadPoint();
            this.WidthScale = binaryReader.ReadSingle();
            this.HeightScale = binaryReader.ReadSingle();
            this.GrenadeHudOverlayScalingFlags = ((ScalingFlags)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.fieldpad0 = binaryReader.ReadBytes(20);
            this.DefaultColor = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod = binaryReader.ReadSingle();
            this.FlashDelay = binaryReader.ReadSingle();
            this.NumberOfFlashes = binaryReader.ReadInt16();
            this.GrenadeHudOverlayFlashFlags = ((FlashFlags)(binaryReader.ReadInt16()));
            this.FlashLength = binaryReader.ReadSingle();
            this.DisabledColor = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad1 = binaryReader.ReadBytes(4);
            this.FrameRate = binaryReader.ReadSingle();
            this.SequenceIndex = binaryReader.ReadInt16();
            this.GrenadeHudOverlayType = ((Type)(binaryReader.ReadInt16()));
            this.GrenadeHudOverlayFlags = ((Flags)(binaryReader.ReadInt32()));
            this.fieldpad2 = binaryReader.ReadBytes(16);
            this.fieldpad3 = binaryReader.ReadBytes(40);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.AnchorOffset);
            queueableBlamBinaryWriter.Write(this.WidthScale);
            queueableBlamBinaryWriter.Write(this.HeightScale);
            queueableBlamBinaryWriter.Write(((short)(this.GrenadeHudOverlayScalingFlags)));
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.DefaultColor);
            queueableBlamBinaryWriter.Write(this.FlashingColor);
            queueableBlamBinaryWriter.Write(this.FlashPeriod);
            queueableBlamBinaryWriter.Write(this.FlashDelay);
            queueableBlamBinaryWriter.Write(this.NumberOfFlashes);
            queueableBlamBinaryWriter.Write(((short)(this.GrenadeHudOverlayFlashFlags)));
            queueableBlamBinaryWriter.Write(this.FlashLength);
            queueableBlamBinaryWriter.Write(this.DisabledColor);
            queueableBlamBinaryWriter.Write(this.fieldpad1);
            queueableBlamBinaryWriter.Write(this.FrameRate);
            queueableBlamBinaryWriter.Write(this.SequenceIndex);
            queueableBlamBinaryWriter.Write(((short)(this.GrenadeHudOverlayType)));
            queueableBlamBinaryWriter.Write(((int)(this.GrenadeHudOverlayFlags)));
            queueableBlamBinaryWriter.Write(this.fieldpad2);
            queueableBlamBinaryWriter.Write(this.fieldpad3);
        }
        [System.FlagsAttribute()]
        public enum ScalingFlags : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum FlashFlags : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum Type : short
        {
            None = 0,
            ShowOnFlashing = 1,
            ShowOnEmpty = 2,
            ShowOnDefault = 4,
            ShowAlways = 8,
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            FlashesWhenActive = 1,
        }
    }
}
