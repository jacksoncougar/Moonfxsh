//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("hud_button_icon_block")]
    public partial class HudButtonIconBlock : GuerillaBlock, IWriteDeferrable
    {
        public short SequenceIndex;
        public short WidthOffset;
        public Moonfish.Tags.Point OffsetFromReferenceCorner;
        public Moonfish.Tags.ColourA1R1G1B1 OverrideIconColor;
        public byte FrameRate030;
        public Flags HudButtonIconFlags;
        public short TextIndex;
        public override int SerializedSize
        {
            get
            {
                return 16;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.SequenceIndex = binaryReader.ReadInt16();
            this.WidthOffset = binaryReader.ReadInt16();
            this.OffsetFromReferenceCorner = binaryReader.ReadPoint();
            this.OverrideIconColor = binaryReader.ReadColourA1R1G1B1();
            this.FrameRate030 = binaryReader.ReadByte();
            this.HudButtonIconFlags = ((Flags)(binaryReader.ReadByte()));
            this.TextIndex = binaryReader.ReadInt16();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.SequenceIndex);
            writer.Write(this.WidthOffset);
            writer.Write(this.OffsetFromReferenceCorner);
            writer.Write(this.OverrideIconColor);
            writer.Write(this.FrameRate030);
            writer.Write(((byte)(this.HudButtonIconFlags)));
            writer.Write(this.TextIndex);
        }
        [System.FlagsAttribute()]
        public enum Flags : byte
        {
            None = 0,
            UseTextFromStringListInstead = 1,
            OverrideDefaultColor = 2,
            WidthOffsetIsAbsoluteIconWidth = 4,
        }
    }
}
