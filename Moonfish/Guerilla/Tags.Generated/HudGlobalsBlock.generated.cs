//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("hudg")]
    public partial class HudGlobalsBlock : GuerillaBlock, IWriteQueueable
    {
        public AnchorEnum Anchor;
        private byte[] fieldpad = new byte[2];
        private byte[] fieldpad0 = new byte[32];
        public Moonfish.Tags.Point AnchorOffset;
        public float WidthScale;
        public float HeightScale;
        public ScalingFlags HudGlobalsScalingFlags;
        private byte[] fieldpad1 = new byte[2];
        private byte[] fieldpad2 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference Obsolete1;
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference Obsolete2;
        public float UpTime;
        public float FadeTime;
        public OpenTK.Vector4 IconColor;
        public OpenTK.Vector4 TextColor;
        public float TextSpacing;
        [Moonfish.Tags.TagReferenceAttribute("unic")]
        public Moonfish.Tags.TagReference ItemMessageText;
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference IconBitmap;
        [Moonfish.Tags.TagReferenceAttribute("unic")]
        public Moonfish.Tags.TagReference AlternateIconText;
        public HudButtonIconBlock[] ButtonIcons = new HudButtonIconBlock[0];
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor;
        public float FlashPeriod;
        public float FlashDelay;
        public short NumberOfFlashes;
        public FlashFlags HudGlobalsFlashFlags;
        public float FlashLength;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor;
        private byte[] fieldpad3 = new byte[4];
        [Moonfish.Tags.TagReferenceAttribute("hmt ")]
        public Moonfish.Tags.TagReference HudMessages;
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor0;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor0;
        public float FlashPeriod0;
        public float FlashDelay0;
        public short NumberOfFlashes0;
        public HudGlobalsFlashFlags0 HudGlobalsHudGlobalsFlashFlags0;
        public float FlashLength0;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor0;
        public short UptimeTicks;
        public short FadeTicks;
        /// <summary>
        /// The offset values are how much the waypoint rectangle border is offset from the safe camera bounds
        /// </summary>
        public float TopOffset;
        public float BottomOffset;
        public float LeftOffset;
        public float RightOffset;
        private byte[] fieldpad4 = new byte[32];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference ArrowBitmap;
        public HudWaypointArrowBlock[] WaypointArrows = new HudWaypointArrowBlock[0];
        private byte[] fieldpad5 = new byte[80];
        public float HudScaleInMultiplayer;
        private byte[] fieldpad6 = new byte[256];
        private byte[] fieldpad7 = new byte[16];
        public float MotionSensorRange;
        public float MotionSensorVelocitySensitivity;
        public float MotionSensorScaleDONTTOUCHEVER;
        public OpenTK.Vector2 DefaultChapterTitleBounds;
        private byte[] fieldpad8 = new byte[44];
        public short TopOffset0;
        public short BottomOffset0;
        public short LeftOffset0;
        public short RightOffset0;
        private byte[] fieldpad9 = new byte[32];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference IndicatorBitmap;
        public short SequenceIndex;
        public short MultiplayerSequenceIndex;
        public Moonfish.Tags.ColourA1R1G1B1 Color;
        private byte[] fieldpad10 = new byte[16];
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor1;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor1;
        public float FlashPeriod1;
        public float FlashDelay1;
        public short NumberOfFlashes1;
        public HudGlobalsFlashFlags1 HudGlobalsHudGlobalsFlashFlags1;
        public float FlashLength1;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor1;
        private byte[] fieldpad11 = new byte[4];
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor2;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor2;
        public float FlashPeriod2;
        public float FlashDelay2;
        public short NumberOfFlashes2;
        public HudGlobalsFlashFlags2 HudGlobalsHudGlobalsFlashFlags2;
        public float FlashLength2;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor2;
        private byte[] fieldpad12 = new byte[4];
        private byte[] fieldpad13 = new byte[40];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference CarnageReportBitmap;
        public short LoadingBeginText;
        public short LoadingEndText;
        public short CheckpointBeginText;
        public short CheckpointEndText;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference CheckpointSound;
        private byte[] fieldpad14 = new byte[96];
        public GlobalNewHudGlobalsStructBlock NewGlobals = new GlobalNewHudGlobalsStructBlock();
        public override int SerializedSize
        {
            get
            {
                return 1160;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Anchor = ((AnchorEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.fieldpad0 = binaryReader.ReadBytes(32);
            this.AnchorOffset = binaryReader.ReadPoint();
            this.WidthScale = binaryReader.ReadSingle();
            this.HeightScale = binaryReader.ReadSingle();
            this.HudGlobalsScalingFlags = ((ScalingFlags)(binaryReader.ReadInt16()));
            this.fieldpad1 = binaryReader.ReadBytes(2);
            this.fieldpad2 = binaryReader.ReadBytes(20);
            this.Obsolete1 = binaryReader.ReadTagReference();
            this.Obsolete2 = binaryReader.ReadTagReference();
            this.UpTime = binaryReader.ReadSingle();
            this.FadeTime = binaryReader.ReadSingle();
            this.IconColor = binaryReader.ReadVector4();
            this.TextColor = binaryReader.ReadVector4();
            this.TextSpacing = binaryReader.ReadSingle();
            this.ItemMessageText = binaryReader.ReadTagReference();
            this.IconBitmap = binaryReader.ReadTagReference();
            this.AlternateIconText = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            this.DefaultColor = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod = binaryReader.ReadSingle();
            this.FlashDelay = binaryReader.ReadSingle();
            this.NumberOfFlashes = binaryReader.ReadInt16();
            this.HudGlobalsFlashFlags = ((FlashFlags)(binaryReader.ReadInt16()));
            this.FlashLength = binaryReader.ReadSingle();
            this.DisabledColor = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad3 = binaryReader.ReadBytes(4);
            this.HudMessages = binaryReader.ReadTagReference();
            this.DefaultColor0 = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor0 = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod0 = binaryReader.ReadSingle();
            this.FlashDelay0 = binaryReader.ReadSingle();
            this.NumberOfFlashes0 = binaryReader.ReadInt16();
            this.HudGlobalsHudGlobalsFlashFlags0 = ((HudGlobalsFlashFlags0)(binaryReader.ReadInt16()));
            this.FlashLength0 = binaryReader.ReadSingle();
            this.DisabledColor0 = binaryReader.ReadColourA1R1G1B1();
            this.UptimeTicks = binaryReader.ReadInt16();
            this.FadeTicks = binaryReader.ReadInt16();
            this.TopOffset = binaryReader.ReadSingle();
            this.BottomOffset = binaryReader.ReadSingle();
            this.LeftOffset = binaryReader.ReadSingle();
            this.RightOffset = binaryReader.ReadSingle();
            this.fieldpad4 = binaryReader.ReadBytes(32);
            this.ArrowBitmap = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(104));
            this.fieldpad5 = binaryReader.ReadBytes(80);
            this.HudScaleInMultiplayer = binaryReader.ReadSingle();
            this.fieldpad6 = binaryReader.ReadBytes(256);
            this.fieldpad7 = binaryReader.ReadBytes(16);
            this.MotionSensorRange = binaryReader.ReadSingle();
            this.MotionSensorVelocitySensitivity = binaryReader.ReadSingle();
            this.MotionSensorScaleDONTTOUCHEVER = binaryReader.ReadSingle();
            this.DefaultChapterTitleBounds = binaryReader.ReadVector2();
            this.fieldpad8 = binaryReader.ReadBytes(44);
            this.TopOffset0 = binaryReader.ReadInt16();
            this.BottomOffset0 = binaryReader.ReadInt16();
            this.LeftOffset0 = binaryReader.ReadInt16();
            this.RightOffset0 = binaryReader.ReadInt16();
            this.fieldpad9 = binaryReader.ReadBytes(32);
            this.IndicatorBitmap = binaryReader.ReadTagReference();
            this.SequenceIndex = binaryReader.ReadInt16();
            this.MultiplayerSequenceIndex = binaryReader.ReadInt16();
            this.Color = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad10 = binaryReader.ReadBytes(16);
            this.DefaultColor1 = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor1 = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod1 = binaryReader.ReadSingle();
            this.FlashDelay1 = binaryReader.ReadSingle();
            this.NumberOfFlashes1 = binaryReader.ReadInt16();
            this.HudGlobalsHudGlobalsFlashFlags1 = ((HudGlobalsFlashFlags1)(binaryReader.ReadInt16()));
            this.FlashLength1 = binaryReader.ReadSingle();
            this.DisabledColor1 = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad11 = binaryReader.ReadBytes(4);
            this.DefaultColor2 = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor2 = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod2 = binaryReader.ReadSingle();
            this.FlashDelay2 = binaryReader.ReadSingle();
            this.NumberOfFlashes2 = binaryReader.ReadInt16();
            this.HudGlobalsHudGlobalsFlashFlags2 = ((HudGlobalsFlashFlags2)(binaryReader.ReadInt16()));
            this.FlashLength2 = binaryReader.ReadSingle();
            this.DisabledColor2 = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad12 = binaryReader.ReadBytes(4);
            this.fieldpad13 = binaryReader.ReadBytes(40);
            this.CarnageReportBitmap = binaryReader.ReadTagReference();
            this.LoadingBeginText = binaryReader.ReadInt16();
            this.LoadingEndText = binaryReader.ReadInt16();
            this.CheckpointBeginText = binaryReader.ReadInt16();
            this.CheckpointEndText = binaryReader.ReadInt16();
            this.CheckpointSound = binaryReader.ReadTagReference();
            this.fieldpad14 = binaryReader.ReadBytes(96);
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.NewGlobals.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.ButtonIcons = base.ReadBlockArrayData<HudButtonIconBlock>(binaryReader, pointerQueue.Dequeue());
            this.WaypointArrows = base.ReadBlockArrayData<HudWaypointArrowBlock>(binaryReader, pointerQueue.Dequeue());
            this.NewGlobals.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.ButtonIcons);
            queueableBlamBinaryWriter.QueueWrite(this.WaypointArrows);
            this.NewGlobals.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((short)(this.Anchor)));
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.AnchorOffset);
            queueableBlamBinaryWriter.Write(this.WidthScale);
            queueableBlamBinaryWriter.Write(this.HeightScale);
            queueableBlamBinaryWriter.Write(((short)(this.HudGlobalsScalingFlags)));
            queueableBlamBinaryWriter.Write(this.fieldpad1);
            queueableBlamBinaryWriter.Write(this.fieldpad2);
            queueableBlamBinaryWriter.Write(this.Obsolete1);
            queueableBlamBinaryWriter.Write(this.Obsolete2);
            queueableBlamBinaryWriter.Write(this.UpTime);
            queueableBlamBinaryWriter.Write(this.FadeTime);
            queueableBlamBinaryWriter.Write(this.IconColor);
            queueableBlamBinaryWriter.Write(this.TextColor);
            queueableBlamBinaryWriter.Write(this.TextSpacing);
            queueableBlamBinaryWriter.Write(this.ItemMessageText);
            queueableBlamBinaryWriter.Write(this.IconBitmap);
            queueableBlamBinaryWriter.Write(this.AlternateIconText);
            queueableBlamBinaryWriter.WritePointer(this.ButtonIcons);
            queueableBlamBinaryWriter.Write(this.DefaultColor);
            queueableBlamBinaryWriter.Write(this.FlashingColor);
            queueableBlamBinaryWriter.Write(this.FlashPeriod);
            queueableBlamBinaryWriter.Write(this.FlashDelay);
            queueableBlamBinaryWriter.Write(this.NumberOfFlashes);
            queueableBlamBinaryWriter.Write(((short)(this.HudGlobalsFlashFlags)));
            queueableBlamBinaryWriter.Write(this.FlashLength);
            queueableBlamBinaryWriter.Write(this.DisabledColor);
            queueableBlamBinaryWriter.Write(this.fieldpad3);
            queueableBlamBinaryWriter.Write(this.HudMessages);
            queueableBlamBinaryWriter.Write(this.DefaultColor0);
            queueableBlamBinaryWriter.Write(this.FlashingColor0);
            queueableBlamBinaryWriter.Write(this.FlashPeriod0);
            queueableBlamBinaryWriter.Write(this.FlashDelay0);
            queueableBlamBinaryWriter.Write(this.NumberOfFlashes0);
            queueableBlamBinaryWriter.Write(((short)(this.HudGlobalsHudGlobalsFlashFlags0)));
            queueableBlamBinaryWriter.Write(this.FlashLength0);
            queueableBlamBinaryWriter.Write(this.DisabledColor0);
            queueableBlamBinaryWriter.Write(this.UptimeTicks);
            queueableBlamBinaryWriter.Write(this.FadeTicks);
            queueableBlamBinaryWriter.Write(this.TopOffset);
            queueableBlamBinaryWriter.Write(this.BottomOffset);
            queueableBlamBinaryWriter.Write(this.LeftOffset);
            queueableBlamBinaryWriter.Write(this.RightOffset);
            queueableBlamBinaryWriter.Write(this.fieldpad4);
            queueableBlamBinaryWriter.Write(this.ArrowBitmap);
            queueableBlamBinaryWriter.WritePointer(this.WaypointArrows);
            queueableBlamBinaryWriter.Write(this.fieldpad5);
            queueableBlamBinaryWriter.Write(this.HudScaleInMultiplayer);
            queueableBlamBinaryWriter.Write(this.fieldpad6);
            queueableBlamBinaryWriter.Write(this.fieldpad7);
            queueableBlamBinaryWriter.Write(this.MotionSensorRange);
            queueableBlamBinaryWriter.Write(this.MotionSensorVelocitySensitivity);
            queueableBlamBinaryWriter.Write(this.MotionSensorScaleDONTTOUCHEVER);
            queueableBlamBinaryWriter.Write(this.DefaultChapterTitleBounds);
            queueableBlamBinaryWriter.Write(this.fieldpad8);
            queueableBlamBinaryWriter.Write(this.TopOffset0);
            queueableBlamBinaryWriter.Write(this.BottomOffset0);
            queueableBlamBinaryWriter.Write(this.LeftOffset0);
            queueableBlamBinaryWriter.Write(this.RightOffset0);
            queueableBlamBinaryWriter.Write(this.fieldpad9);
            queueableBlamBinaryWriter.Write(this.IndicatorBitmap);
            queueableBlamBinaryWriter.Write(this.SequenceIndex);
            queueableBlamBinaryWriter.Write(this.MultiplayerSequenceIndex);
            queueableBlamBinaryWriter.Write(this.Color);
            queueableBlamBinaryWriter.Write(this.fieldpad10);
            queueableBlamBinaryWriter.Write(this.DefaultColor1);
            queueableBlamBinaryWriter.Write(this.FlashingColor1);
            queueableBlamBinaryWriter.Write(this.FlashPeriod1);
            queueableBlamBinaryWriter.Write(this.FlashDelay1);
            queueableBlamBinaryWriter.Write(this.NumberOfFlashes1);
            queueableBlamBinaryWriter.Write(((short)(this.HudGlobalsHudGlobalsFlashFlags1)));
            queueableBlamBinaryWriter.Write(this.FlashLength1);
            queueableBlamBinaryWriter.Write(this.DisabledColor1);
            queueableBlamBinaryWriter.Write(this.fieldpad11);
            queueableBlamBinaryWriter.Write(this.DefaultColor2);
            queueableBlamBinaryWriter.Write(this.FlashingColor2);
            queueableBlamBinaryWriter.Write(this.FlashPeriod2);
            queueableBlamBinaryWriter.Write(this.FlashDelay2);
            queueableBlamBinaryWriter.Write(this.NumberOfFlashes2);
            queueableBlamBinaryWriter.Write(((short)(this.HudGlobalsHudGlobalsFlashFlags2)));
            queueableBlamBinaryWriter.Write(this.FlashLength2);
            queueableBlamBinaryWriter.Write(this.DisabledColor2);
            queueableBlamBinaryWriter.Write(this.fieldpad12);
            queueableBlamBinaryWriter.Write(this.fieldpad13);
            queueableBlamBinaryWriter.Write(this.CarnageReportBitmap);
            queueableBlamBinaryWriter.Write(this.LoadingBeginText);
            queueableBlamBinaryWriter.Write(this.LoadingEndText);
            queueableBlamBinaryWriter.Write(this.CheckpointBeginText);
            queueableBlamBinaryWriter.Write(this.CheckpointEndText);
            queueableBlamBinaryWriter.Write(this.CheckpointSound);
            queueableBlamBinaryWriter.Write(this.fieldpad14);
            this.NewGlobals.Write_(queueableBlamBinaryWriter);
        }
        public enum AnchorEnum : short
        {
            TopLeft = 0,
            TopRight = 1,
            BottomLeft = 2,
            BottomRight = 3,
            Center = 4,
            Crosshair = 5,
        }
        [System.FlagsAttribute()]
        public enum ScalingFlags : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum FlashFlags : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum HudGlobalsFlashFlags0 : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum HudGlobalsFlashFlags1 : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum HudGlobalsFlashFlags2 : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Hudg = ((TagClass)("hudg"));
    }
}
