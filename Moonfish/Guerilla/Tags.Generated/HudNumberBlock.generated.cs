//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("hud#")]
    [TagBlockOriginalNameAttribute("hud_number_block")]
    public partial class HudNumberBlock : GuerillaBlock, IWriteQueueable
    {
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference DigitsBitmap;
        public byte BitmapDigitWidth;
        public byte ScreenDigitWidth;
        public byte XOffset;
        public byte YOffset;
        public byte DecimalPointWidth;
        public byte ColonWidth;
        private byte[] fieldpad = new byte[2];
        private byte[] fieldpad0 = new byte[76];
        public override int SerializedSize
        {
            get
            {
                return 92;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.DigitsBitmap = binaryReader.ReadTagReference();
            this.BitmapDigitWidth = binaryReader.ReadByte();
            this.ScreenDigitWidth = binaryReader.ReadByte();
            this.XOffset = binaryReader.ReadByte();
            this.YOffset = binaryReader.ReadByte();
            this.DecimalPointWidth = binaryReader.ReadByte();
            this.ColonWidth = binaryReader.ReadByte();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.fieldpad0 = binaryReader.ReadBytes(76);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.DigitsBitmap);
            queueableBinaryWriter.Write(this.BitmapDigitWidth);
            queueableBinaryWriter.Write(this.ScreenDigitWidth);
            queueableBinaryWriter.Write(this.XOffset);
            queueableBinaryWriter.Write(this.YOffset);
            queueableBinaryWriter.Write(this.DecimalPointWidth);
            queueableBinaryWriter.Write(this.ColonWidth);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.fieldpad0);
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Hud = ((TagClass)("hud#"));
    }
}
