//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class HudTextWidgets : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.StringIdent Name;
        public HudWidgetInputsStructBlock HudWidgetInputsStruct = new HudWidgetInputsStructBlock();
        public HudWidgetStateDefinitionStructBlock HudWidgetStateDefinitionStruct = new HudWidgetStateDefinitionStructBlock();
        public AnchorEnum Anchor;
        public Flags HudTextWidgetsFlags;
        [Moonfish.Tags.TagReferenceAttribute("shad")]
        public Moonfish.Tags.TagReference Shader;
        public Moonfish.Tags.StringIdent String;
        public JustificationEnum Justification;
        private byte[] fieldpad = new byte[2];
        public FullscreenFontIndexEnum FullscreenFontIndex;
        public HalfscreenFontIndexEnum HalfscreenFontIndex;
        public QuarterscreenFontIndexEnum QuarterscreenFontIndex;
        private byte[] fieldpad0 = new byte[1];
        public float FullscreenScale;
        public float HalfscreenScale;
        public float QuarterscreenScale;
        public Moonfish.Tags.Point FullscreenOffset;
        public Moonfish.Tags.Point HalfscreenOffset;
        public Moonfish.Tags.Point QuarterscreenOffset;
        public HudWidgetEffectBlock[] Effect = new HudWidgetEffectBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 84;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadStringIdent();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.HudWidgetInputsStruct.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.HudWidgetStateDefinitionStruct.ReadFields(binaryReader)));
            this.Anchor = ((AnchorEnum)(binaryReader.ReadInt16()));
            this.HudTextWidgetsFlags = ((Flags)(binaryReader.ReadInt16()));
            this.Shader = binaryReader.ReadTagReference();
            this.String = binaryReader.ReadStringIdent();
            this.Justification = ((JustificationEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.FullscreenFontIndex = ((FullscreenFontIndexEnum)(binaryReader.ReadByte()));
            this.HalfscreenFontIndex = ((HalfscreenFontIndexEnum)(binaryReader.ReadByte()));
            this.QuarterscreenFontIndex = ((QuarterscreenFontIndexEnum)(binaryReader.ReadByte()));
            this.fieldpad0 = binaryReader.ReadBytes(1);
            this.FullscreenScale = binaryReader.ReadSingle();
            this.HalfscreenScale = binaryReader.ReadSingle();
            this.QuarterscreenScale = binaryReader.ReadSingle();
            this.FullscreenOffset = binaryReader.ReadPoint();
            this.HalfscreenOffset = binaryReader.ReadPoint();
            this.QuarterscreenOffset = binaryReader.ReadPoint();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(104));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.HudWidgetInputsStruct.ReadInstances(binaryReader, pointerQueue);
            this.HudWidgetStateDefinitionStruct.ReadInstances(binaryReader, pointerQueue);
            this.Effect = base.ReadBlockArrayData<HudWidgetEffectBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            this.HudWidgetInputsStruct.QueueWrites(queueableBlamBinaryWriter);
            this.HudWidgetStateDefinitionStruct.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.Effect);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.Name);
            this.HudWidgetInputsStruct.Write_(queueableBlamBinaryWriter);
            this.HudWidgetStateDefinitionStruct.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((short)(this.Anchor)));
            queueableBlamBinaryWriter.Write(((short)(this.HudTextWidgetsFlags)));
            queueableBlamBinaryWriter.Write(this.Shader);
            queueableBlamBinaryWriter.Write(this.String);
            queueableBlamBinaryWriter.Write(((short)(this.Justification)));
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(((byte)(this.FullscreenFontIndex)));
            queueableBlamBinaryWriter.Write(((byte)(this.HalfscreenFontIndex)));
            queueableBlamBinaryWriter.Write(((byte)(this.QuarterscreenFontIndex)));
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.FullscreenScale);
            queueableBlamBinaryWriter.Write(this.HalfscreenScale);
            queueableBlamBinaryWriter.Write(this.QuarterscreenScale);
            queueableBlamBinaryWriter.Write(this.FullscreenOffset);
            queueableBlamBinaryWriter.Write(this.HalfscreenOffset);
            queueableBlamBinaryWriter.Write(this.QuarterscreenOffset);
            queueableBlamBinaryWriter.WritePointer(this.Effect);
        }
        public enum AnchorEnum : short
        {
            HealthAndShield = 0,
            WeaponHud = 1,
            MotionSensor = 2,
            Scoreboard = 3,
            Crosshair = 4,
            LockonTarget = 5,
        }
        /// <summary>
        /// string is a number: treats the inputted string id as a function name, not a string name
        ///
        ///force 2-digit number: when used in combination with above, forces output to be a 2-digit numberwith leading zeros if necessary
        ///
        ///force 3-digit number: same as above, but with 3 digits instead of 2
        /// </summary>
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            StringIsANumber = 1,
            Force2digitNumber = 2,
            Force3digitNumber = 4,
            TalkingPlayerHack = 8,
        }
        public enum JustificationEnum : short
        {
            Left = 0,
            Center = 1,
            Right = 2,
        }
        public enum FullscreenFontIndexEnum : byte
        {
            Defualt = 0,
            NumberFont = 1,
        }
        public enum HalfscreenFontIndexEnum : byte
        {
            Defualt = 0,
            NumberFont = 1,
        }
        public enum QuarterscreenFontIndexEnum : byte
        {
            Defualt = 0,
            NumberFont = 1,
        }
    }
}
