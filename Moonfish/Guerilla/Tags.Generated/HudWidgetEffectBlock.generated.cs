//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("hud_widget_effect_block")]
    public partial class HudWidgetEffectBlock : GuerillaBlock, IWriteDeferrable
    {
        public Flags HudWidgetEffectFlags;
        private byte[] fieldpad = new byte[2];
        public HudWidgetEffectFunctionStructBlock YourMom = new HudWidgetEffectFunctionStructBlock();
        public HudWidgetEffectFunctionStructBlock YourMom0 = new HudWidgetEffectFunctionStructBlock();
        public HudWidgetEffectFunctionStructBlock YourMom1 = new HudWidgetEffectFunctionStructBlock();
        public HudWidgetEffectFunctionStructBlock YourMom2 = new HudWidgetEffectFunctionStructBlock();
        public HudWidgetEffectFunctionStructBlock YourMom3 = new HudWidgetEffectFunctionStructBlock();
        public override int SerializedSize
        {
            get
            {
                return 104;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.HudWidgetEffectFlags = ((Flags)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.YourMom.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.YourMom0.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.YourMom1.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.YourMom2.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.YourMom3.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.YourMom.ReadInstances(binaryReader, pointerQueue);
            this.YourMom0.ReadInstances(binaryReader, pointerQueue);
            this.YourMom1.ReadInstances(binaryReader, pointerQueue);
            this.YourMom2.ReadInstances(binaryReader, pointerQueue);
            this.YourMom3.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            this.YourMom.DeferReferences(writer);
            this.YourMom0.DeferReferences(writer);
            this.YourMom1.DeferReferences(writer);
            this.YourMom2.DeferReferences(writer);
            this.YourMom3.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((short)(this.HudWidgetEffectFlags)));
            writer.Write(this.fieldpad);
            this.YourMom.Write(writer);
            this.YourMom0.Write(writer);
            this.YourMom1.Write(writer);
            this.YourMom2.Write(writer);
            this.YourMom3.Write(writer);
        }
        /// <summary>
        /// allow the scaling, rotation, and offsetting of widgets
        /// </summary>
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            ApplyScale = 1,
            ApplyTheta = 2,
            ApplyOffset = 4,
        }
    }
}
