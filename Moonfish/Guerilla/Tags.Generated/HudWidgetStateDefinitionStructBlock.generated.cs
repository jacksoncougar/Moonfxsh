//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("hud_widget_state_definition_struct_block")]
    public partial class HudWidgetStateDefinitionStructBlock : GuerillaBlock, IWriteQueueable
    {
        public YUnitFlags HudWidgetStateDefinitionStructYUnitFlags;
        public YExtraFlags HudWidgetStateDefinitionStructYExtraFlags;
        public YWeaponFlags HudWidgetStateDefinitionStructYWeaponFlags;
        public YGameEngineStateFlags HudWidgetStateDefinitionStructYGameEngineStateFlags;
        public NUnitFlags HudWidgetStateDefinitionStructNUnitFlags;
        public NExtraFlags HudWidgetStateDefinitionStructNExtraFlags;
        public NWeaponFlags HudWidgetStateDefinitionStructNWeaponFlags;
        public NGameEngineStateFlags HudWidgetStateDefinitionStructNGameEngineStateFlags;
        public byte AgeCutoff;
        public byte ClipCutoff;
        public byte TotalCutoff;
        private byte[] fieldpad = new byte[1];
        public override int SerializedSize
        {
            get
            {
                return 20;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.HudWidgetStateDefinitionStructYUnitFlags = ((YUnitFlags)(binaryReader.ReadInt16()));
            this.HudWidgetStateDefinitionStructYExtraFlags = ((YExtraFlags)(binaryReader.ReadInt16()));
            this.HudWidgetStateDefinitionStructYWeaponFlags = ((YWeaponFlags)(binaryReader.ReadInt16()));
            this.HudWidgetStateDefinitionStructYGameEngineStateFlags = ((YGameEngineStateFlags)(binaryReader.ReadInt16()));
            this.HudWidgetStateDefinitionStructNUnitFlags = ((NUnitFlags)(binaryReader.ReadInt16()));
            this.HudWidgetStateDefinitionStructNExtraFlags = ((NExtraFlags)(binaryReader.ReadInt16()));
            this.HudWidgetStateDefinitionStructNWeaponFlags = ((NWeaponFlags)(binaryReader.ReadInt16()));
            this.HudWidgetStateDefinitionStructNGameEngineStateFlags = ((NGameEngineStateFlags)(binaryReader.ReadInt16()));
            this.AgeCutoff = binaryReader.ReadByte();
            this.ClipCutoff = binaryReader.ReadByte();
            this.TotalCutoff = binaryReader.ReadByte();
            this.fieldpad = binaryReader.ReadBytes(1);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.HudWidgetStateDefinitionStructYUnitFlags)));
            queueableBinaryWriter.Write(((short)(this.HudWidgetStateDefinitionStructYExtraFlags)));
            queueableBinaryWriter.Write(((short)(this.HudWidgetStateDefinitionStructYWeaponFlags)));
            queueableBinaryWriter.Write(((short)(this.HudWidgetStateDefinitionStructYGameEngineStateFlags)));
            queueableBinaryWriter.Write(((short)(this.HudWidgetStateDefinitionStructNUnitFlags)));
            queueableBinaryWriter.Write(((short)(this.HudWidgetStateDefinitionStructNExtraFlags)));
            queueableBinaryWriter.Write(((short)(this.HudWidgetStateDefinitionStructNWeaponFlags)));
            queueableBinaryWriter.Write(((short)(this.HudWidgetStateDefinitionStructNGameEngineStateFlags)));
            queueableBinaryWriter.Write(this.AgeCutoff);
            queueableBinaryWriter.Write(this.ClipCutoff);
            queueableBinaryWriter.Write(this.TotalCutoff);
            queueableBinaryWriter.Write(this.fieldpad);
        }
        /// <summary>
        /// this section is split up into YES and NO flags.
        ///a widget will draw if any of it's YES flags are true,
        ///but it will NOT draw if any of it's NO flags are true.
        /// </summary>
        [System.FlagsAttribute()]
        public enum YUnitFlags : short
        {
            None = 0,
            Default = 1,
            GrenadeTypeIsNONE = 2,
            GrenadeTypeIsFrag = 4,
            GrenadeTypeIsPlasma = 8,
            UnitIsSingleWielding = 16,
            UnitIsDualWielding = 32,
            UnitIsUnzoomed = 64,
            UnitIsZoomedlevel1 = 128,
            UnitIsZoomedlevel2 = 256,
            GrenadesDisabled = 512,
            BinocularsEnabled = 1024,
            MotionSensorEnabled = 2048,
            ShieldEnabled = 4096,
            Dervish = 8192,
        }
        [System.FlagsAttribute()]
        public enum YExtraFlags : short
        {
            None = 0,
            Autoaimfriendly = 1,
            Autoaimplasma = 2,
            Autoaimheadshot = 4,
            Autoaimvulnerable = 8,
            Autoaiminvincible = 16,
        }
        [System.FlagsAttribute()]
        public enum YWeaponFlags : short
        {
            None = 0,
            PrimaryWeapon = 1,
            SecondaryWeapon = 2,
            BackpackWeapon = 4,
            AgeBelowCutoff = 8,
            ClipBelowCutoff = 16,
            TotalBelowCutoff = 32,
            Overheated = 64,
            OutOfAmmo = 128,
            LockTargetAvailable = 256,
            Locking = 512,
            Locked = 1024,
        }
        [System.FlagsAttribute()]
        public enum YGameEngineStateFlags : short
        {
            None = 0,
            CampaignSolo = 1,
            CampaignCoop = 2,
            Freeforall = 4,
            TeamGame = 8,
            UserLeading = 16,
            UserNotLeading = 32,
            TimedGame = 64,
            UntimedGame = 128,
            OtherScoreValid = 256,
            OtherScoreInvalid = 512,
            PlayerIsArmingBomb = 1024,
            PlayerTalking = 2048,
        }
        [System.FlagsAttribute()]
        public enum NUnitFlags : short
        {
            None = 0,
            Default = 1,
            GrenadeTypeIsNONE = 2,
            GrenadeTypeIsFrag = 4,
            GrenadeTypeIsPlasma = 8,
            UnitIsSingleWielding = 16,
            UnitIsDualWielding = 32,
            UnitIsUnzoomed = 64,
            UnitIsZoomedlevel1 = 128,
            UnitIsZoomedlevel2 = 256,
            GrenadesDisabled = 512,
            BinocularsEnabled = 1024,
            MotionSensorEnabled = 2048,
            ShieldEnabled = 4096,
            Dervish = 8192,
        }
        [System.FlagsAttribute()]
        public enum NExtraFlags : short
        {
            None = 0,
            Autoaimfriendly = 1,
            Autoaimplasma = 2,
            Autoaimheadshot = 4,
            Autoaimvulnerable = 8,
            Autoaiminvincible = 16,
        }
        [System.FlagsAttribute()]
        public enum NWeaponFlags : short
        {
            None = 0,
            PrimaryWeapon = 1,
            SecondaryWeapon = 2,
            BackpackWeapon = 4,
            AgeBelowCutoff = 8,
            ClipBelowCutoff = 16,
            TotalBelowCutoff = 32,
            Overheated = 64,
            OutOfAmmo = 128,
            LockTargetAvailable = 256,
            Locking = 512,
            Locked = 1024,
        }
        [System.FlagsAttribute()]
        public enum NGameEngineStateFlags : short
        {
            None = 0,
            CampaignSolo = 1,
            CampaignCoop = 2,
            Freeforall = 4,
            TeamGame = 8,
            UserLeading = 16,
            UserNotLeading = 32,
            TimedGame = 64,
            UntimedGame = 128,
            OtherScoreValid = 256,
            OtherScoreInvalid = 512,
            PlayerIsArmingBomb = 1024,
            PlayerTalking = 2048,
        }
    }
}
