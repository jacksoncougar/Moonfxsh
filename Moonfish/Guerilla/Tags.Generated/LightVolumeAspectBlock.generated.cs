//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class LightVolumeAspectBlock : GuerillaBlock, IWriteQueueable
    {
        public ScalarFunctionStructBlock AlongAxis = new ScalarFunctionStructBlock();
        public ScalarFunctionStructBlock AwayFromAxis = new ScalarFunctionStructBlock();
        /// <summary>
        /// When the light volume is viewed directly towards (parallel) or away from the camera, the scale factors above are interpolated towards this constant value. The threshold angle controls when the light volume is considered to be 100% parallel for these computations. The exponent controls how quickly the transition from using the perpendicular scale factors to using the parallel scale factor happens, e.g.:
        /// </summary>
        public float ParallelScale;
        public float ParallelThresholdAngle;
        public float ParallelExponent;
        public override int SerializedSize
        {
            get
            {
                return 28;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.AlongAxis.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.AwayFromAxis.ReadFields(binaryReader)));
            this.ParallelScale = binaryReader.ReadSingle();
            this.ParallelThresholdAngle = binaryReader.ReadSingle();
            this.ParallelExponent = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.AlongAxis.ReadInstances(binaryReader, pointerQueue);
            this.AwayFromAxis.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            this.AlongAxis.QueueWrites(queueableBinaryWriter);
            this.AwayFromAxis.QueueWrites(queueableBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            this.AlongAxis.Write_(queueableBinaryWriter);
            this.AwayFromAxis.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.ParallelScale);
            queueableBinaryWriter.Write(this.ParallelThresholdAngle);
            queueableBinaryWriter.Write(this.ParallelExponent);
        }
    }
}
