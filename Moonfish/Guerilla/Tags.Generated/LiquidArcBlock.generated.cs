//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("liquid_arc_block")]
    public partial class LiquidArcBlock : GuerillaBlock, IWriteQueueable
    {
        public Flags LiquidArcFlags;
        public SpriteCountEnum SpriteCount;
        public float NaturalLength;
        public short Instances;
        private byte[] fieldpad = new byte[2];
        public float InstanceSpreadAngle;
        public float InstanceRotationPeriod;
        private byte[] fieldpad0 = new byte[8];
        [Moonfish.Tags.TagReferenceAttribute("foot")]
        public Moonfish.Tags.TagReference MaterialEffects;
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference Bitmap;
        private byte[] fieldpad1 = new byte[8];
        public ScalarFunctionStructBlock HorizontalRange = new ScalarFunctionStructBlock();
        public ScalarFunctionStructBlock VerticalRange = new ScalarFunctionStructBlock();
        public float VerticalNegativeScale;
        public ScalarFunctionStructBlock Roughness = new ScalarFunctionStructBlock();
        private byte[] fieldpad2 = new byte[64];
        /// <summary>
        /// 4 sprites is 3 octaves
        ///8 sprites is 4 octaves
        ///16 sprites is 5 octaves
        ///32 sprites is 6 octaves
        ///64 sprites is 7 octaves
        ///128 sprites is 8 octaves
        ///256 sprites is 9 octaves, etc.
        /// </summary>
        public float Octave1Frequency;
        public float Octave2Frequency;
        public float Octave3Frequency;
        public float Octave4Frequency;
        public float Octave5Frequency;
        public float Octave6Frequency;
        public float Octave7Frequency;
        public float Octave8Frequency;
        public float Octave9Frequency;
        private byte[] fieldpad3 = new byte[28];
        public OctaveFlags LiquidArcOctaveFlags;
        private byte[] fieldpad4 = new byte[2];
        public LiquidCoreBlock[] Cores = new LiquidCoreBlock[0];
        public ScalarFunctionStructBlock Rangescale = new ScalarFunctionStructBlock();
        public ScalarFunctionStructBlock Brightnessscale = new ScalarFunctionStructBlock();
        public override int SerializedSize
        {
            get
            {
                return 236;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.LiquidArcFlags = ((Flags)(binaryReader.ReadInt16()));
            this.SpriteCount = ((SpriteCountEnum)(binaryReader.ReadInt16()));
            this.NaturalLength = binaryReader.ReadSingle();
            this.Instances = binaryReader.ReadInt16();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.InstanceSpreadAngle = binaryReader.ReadSingle();
            this.InstanceRotationPeriod = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(8);
            this.MaterialEffects = binaryReader.ReadTagReference();
            this.Bitmap = binaryReader.ReadTagReference();
            this.fieldpad1 = binaryReader.ReadBytes(8);
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.HorizontalRange.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.VerticalRange.ReadFields(binaryReader)));
            this.VerticalNegativeScale = binaryReader.ReadSingle();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Roughness.ReadFields(binaryReader)));
            this.fieldpad2 = binaryReader.ReadBytes(64);
            this.Octave1Frequency = binaryReader.ReadSingle();
            this.Octave2Frequency = binaryReader.ReadSingle();
            this.Octave3Frequency = binaryReader.ReadSingle();
            this.Octave4Frequency = binaryReader.ReadSingle();
            this.Octave5Frequency = binaryReader.ReadSingle();
            this.Octave6Frequency = binaryReader.ReadSingle();
            this.Octave7Frequency = binaryReader.ReadSingle();
            this.Octave8Frequency = binaryReader.ReadSingle();
            this.Octave9Frequency = binaryReader.ReadSingle();
            this.fieldpad3 = binaryReader.ReadBytes(28);
            this.LiquidArcOctaveFlags = ((OctaveFlags)(binaryReader.ReadInt16()));
            this.fieldpad4 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Rangescale.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Brightnessscale.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.HorizontalRange.ReadInstances(binaryReader, pointerQueue);
            this.VerticalRange.ReadInstances(binaryReader, pointerQueue);
            this.Roughness.ReadInstances(binaryReader, pointerQueue);
            this.Cores = base.ReadBlockArrayData<LiquidCoreBlock>(binaryReader, pointerQueue.Dequeue());
            this.Rangescale.ReadInstances(binaryReader, pointerQueue);
            this.Brightnessscale.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
            this.HorizontalRange.Defer(queueableBinaryWriter);
            this.VerticalRange.Defer(queueableBinaryWriter);
            this.Roughness.Defer(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.Cores);
            this.Rangescale.Defer(queueableBinaryWriter);
            this.Brightnessscale.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.LiquidArcFlags)));
            queueableBinaryWriter.Write(((short)(this.SpriteCount)));
            queueableBinaryWriter.Write(this.NaturalLength);
            queueableBinaryWriter.Write(this.Instances);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.InstanceSpreadAngle);
            queueableBinaryWriter.Write(this.InstanceRotationPeriod);
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.MaterialEffects);
            queueableBinaryWriter.Write(this.Bitmap);
            queueableBinaryWriter.Write(this.fieldpad1);
            this.HorizontalRange.Write(queueableBinaryWriter);
            this.VerticalRange.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.VerticalNegativeScale);
            this.Roughness.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.fieldpad2);
            queueableBinaryWriter.Write(this.Octave1Frequency);
            queueableBinaryWriter.Write(this.Octave2Frequency);
            queueableBinaryWriter.Write(this.Octave3Frequency);
            queueableBinaryWriter.Write(this.Octave4Frequency);
            queueableBinaryWriter.Write(this.Octave5Frequency);
            queueableBinaryWriter.Write(this.Octave6Frequency);
            queueableBinaryWriter.Write(this.Octave7Frequency);
            queueableBinaryWriter.Write(this.Octave8Frequency);
            queueableBinaryWriter.Write(this.Octave9Frequency);
            queueableBinaryWriter.Write(this.fieldpad3);
            queueableBinaryWriter.Write(((short)(this.LiquidArcOctaveFlags)));
            queueableBinaryWriter.Write(this.fieldpad4);
            queueableBinaryWriter.WritePointer(this.Cores);
            this.Rangescale.Write(queueableBinaryWriter);
            this.Brightnessscale.Write(queueableBinaryWriter);
        }
        /// <summary>
        /// Note that if the type is not STANDARD, then the 'collide_with_stuff' and material effects will not have any effect. In addition, the 'natural_length' will not have an effect except as a means to compute the collision fraction.
        /// </summary>
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            BasisMarkerrelative = 1,
            SpreadByExternalInput = 2,
            CollideWithStuff = 4,
            NoPerspectiveMidpoints = 8,
        }
        public enum SpriteCountEnum : short
        {
            _4Sprites = 0,
            _8Sprites = 1,
            _16Sprites = 2,
            _32Sprites = 3,
            _64Sprites = 4,
            _128Sprites = 5,
            _256Sprites = 6,
        }
        [System.FlagsAttribute()]
        public enum OctaveFlags : short
        {
            None = 0,
            Octave1 = 1,
            Octave2 = 2,
            Octave3 = 4,
            Octave4 = 8,
            Octave5 = 16,
            Octave6 = 32,
            Octave7 = 64,
            Octave8 = 128,
            Octave9 = 256,
        }
    }
}
