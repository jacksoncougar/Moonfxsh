//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("liquid_core_block")]
    public partial class LiquidCoreBlock : GuerillaBlock, IWriteQueueable
    {
        private byte[] fieldpad = new byte[12];
        public short BitmapIndex;
        private byte[] fieldpad0 = new byte[2];
        public ScalarFunctionStructBlock Thickness = new ScalarFunctionStructBlock();
        public ColorFunctionStructBlock Color = new ColorFunctionStructBlock();
        public ScalarFunctionStructBlock Brightnesstime = new ScalarFunctionStructBlock();
        public ScalarFunctionStructBlock Brightnessfacing = new ScalarFunctionStructBlock();
        public ScalarFunctionStructBlock AlongaxisScale = new ScalarFunctionStructBlock();
        public override int SerializedSize
        {
            get
            {
                return 56;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.fieldpad = binaryReader.ReadBytes(12);
            this.BitmapIndex = binaryReader.ReadInt16();
            this.fieldpad0 = binaryReader.ReadBytes(2);
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Thickness.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Color.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Brightnesstime.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Brightnessfacing.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.AlongaxisScale.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Thickness.ReadInstances(binaryReader, pointerQueue);
            this.Color.ReadInstances(binaryReader, pointerQueue);
            this.Brightnesstime.ReadInstances(binaryReader, pointerQueue);
            this.Brightnessfacing.ReadInstances(binaryReader, pointerQueue);
            this.AlongaxisScale.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
            this.Thickness.Defer(queueableBinaryWriter);
            this.Color.Defer(queueableBinaryWriter);
            this.Brightnesstime.Defer(queueableBinaryWriter);
            this.Brightnessfacing.Defer(queueableBinaryWriter);
            this.AlongaxisScale.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.BitmapIndex);
            queueableBinaryWriter.Write(this.fieldpad0);
            this.Thickness.Write(queueableBinaryWriter);
            this.Color.Write(queueableBinaryWriter);
            this.Brightnesstime.Write(queueableBinaryWriter);
            this.Brightnessfacing.Write(queueableBinaryWriter);
            this.AlongaxisScale.Write(queueableBinaryWriter);
        }
    }
}
