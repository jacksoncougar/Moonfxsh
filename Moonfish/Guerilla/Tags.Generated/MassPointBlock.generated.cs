//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("mass_point_block")]
    public partial class MassPointBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.String32 Name;
        public Moonfish.Tags.ShortBlockIndex1 PoweredMassPoint;
        public short ModelNode;
        public Flags MassPointFlags;
        public float RelativeMass;
        public float Mass;
        public float RelativeDensity;
        public float Density;
        public OpenTK.Vector3 Position;
        public OpenTK.Vector3 Forward;
        public OpenTK.Vector3 Up;
        public FrictionTypeEnum FrictionType;
        private byte[] fieldpad = new byte[2];
        public float FrictionParallelScale;
        public float FrictionPerpendicularScale;
        public float Radius;
        private byte[] fieldpad0 = new byte[20];
        public override int SerializedSize
        {
            get
            {
                return 128;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadString32();
            this.PoweredMassPoint = binaryReader.ReadShortBlockIndex1();
            this.ModelNode = binaryReader.ReadInt16();
            this.MassPointFlags = ((Flags)(binaryReader.ReadInt32()));
            this.RelativeMass = binaryReader.ReadSingle();
            this.Mass = binaryReader.ReadSingle();
            this.RelativeDensity = binaryReader.ReadSingle();
            this.Density = binaryReader.ReadSingle();
            this.Position = binaryReader.ReadVector3();
            this.Forward = binaryReader.ReadVector3();
            this.Up = binaryReader.ReadVector3();
            this.FrictionType = ((FrictionTypeEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.FrictionParallelScale = binaryReader.ReadSingle();
            this.FrictionPerpendicularScale = binaryReader.ReadSingle();
            this.Radius = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(20);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Name);
            writer.Write(this.PoweredMassPoint);
            writer.Write(this.ModelNode);
            writer.Write(((int)(this.MassPointFlags)));
            writer.Write(this.RelativeMass);
            writer.Write(this.Mass);
            writer.Write(this.RelativeDensity);
            writer.Write(this.Density);
            writer.Write(this.Position);
            writer.Write(this.Forward);
            writer.Write(this.Up);
            writer.Write(((short)(this.FrictionType)));
            writer.Write(this.fieldpad);
            writer.Write(this.FrictionParallelScale);
            writer.Write(this.FrictionPerpendicularScale);
            writer.Write(this.Radius);
            writer.Write(this.fieldpad0);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            Metallic = 1,
        }
        public enum FrictionTypeEnum : short
        {
            Point = 0,
            Forward = 1,
            Left = 2,
            Up = 3,
        }
    }
}
