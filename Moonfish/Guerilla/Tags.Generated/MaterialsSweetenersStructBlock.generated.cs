//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class MaterialsSweetenersStructBlock : GuerillaBlock, IWriteQueueable
    {
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference SoundSweetener;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference SoundSweetener0;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference SoundSweetener1;
        [Moonfish.Tags.TagReferenceAttribute("lsnd")]
        public Moonfish.Tags.TagReference SoundSweetenerRolling;
        [Moonfish.Tags.TagReferenceAttribute("lsnd")]
        public Moonfish.Tags.TagReference SoundSweetenerGrinding;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference SoundSweetener2;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference TagReference;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference EffectSweetener;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference EffectSweetener0;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference EffectSweetener1;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference EffectSweetenerRolling;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference EffectSweetenerGrinding;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference EffectSweetener2;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference TagReference0;
        public SweetenerInheritanceFlags MaterialsSweetenersStructSweetenerInheritanceFlags;
        public override int SerializedSize
        {
            get
            {
                return 116;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.SoundSweetener = binaryReader.ReadTagReference();
            this.SoundSweetener0 = binaryReader.ReadTagReference();
            this.SoundSweetener1 = binaryReader.ReadTagReference();
            this.SoundSweetenerRolling = binaryReader.ReadTagReference();
            this.SoundSweetenerGrinding = binaryReader.ReadTagReference();
            this.SoundSweetener2 = binaryReader.ReadTagReference();
            this.TagReference = binaryReader.ReadTagReference();
            this.EffectSweetener = binaryReader.ReadTagReference();
            this.EffectSweetener0 = binaryReader.ReadTagReference();
            this.EffectSweetener1 = binaryReader.ReadTagReference();
            this.EffectSweetenerRolling = binaryReader.ReadTagReference();
            this.EffectSweetenerGrinding = binaryReader.ReadTagReference();
            this.EffectSweetener2 = binaryReader.ReadTagReference();
            this.TagReference0 = binaryReader.ReadTagReference();
            this.MaterialsSweetenersStructSweetenerInheritanceFlags = ((SweetenerInheritanceFlags)(binaryReader.ReadInt32()));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.SoundSweetener);
            queueableBlamBinaryWriter.Write(this.SoundSweetener0);
            queueableBlamBinaryWriter.Write(this.SoundSweetener1);
            queueableBlamBinaryWriter.Write(this.SoundSweetenerRolling);
            queueableBlamBinaryWriter.Write(this.SoundSweetenerGrinding);
            queueableBlamBinaryWriter.Write(this.SoundSweetener2);
            queueableBlamBinaryWriter.Write(this.TagReference);
            queueableBlamBinaryWriter.Write(this.EffectSweetener);
            queueableBlamBinaryWriter.Write(this.EffectSweetener0);
            queueableBlamBinaryWriter.Write(this.EffectSweetener1);
            queueableBlamBinaryWriter.Write(this.EffectSweetenerRolling);
            queueableBlamBinaryWriter.Write(this.EffectSweetenerGrinding);
            queueableBlamBinaryWriter.Write(this.EffectSweetener2);
            queueableBlamBinaryWriter.Write(this.TagReference0);
            queueableBlamBinaryWriter.Write(((int)(this.MaterialsSweetenersStructSweetenerInheritanceFlags)));
        }
        /// <summary>
        /// when a sweetener inheritance flag is set the sound\effect is not inherited from the parent material.  If you leave the sweetener blank and set the flag than no effect\sound will play
        /// </summary>
        [System.FlagsAttribute()]
        public enum SweetenerInheritanceFlags : int
        {
            None = 0,
            SoundSmall = 1,
            SoundMedium = 2,
            SoundLarge = 4,
            SoundRolling = 8,
            SoundGrinding = 16,
            SoundMelee = 32,
            EffectSmall = 128,
            EffectMedium = 256,
            EffectLarge = 512,
            EffectRolling = 1024,
            EffectGrinding = 2048,
            EffectMelee = 4096,
        }
    }
}
