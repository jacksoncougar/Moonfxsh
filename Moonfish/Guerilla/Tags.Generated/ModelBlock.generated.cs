//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("hlmt")]
    [TagBlockOriginalNameAttribute("model_block")]
    public partial class ModelBlock : GuerillaBlock, IWriteQueueable
    {
        [Moonfish.Tags.TagReferenceAttribute("mode")]
        public Moonfish.Tags.TagReference RenderModel;
        [Moonfish.Tags.TagReferenceAttribute("coll")]
        public Moonfish.Tags.TagReference CollisionModel;
        [Moonfish.Tags.TagReferenceAttribute("jmad")]
        public Moonfish.Tags.TagReference Animation;
        [Moonfish.Tags.TagReferenceAttribute("phys")]
        public Moonfish.Tags.TagReference Physics;
        [Moonfish.Tags.TagReferenceAttribute("phmo")]
        public Moonfish.Tags.TagReference PhysicsModel;
        /// <summary>
        /// If a model is further away than the LOD reduction distance, it will be reduced to that LOD.
        ///So the L1 reduction distance should be really long and the L5 reduction distance should be really short.
        ///This means distances should be in descending order, e.g. 5 4 3 2 1.
        ///
        ///Note that if we run out of memory or too many models are on screen at once, the engine may reduce
        ///models to a lower LOD BEFORE they reach the reduction distance for that LOD.
        ///
        ///If a model has a begin fade distance and disappear distance, it will begin fading out at that distance,
        ///reaching zero alpha and disappearing at the disappear distance. These distances should be greater than all
        ///of the LOD reduction distances.
        /// </summary>
        public float DisappearDistance;
        public float BeginFadeDistance;
        private byte[] fieldpad = new byte[4];
        public float ReduceToL1;
        public float ReduceToL2;
        public float ReduceToL3;
        public float ReduceToL4;
        public float ReduceToL5;
        private byte[] fieldskip = new byte[4];
        public ShadowFadeDistanceEnum ShadowFadeDistance;
        private byte[] fieldpad0 = new byte[2];
        public ModelVariantBlock[] Variants = new ModelVariantBlock[0];
        public ModelMaterialBlock[] Materials = new ModelMaterialBlock[0];
        public GlobalDamageInfoBlock[] NewDamageInfo = new GlobalDamageInfoBlock[0];
        public ModelTargetBlock[] Targets = new ModelTargetBlock[0];
        public ModelRegionBlock[] ModelRegionBlock = new ModelRegionBlock[0];
        public ModelNodeBlock[] ModelNodeBlock = new ModelNodeBlock[0];
        private byte[] fieldpad1 = new byte[4];
        public ModelObjectDataBlock[] ModelObjectData = new ModelObjectDataBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("udlg")]
        public Moonfish.Tags.TagReference DefaultDialogue;
        [Moonfish.Tags.TagReferenceAttribute("shad")]
        public Moonfish.Tags.TagReference UNUSED;
        public Flags ModelFlags;
        public Moonfish.Tags.StringIdent DefaultDialogueEffect;
        public RenderonlyNodeFlagsBlock[] RenderonlyNodeFlags00 = new RenderonlyNodeFlagsBlock[32];
        public RenderonlySectionFlagsBlock[] RenderonlySectionFlags00 = new RenderonlySectionFlagsBlock[32];
        public RuntimeFlags ModelRuntimeFlags;
        public GlobalScenarioLoadParametersBlock[] ScenarioLoadParameters = new GlobalScenarioLoadParametersBlock[0];
        /// <summary>
        /// hologram shader is applied whenever the control function from it's object is non-zero
        /// </summary>
        [Moonfish.Tags.TagReferenceAttribute("shad")]
        public Moonfish.Tags.TagReference HologramShader;
        public Moonfish.Tags.StringIdent HologramControlFunction;
        public override int SerializedSize
        {
            get
            {
                return 252;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.RenderModel = binaryReader.ReadTagReference();
            this.CollisionModel = binaryReader.ReadTagReference();
            this.Animation = binaryReader.ReadTagReference();
            this.Physics = binaryReader.ReadTagReference();
            this.PhysicsModel = binaryReader.ReadTagReference();
            this.DisappearDistance = binaryReader.ReadSingle();
            this.BeginFadeDistance = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(4);
            this.ReduceToL1 = binaryReader.ReadSingle();
            this.ReduceToL2 = binaryReader.ReadSingle();
            this.ReduceToL3 = binaryReader.ReadSingle();
            this.ReduceToL4 = binaryReader.ReadSingle();
            this.ReduceToL5 = binaryReader.ReadSingle();
            this.fieldskip = binaryReader.ReadBytes(4);
            this.ShadowFadeDistance = ((ShadowFadeDistanceEnum)(binaryReader.ReadInt16()));
            this.fieldpad0 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(248));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(28));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(92));
            this.fieldpad1 = binaryReader.ReadBytes(4);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            this.DefaultDialogue = binaryReader.ReadTagReference();
            this.UNUSED = binaryReader.ReadTagReference();
            this.ModelFlags = ((Flags)(binaryReader.ReadInt32()));
            this.DefaultDialogueEffect = binaryReader.ReadStringIdent();
            int i;
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.RenderonlyNodeFlags00[i] = new RenderonlyNodeFlagsBlock();
                pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.RenderonlyNodeFlags00[i].ReadFields(binaryReader)));
            }
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.RenderonlySectionFlags00[i] = new RenderonlySectionFlagsBlock();
                pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.RenderonlySectionFlags00[i].ReadFields(binaryReader)));
            }
            this.ModelRuntimeFlags = ((RuntimeFlags)(binaryReader.ReadInt32()));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(48));
            this.HologramShader = binaryReader.ReadTagReference();
            this.HologramControlFunction = binaryReader.ReadStringIdent();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Variants = base.ReadBlockArrayData<ModelVariantBlock>(binaryReader, pointerQueue.Dequeue());
            this.Materials = base.ReadBlockArrayData<ModelMaterialBlock>(binaryReader, pointerQueue.Dequeue());
            this.NewDamageInfo = base.ReadBlockArrayData<GlobalDamageInfoBlock>(binaryReader, pointerQueue.Dequeue());
            this.Targets = base.ReadBlockArrayData<ModelTargetBlock>(binaryReader, pointerQueue.Dequeue());
            this.ModelRegionBlock = base.ReadBlockArrayData<ModelRegionBlock>(binaryReader, pointerQueue.Dequeue());
            this.ModelNodeBlock = base.ReadBlockArrayData<ModelNodeBlock>(binaryReader, pointerQueue.Dequeue());
            this.ModelObjectData = base.ReadBlockArrayData<ModelObjectDataBlock>(binaryReader, pointerQueue.Dequeue());
            int i;
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.RenderonlyNodeFlags00[i].ReadInstances(binaryReader, pointerQueue);
            }
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.RenderonlySectionFlags00[i].ReadInstances(binaryReader, pointerQueue);
            }
            this.ScenarioLoadParameters = base.ReadBlockArrayData<GlobalScenarioLoadParametersBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            queueableBinaryWriter.QueueWrite(this.Variants);
            queueableBinaryWriter.QueueWrite(this.Materials);
            queueableBinaryWriter.QueueWrite(this.NewDamageInfo);
            queueableBinaryWriter.QueueWrite(this.Targets);
            queueableBinaryWriter.QueueWrite(this.ModelRegionBlock);
            queueableBinaryWriter.QueueWrite(this.ModelNodeBlock);
            queueableBinaryWriter.QueueWrite(this.ModelObjectData);
            int i;
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.RenderonlyNodeFlags00[i].QueueWrites(queueableBinaryWriter);
            }
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.RenderonlySectionFlags00[i].QueueWrites(queueableBinaryWriter);
            }
            queueableBinaryWriter.QueueWrite(this.ScenarioLoadParameters);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.RenderModel);
            queueableBinaryWriter.Write(this.CollisionModel);
            queueableBinaryWriter.Write(this.Animation);
            queueableBinaryWriter.Write(this.Physics);
            queueableBinaryWriter.Write(this.PhysicsModel);
            queueableBinaryWriter.Write(this.DisappearDistance);
            queueableBinaryWriter.Write(this.BeginFadeDistance);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.ReduceToL1);
            queueableBinaryWriter.Write(this.ReduceToL2);
            queueableBinaryWriter.Write(this.ReduceToL3);
            queueableBinaryWriter.Write(this.ReduceToL4);
            queueableBinaryWriter.Write(this.ReduceToL5);
            queueableBinaryWriter.Write(this.fieldskip);
            queueableBinaryWriter.Write(((short)(this.ShadowFadeDistance)));
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.WritePointer(this.Variants);
            queueableBinaryWriter.WritePointer(this.Materials);
            queueableBinaryWriter.WritePointer(this.NewDamageInfo);
            queueableBinaryWriter.WritePointer(this.Targets);
            queueableBinaryWriter.WritePointer(this.ModelRegionBlock);
            queueableBinaryWriter.WritePointer(this.ModelNodeBlock);
            queueableBinaryWriter.Write(this.fieldpad1);
            queueableBinaryWriter.WritePointer(this.ModelObjectData);
            queueableBinaryWriter.Write(this.DefaultDialogue);
            queueableBinaryWriter.Write(this.UNUSED);
            queueableBinaryWriter.Write(((int)(this.ModelFlags)));
            queueableBinaryWriter.Write(this.DefaultDialogueEffect);
            int i;
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.RenderonlyNodeFlags00[i].Write(queueableBinaryWriter);
            }
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.RenderonlySectionFlags00[i].Write(queueableBinaryWriter);
            }
            queueableBinaryWriter.Write(((int)(this.ModelRuntimeFlags)));
            queueableBinaryWriter.WritePointer(this.ScenarioLoadParameters);
            queueableBinaryWriter.Write(this.HologramShader);
            queueableBinaryWriter.Write(this.HologramControlFunction);
        }
        public enum ShadowFadeDistanceEnum : short
        {
            FadeAtSuperHighDetailLevel = 0,
            FadeAtHighDetailLevel = 1,
            FadeAtMediumDetailLevel = 2,
            FadeAtLowDetailLevel = 3,
            FadeAtSuperLowDetailLevel = 4,
            FadeNever = 5,
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            ActiveCamoAlwaysOn = 1,
            ActiveCamoAlwaysMerge = 2,
            ActiveCamoNeverMerge = 4,
        }
        [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
        public class RenderonlyNodeFlagsBlock : GuerillaBlock, IWriteQueueable
        {
            public byte FieldCharInteger;
            public override int SerializedSize
            {
                get
                {
                    return 1;
                }
            }
            public override int Alignment
            {
                get
                {
                    return 1;
                }
            }
            public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
            {
                System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
                this.FieldCharInteger = binaryReader.ReadByte();
                return pointerQueue;
            }
            public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
            {
                base.ReadInstances(binaryReader, pointerQueue);
            }
            public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
            {
                base.QueueWrites(queueableBinaryWriter);
            }
            public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
            {
                base.Write(queueableBinaryWriter);
                queueableBinaryWriter.Write(this.FieldCharInteger);
            }
        }
        [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
        public class RenderonlySectionFlagsBlock : GuerillaBlock, IWriteQueueable
        {
            public byte FieldCharInteger;
            public override int SerializedSize
            {
                get
                {
                    return 1;
                }
            }
            public override int Alignment
            {
                get
                {
                    return 1;
                }
            }
            public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
            {
                System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
                this.FieldCharInteger = binaryReader.ReadByte();
                return pointerQueue;
            }
            public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
            {
                base.ReadInstances(binaryReader, pointerQueue);
            }
            public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
            {
                base.QueueWrites(queueableBinaryWriter);
            }
            public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
            {
                base.Write(queueableBinaryWriter);
                queueableBinaryWriter.Write(this.FieldCharInteger);
            }
        }
        [System.FlagsAttribute()]
        public enum RuntimeFlags : int
        {
            None = 0,
            ContainsRuntimeNodes = 1,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Hlmt = ((TagClass)("hlmt"));
    }
}
