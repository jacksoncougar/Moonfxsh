//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class ModelVariantRegionBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.StringIdent RegionName;
        private byte[] fieldpad = new byte[1];
        private byte[] fieldpad0 = new byte[1];
        public Moonfish.Tags.ShortBlockIndex1 ParentVariant;
        public ModelVariantPermutationBlock[] Permutations = new ModelVariantPermutationBlock[0];
        public SortOrderEnum SortOrder;
        private byte[] fieldpad1 = new byte[2];
        public override int SerializedSize
        {
            get
            {
                return 20;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.RegionName = binaryReader.ReadStringIdent();
            this.fieldpad = binaryReader.ReadBytes(1);
            this.fieldpad0 = binaryReader.ReadBytes(1);
            this.ParentVariant = binaryReader.ReadShortBlockIndex1();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            this.SortOrder = ((SortOrderEnum)(binaryReader.ReadInt16()));
            this.fieldpad1 = binaryReader.ReadBytes(2);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Permutations = base.ReadBlockArrayData<ModelVariantPermutationBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.Permutations);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.RegionName);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.ParentVariant);
            queueableBlamBinaryWriter.WritePointer(this.Permutations);
            queueableBlamBinaryWriter.Write(((short)(this.SortOrder)));
            queueableBlamBinaryWriter.Write(this.fieldpad1);
        }
        public enum SortOrderEnum : short
        {
            NoSorting = 0,
            Minus5Closest = 1,
            Minus4 = 2,
            Minus3 = 3,
            Minus2 = 4,
            Minus1 = 5,
            NoBiasSameAsModel = 6,
            Plus1 = 7,
            Plus2 = 8,
            Plus3 = 9,
            Plus4 = 10,
            Plus5Farthest = 11,
        }
    }
}
