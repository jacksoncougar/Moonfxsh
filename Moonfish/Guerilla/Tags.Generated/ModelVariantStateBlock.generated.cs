//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class ModelVariantStateBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.StringIdent PermutationName;
        private byte[] fieldpad = new byte[1];
        public PropertyFlags ModelVariantStatePropertyFlags;
        public StateEnum State;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference LoopingEffect;
        public Moonfish.Tags.StringIdent LoopingEffectMarkerName;
        public float InitialProbability;
        public override int SerializedSize
        {
            get
            {
                return 24;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.PermutationName = binaryReader.ReadStringIdent();
            this.fieldpad = binaryReader.ReadBytes(1);
            this.ModelVariantStatePropertyFlags = ((PropertyFlags)(binaryReader.ReadByte()));
            this.State = ((StateEnum)(binaryReader.ReadInt16()));
            this.LoopingEffect = binaryReader.ReadTagReference();
            this.LoopingEffectMarkerName = binaryReader.ReadStringIdent();
            this.InitialProbability = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.PermutationName);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(((byte)(this.ModelVariantStatePropertyFlags)));
            queueableBlamBinaryWriter.Write(((short)(this.State)));
            queueableBlamBinaryWriter.Write(this.LoopingEffect);
            queueableBlamBinaryWriter.Write(this.LoopingEffectMarkerName);
            queueableBlamBinaryWriter.Write(this.InitialProbability);
        }
        [System.FlagsAttribute()]
        public enum PropertyFlags : byte
        {
            None = 0,
            Blurred = 1,
            HellaBlurred = 2,
            Shielded = 4,
        }
        public enum StateEnum : short
        {
            Default = 0,
            MinorDamage = 1,
            MediumDamage = 2,
            MajorDamage = 3,
            Destroyed = 4,
        }
    }
}
