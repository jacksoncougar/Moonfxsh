//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("MoonfishGlobalUnicodeBlockInfoStructBlock")]
    public partial class MoonfishGlobalUnicodeBlockInfoStructBlock : GuerillaBlock, IWriteQueueable
    {
        private byte[] fieldpad = new byte[8];
        public int EnglishStringCount;
        public int EnglishStringTableLength;
        public int EnglishStringIndexAddress;
        public int EnglishStringTableAddress;
        private byte[] fieldpad0 = new byte[4];
        private byte[] fieldpad1 = new byte[8];
        public int JapaneseStringCount;
        public int JapaneseStringTableLength;
        public int JapaneseStringIndexAddress;
        public int JapaneseStringTableAddress;
        private byte[] fieldpad2 = new byte[4];
        private byte[] fieldpad3 = new byte[8];
        public int DutchStringCount;
        public int DutchStringTableLength;
        public int DutchStringIndexAddress;
        public int DutchStringTableAddress;
        private byte[] fieldpad4 = new byte[4];
        private byte[] fieldpad5 = new byte[8];
        public int FrenchStringCount;
        public int FrenchStringTableLength;
        public int FrenchStringIndexAddress;
        public int FrenchStringTableAddress;
        private byte[] fieldpad6 = new byte[4];
        private byte[] fieldpad7 = new byte[8];
        public int SpanishStringCount;
        public int SpanishStringTableLength;
        public int SpanishStringIndexAddress;
        public int SpanishStringTableAddress;
        private byte[] fieldpad8 = new byte[4];
        private byte[] fieldpad9 = new byte[8];
        public int ItalianStringCount;
        public int ItalianStringTableLength;
        public int ItalianStringIndexAddress;
        public int ItalianStringTableAddress;
        private byte[] fieldpad10 = new byte[4];
        private byte[] fieldpad11 = new byte[8];
        public int KoreanStringCount;
        public int KoreanStringTableLength;
        public int KoreanStringIndexAddress;
        public int KoreanStringTableAddress;
        private byte[] fieldpad12 = new byte[4];
        private byte[] fieldpad13 = new byte[8];
        public int ChineseStringCount;
        public int ChineseStringTableLength;
        public int ChineseStringIndexAddress;
        public int ChineseStringTableAddress;
        private byte[] fieldpad14 = new byte[4];
        private byte[] fieldpad15 = new byte[8];
        public int PortugueseStringCount;
        public int PortugueseStringTableLength;
        public int PortugueseStringIndexAddress;
        public int PortugueseStringTableAddress;
        private byte[] fieldpad16 = new byte[4];
        public override int SerializedSize
        {
            get
            {
                return 252;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.fieldpad = binaryReader.ReadBytes(8);
            this.EnglishStringCount = binaryReader.ReadInt32();
            this.EnglishStringTableLength = binaryReader.ReadInt32();
            this.EnglishStringIndexAddress = binaryReader.ReadInt32();
            this.EnglishStringTableAddress = binaryReader.ReadInt32();
            this.fieldpad0 = binaryReader.ReadBytes(4);
            this.fieldpad1 = binaryReader.ReadBytes(8);
            this.JapaneseStringCount = binaryReader.ReadInt32();
            this.JapaneseStringTableLength = binaryReader.ReadInt32();
            this.JapaneseStringIndexAddress = binaryReader.ReadInt32();
            this.JapaneseStringTableAddress = binaryReader.ReadInt32();
            this.fieldpad2 = binaryReader.ReadBytes(4);
            this.fieldpad3 = binaryReader.ReadBytes(8);
            this.DutchStringCount = binaryReader.ReadInt32();
            this.DutchStringTableLength = binaryReader.ReadInt32();
            this.DutchStringIndexAddress = binaryReader.ReadInt32();
            this.DutchStringTableAddress = binaryReader.ReadInt32();
            this.fieldpad4 = binaryReader.ReadBytes(4);
            this.fieldpad5 = binaryReader.ReadBytes(8);
            this.FrenchStringCount = binaryReader.ReadInt32();
            this.FrenchStringTableLength = binaryReader.ReadInt32();
            this.FrenchStringIndexAddress = binaryReader.ReadInt32();
            this.FrenchStringTableAddress = binaryReader.ReadInt32();
            this.fieldpad6 = binaryReader.ReadBytes(4);
            this.fieldpad7 = binaryReader.ReadBytes(8);
            this.SpanishStringCount = binaryReader.ReadInt32();
            this.SpanishStringTableLength = binaryReader.ReadInt32();
            this.SpanishStringIndexAddress = binaryReader.ReadInt32();
            this.SpanishStringTableAddress = binaryReader.ReadInt32();
            this.fieldpad8 = binaryReader.ReadBytes(4);
            this.fieldpad9 = binaryReader.ReadBytes(8);
            this.ItalianStringCount = binaryReader.ReadInt32();
            this.ItalianStringTableLength = binaryReader.ReadInt32();
            this.ItalianStringIndexAddress = binaryReader.ReadInt32();
            this.ItalianStringTableAddress = binaryReader.ReadInt32();
            this.fieldpad10 = binaryReader.ReadBytes(4);
            this.fieldpad11 = binaryReader.ReadBytes(8);
            this.KoreanStringCount = binaryReader.ReadInt32();
            this.KoreanStringTableLength = binaryReader.ReadInt32();
            this.KoreanStringIndexAddress = binaryReader.ReadInt32();
            this.KoreanStringTableAddress = binaryReader.ReadInt32();
            this.fieldpad12 = binaryReader.ReadBytes(4);
            this.fieldpad13 = binaryReader.ReadBytes(8);
            this.ChineseStringCount = binaryReader.ReadInt32();
            this.ChineseStringTableLength = binaryReader.ReadInt32();
            this.ChineseStringIndexAddress = binaryReader.ReadInt32();
            this.ChineseStringTableAddress = binaryReader.ReadInt32();
            this.fieldpad14 = binaryReader.ReadBytes(4);
            this.fieldpad15 = binaryReader.ReadBytes(8);
            this.PortugueseStringCount = binaryReader.ReadInt32();
            this.PortugueseStringTableLength = binaryReader.ReadInt32();
            this.PortugueseStringIndexAddress = binaryReader.ReadInt32();
            this.PortugueseStringTableAddress = binaryReader.ReadInt32();
            this.fieldpad16 = binaryReader.ReadBytes(4);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.EnglishStringCount);
            queueableBinaryWriter.Write(this.EnglishStringTableLength);
            queueableBinaryWriter.Write(this.EnglishStringIndexAddress);
            queueableBinaryWriter.Write(this.EnglishStringTableAddress);
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.fieldpad1);
            queueableBinaryWriter.Write(this.JapaneseStringCount);
            queueableBinaryWriter.Write(this.JapaneseStringTableLength);
            queueableBinaryWriter.Write(this.JapaneseStringIndexAddress);
            queueableBinaryWriter.Write(this.JapaneseStringTableAddress);
            queueableBinaryWriter.Write(this.fieldpad2);
            queueableBinaryWriter.Write(this.fieldpad3);
            queueableBinaryWriter.Write(this.DutchStringCount);
            queueableBinaryWriter.Write(this.DutchStringTableLength);
            queueableBinaryWriter.Write(this.DutchStringIndexAddress);
            queueableBinaryWriter.Write(this.DutchStringTableAddress);
            queueableBinaryWriter.Write(this.fieldpad4);
            queueableBinaryWriter.Write(this.fieldpad5);
            queueableBinaryWriter.Write(this.FrenchStringCount);
            queueableBinaryWriter.Write(this.FrenchStringTableLength);
            queueableBinaryWriter.Write(this.FrenchStringIndexAddress);
            queueableBinaryWriter.Write(this.FrenchStringTableAddress);
            queueableBinaryWriter.Write(this.fieldpad6);
            queueableBinaryWriter.Write(this.fieldpad7);
            queueableBinaryWriter.Write(this.SpanishStringCount);
            queueableBinaryWriter.Write(this.SpanishStringTableLength);
            queueableBinaryWriter.Write(this.SpanishStringIndexAddress);
            queueableBinaryWriter.Write(this.SpanishStringTableAddress);
            queueableBinaryWriter.Write(this.fieldpad8);
            queueableBinaryWriter.Write(this.fieldpad9);
            queueableBinaryWriter.Write(this.ItalianStringCount);
            queueableBinaryWriter.Write(this.ItalianStringTableLength);
            queueableBinaryWriter.Write(this.ItalianStringIndexAddress);
            queueableBinaryWriter.Write(this.ItalianStringTableAddress);
            queueableBinaryWriter.Write(this.fieldpad10);
            queueableBinaryWriter.Write(this.fieldpad11);
            queueableBinaryWriter.Write(this.KoreanStringCount);
            queueableBinaryWriter.Write(this.KoreanStringTableLength);
            queueableBinaryWriter.Write(this.KoreanStringIndexAddress);
            queueableBinaryWriter.Write(this.KoreanStringTableAddress);
            queueableBinaryWriter.Write(this.fieldpad12);
            queueableBinaryWriter.Write(this.fieldpad13);
            queueableBinaryWriter.Write(this.ChineseStringCount);
            queueableBinaryWriter.Write(this.ChineseStringTableLength);
            queueableBinaryWriter.Write(this.ChineseStringIndexAddress);
            queueableBinaryWriter.Write(this.ChineseStringTableAddress);
            queueableBinaryWriter.Write(this.fieldpad14);
            queueableBinaryWriter.Write(this.fieldpad15);
            queueableBinaryWriter.Write(this.PortugueseStringCount);
            queueableBinaryWriter.Write(this.PortugueseStringTableLength);
            queueableBinaryWriter.Write(this.PortugueseStringIndexAddress);
            queueableBinaryWriter.Write(this.PortugueseStringTableAddress);
            queueableBinaryWriter.Write(this.fieldpad16);
        }
    }
}
