//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class MultilingualUnicodeStringReferenceBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.StringIdent StringId;
        public int EnglishOffset;
        public int JapaneseOffset;
        public int GermanOffset;
        public int FrenchOffset;
        public int SpanishOffset;
        public int ItalianOffset;
        public int KoreanOffset;
        public int ChineseOffset;
        public int PortugueseOffset;
        public override int SerializedSize
        {
            get
            {
                return 40;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.StringId = binaryReader.ReadStringIdent();
            this.EnglishOffset = binaryReader.ReadInt32();
            this.JapaneseOffset = binaryReader.ReadInt32();
            this.GermanOffset = binaryReader.ReadInt32();
            this.FrenchOffset = binaryReader.ReadInt32();
            this.SpanishOffset = binaryReader.ReadInt32();
            this.ItalianOffset = binaryReader.ReadInt32();
            this.KoreanOffset = binaryReader.ReadInt32();
            this.ChineseOffset = binaryReader.ReadInt32();
            this.PortugueseOffset = binaryReader.ReadInt32();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.StringId);
            queueableBlamBinaryWriter.Write(this.EnglishOffset);
            queueableBlamBinaryWriter.Write(this.JapaneseOffset);
            queueableBlamBinaryWriter.Write(this.GermanOffset);
            queueableBlamBinaryWriter.Write(this.FrenchOffset);
            queueableBlamBinaryWriter.Write(this.SpanishOffset);
            queueableBlamBinaryWriter.Write(this.ItalianOffset);
            queueableBlamBinaryWriter.Write(this.KoreanOffset);
            queueableBlamBinaryWriter.Write(this.ChineseOffset);
            queueableBlamBinaryWriter.Write(this.PortugueseOffset);
        }
    }
}
