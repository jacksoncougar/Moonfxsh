//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("multiplayer_information_block")]
    public partial class MultiplayerInformationBlock : GuerillaBlock, IWriteDeferrable
    {
        [Moonfish.Tags.TagReferenceAttribute("item")]
        public Moonfish.Tags.TagReference Flag;
        [Moonfish.Tags.TagReferenceAttribute("unit")]
        public Moonfish.Tags.TagReference Unit;
        public VehiclesBlock[] Vehicles = new VehiclesBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("shad")]
        public Moonfish.Tags.TagReference HillShader;
        [Moonfish.Tags.TagReferenceAttribute("shad")]
        public Moonfish.Tags.TagReference FlagShader;
        [Moonfish.Tags.TagReferenceAttribute("item")]
        public Moonfish.Tags.TagReference Ball;
        public SoundsBlock[] Sounds = new SoundsBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("unic")]
        public Moonfish.Tags.TagReference InGameText;
        private byte[] fieldpad = new byte[40];
        public GameEngineGeneralEventBlock[] GeneralEvents = new GameEngineGeneralEventBlock[0];
        public GameEngineSlayerEventBlock[] SlayerEvents = new GameEngineSlayerEventBlock[0];
        public GameEngineCtfEventBlock[] CtfEvents = new GameEngineCtfEventBlock[0];
        public GameEngineOddballEventBlock[] OddballEvents = new GameEngineOddballEventBlock[0];
        public GNullBlock[] GNullBlock = new GNullBlock[0];
        public GameEngineKingEventBlock[] KingEvents = new GameEngineKingEventBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 152;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Flag = binaryReader.ReadTagReference();
            this.Unit = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            this.HillShader = binaryReader.ReadTagReference();
            this.FlagShader = binaryReader.ReadTagReference();
            this.Ball = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            this.InGameText = binaryReader.ReadTagReference();
            this.fieldpad = binaryReader.ReadBytes(40);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(168));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(168));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(168));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(168));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(168));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Vehicles = base.ReadBlockArrayData<VehiclesBlock>(binaryReader, pointerQueue.Dequeue());
            this.Sounds = base.ReadBlockArrayData<SoundsBlock>(binaryReader, pointerQueue.Dequeue());
            this.GeneralEvents = base.ReadBlockArrayData<GameEngineGeneralEventBlock>(binaryReader, pointerQueue.Dequeue());
            this.SlayerEvents = base.ReadBlockArrayData<GameEngineSlayerEventBlock>(binaryReader, pointerQueue.Dequeue());
            this.CtfEvents = base.ReadBlockArrayData<GameEngineCtfEventBlock>(binaryReader, pointerQueue.Dequeue());
            this.OddballEvents = base.ReadBlockArrayData<GameEngineOddballEventBlock>(binaryReader, pointerQueue.Dequeue());
            this.GNullBlock = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
            this.KingEvents = base.ReadBlockArrayData<GameEngineKingEventBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Vehicles);
            writer.Defer(this.Sounds);
            writer.Defer(this.GeneralEvents);
            writer.Defer(this.SlayerEvents);
            writer.Defer(this.CtfEvents);
            writer.Defer(this.OddballEvents);
            writer.Defer(this.GNullBlock);
            writer.Defer(this.KingEvents);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Flag);
            writer.Write(this.Unit);
            writer.WritePointer(this.Vehicles);
            writer.Write(this.HillShader);
            writer.Write(this.FlagShader);
            writer.Write(this.Ball);
            writer.WritePointer(this.Sounds);
            writer.Write(this.InGameText);
            writer.Write(this.fieldpad);
            writer.WritePointer(this.GeneralEvents);
            writer.WritePointer(this.SlayerEvents);
            writer.WritePointer(this.CtfEvents);
            writer.WritePointer(this.OddballEvents);
            writer.WritePointer(this.GNullBlock);
            writer.WritePointer(this.KingEvents);
        }
    }
}
