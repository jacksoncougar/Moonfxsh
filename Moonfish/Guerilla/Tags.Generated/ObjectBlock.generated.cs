//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("obje")]
    [TagBlockOriginalNameAttribute("object_block")]
    public partial class ObjectBlock : GuerillaBlock, IWriteDeferrable
    {
        private byte[] fieldpad = new byte[2];
        public Flags ObjectFlags;
        public float BoundingRadius;
        public OpenTK.Vector3 BoundingOffset;
        public float AccelerationScale;
        public LightmapShadowModeEnum LightmapShadowMode;
        public SweetenerSizeEnum SweetenerSize;
        private byte[] fieldpad0 = new byte[1];
        private byte[] fieldpad1 = new byte[4];
        public float DynamicLightSphereRadius;
        public OpenTK.Vector3 DynamicLightSphereOffset;
        public Moonfish.Tags.StringIdent DefaultModelVariant;
        [Moonfish.Tags.TagReferenceAttribute("hlmt")]
        public Moonfish.Tags.TagReference Model;
        [Moonfish.Tags.TagReferenceAttribute("bloc")]
        public Moonfish.Tags.TagReference CrateObject;
        [Moonfish.Tags.TagReferenceAttribute("shad")]
        public Moonfish.Tags.TagReference ModifierShader;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference CreationEffect;
        [Moonfish.Tags.TagReferenceAttribute("foot")]
        public Moonfish.Tags.TagReference MaterialEffects;
        public ObjectAiPropertiesBlock[] AiProperties = new ObjectAiPropertiesBlock[0];
        public ObjectFunctionBlock[] Functions = new ObjectFunctionBlock[0];
        /// <summary>
        /// for things that want to cause more or less collision damage
        /// </summary>
        public float ApplyCollisionDamageScale;
        /// <summary>
        /// 0 - means take default value from globals.globals
        /// </summary>
        public float MinGameAcc;
        public float MaxGameAcc;
        public float MinGameScale;
        public float MaxGameScale;
        /// <summary>
        /// 0 - means take default value from globals.globals
        /// </summary>
        public float MinAbsAcc;
        public float MaxAbsAcc;
        public float MinAbsScale;
        public float MaxAbsScale;
        public short HudTextMessageIndex;
        private byte[] fieldpad2 = new byte[2];
        public ObjectAttachmentBlock[] Attachments = new ObjectAttachmentBlock[0];
        public ObjectWidgetBlock[] Widgets = new ObjectWidgetBlock[0];
        public OldObjectFunctionBlock[] OldFunctions = new OldObjectFunctionBlock[0];
        public ObjectChangeColors[] ChangeColors = new ObjectChangeColors[0];
        public PredictedResourceBlock[] PredictedResources = new PredictedResourceBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 188;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.ObjectFlags = ((Flags)(binaryReader.ReadInt16()));
            this.BoundingRadius = binaryReader.ReadSingle();
            this.BoundingOffset = binaryReader.ReadVector3();
            this.AccelerationScale = binaryReader.ReadSingle();
            this.LightmapShadowMode = ((LightmapShadowModeEnum)(binaryReader.ReadInt16()));
            this.SweetenerSize = ((SweetenerSizeEnum)(binaryReader.ReadByte()));
            this.fieldpad0 = binaryReader.ReadBytes(1);
            this.fieldpad1 = binaryReader.ReadBytes(4);
            this.DynamicLightSphereRadius = binaryReader.ReadSingle();
            this.DynamicLightSphereOffset = binaryReader.ReadVector3();
            this.DefaultModelVariant = binaryReader.ReadStringIdent();
            this.Model = binaryReader.ReadTagReference();
            this.CrateObject = binaryReader.ReadTagReference();
            this.ModifierShader = binaryReader.ReadTagReference();
            this.CreationEffect = binaryReader.ReadTagReference();
            this.MaterialEffects = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            this.ApplyCollisionDamageScale = binaryReader.ReadSingle();
            this.MinGameAcc = binaryReader.ReadSingle();
            this.MaxGameAcc = binaryReader.ReadSingle();
            this.MinGameScale = binaryReader.ReadSingle();
            this.MaxGameScale = binaryReader.ReadSingle();
            this.MinAbsAcc = binaryReader.ReadSingle();
            this.MaxAbsAcc = binaryReader.ReadSingle();
            this.MinAbsScale = binaryReader.ReadSingle();
            this.MaxAbsScale = binaryReader.ReadSingle();
            this.HudTextMessageIndex = binaryReader.ReadInt16();
            this.fieldpad2 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(80));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.AiProperties = base.ReadBlockArrayData<ObjectAiPropertiesBlock>(binaryReader, pointerQueue.Dequeue());
            this.Functions = base.ReadBlockArrayData<ObjectFunctionBlock>(binaryReader, pointerQueue.Dequeue());
            this.Attachments = base.ReadBlockArrayData<ObjectAttachmentBlock>(binaryReader, pointerQueue.Dequeue());
            this.Widgets = base.ReadBlockArrayData<ObjectWidgetBlock>(binaryReader, pointerQueue.Dequeue());
            this.OldFunctions = base.ReadBlockArrayData<OldObjectFunctionBlock>(binaryReader, pointerQueue.Dequeue());
            this.ChangeColors = base.ReadBlockArrayData<ObjectChangeColors>(binaryReader, pointerQueue.Dequeue());
            this.PredictedResources = base.ReadBlockArrayData<PredictedResourceBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.AiProperties);
            writer.Defer(this.Functions);
            writer.Defer(this.Attachments);
            writer.Defer(this.Widgets);
            writer.Defer(this.OldFunctions);
            writer.Defer(this.ChangeColors);
            writer.Defer(this.PredictedResources);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.fieldpad);
            writer.Write(((short)(this.ObjectFlags)));
            writer.Write(this.BoundingRadius);
            writer.Write(this.BoundingOffset);
            writer.Write(this.AccelerationScale);
            writer.Write(((short)(this.LightmapShadowMode)));
            writer.Write(((byte)(this.SweetenerSize)));
            writer.Write(this.fieldpad0);
            writer.Write(this.fieldpad1);
            writer.Write(this.DynamicLightSphereRadius);
            writer.Write(this.DynamicLightSphereOffset);
            writer.Write(this.DefaultModelVariant);
            writer.Write(this.Model);
            writer.Write(this.CrateObject);
            writer.Write(this.ModifierShader);
            writer.Write(this.CreationEffect);
            writer.Write(this.MaterialEffects);
            writer.WritePointer(this.AiProperties);
            writer.WritePointer(this.Functions);
            writer.Write(this.ApplyCollisionDamageScale);
            writer.Write(this.MinGameAcc);
            writer.Write(this.MaxGameAcc);
            writer.Write(this.MinGameScale);
            writer.Write(this.MaxGameScale);
            writer.Write(this.MinAbsAcc);
            writer.Write(this.MaxAbsAcc);
            writer.Write(this.MinAbsScale);
            writer.Write(this.MaxAbsScale);
            writer.Write(this.HudTextMessageIndex);
            writer.Write(this.fieldpad2);
            writer.WritePointer(this.Attachments);
            writer.WritePointer(this.Widgets);
            writer.WritePointer(this.OldFunctions);
            writer.WritePointer(this.ChangeColors);
            writer.WritePointer(this.PredictedResources);
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            DoesNotCastShadow = 1,
            SearchCardinalDirectionLightmapsOnFailure = 2,
            Unused = 4,
            NotAPathfindingObstacle = 8,
            ExtensionOfParentobjectPassesAllFunctionValuesToParentAndUsesParentsMarkers = 16,
            DoesNotCauseCollisionDamage = 32,
            EarlyMover = 64,
            EarlyMoverLocalizedPhysics = 128,
            UseStaticMassiveLightmapSamplecastATonOfRaysOnceAndStoreTheResultsForLighting = 256,
            ObjectScalesAttachments = 512,
            InheritsPlayersAppearance = 1024,
            DeadBipedsCantLocalize = 2048,
            AttachToClustersByDynamicSphereuseThisForTheMacGunOnSpacestation = 4096,
            EffectsCreatedByThisObjectDoNotSpawnObjectsInMultiplayer = 8192,
        }
        public enum LightmapShadowModeEnum : short
        {
            Default = 0,
            Never = 1,
            Always = 2,
        }
        public enum SweetenerSizeEnum : byte
        {
            Small = 0,
            Medium = 1,
            Large = 2,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Obje = ((TagClass)("obje"));
    }
}
