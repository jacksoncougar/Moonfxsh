//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("old_materials_block")]
    public partial class OldMaterialsBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.StringIdent NewMaterialName;
        public Moonfish.Tags.StringIdent NewGeneralMaterialName;
        /// <summary>
        /// the following fields modify the way a vehicle drives over terrain of this material type.
        /// </summary>
        public float GroundFrictionScale;
        public float GroundFrictionNormalK1Scale;
        public float GroundFrictionNormalK0Scale;
        public float GroundDepthScale;
        public float GroundDampFractionScale;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference MeleeHitSound;
        public override int SerializedSize
        {
            get
            {
                return 36;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.NewMaterialName = binaryReader.ReadStringIdent();
            this.NewGeneralMaterialName = binaryReader.ReadStringIdent();
            this.GroundFrictionScale = binaryReader.ReadSingle();
            this.GroundFrictionNormalK1Scale = binaryReader.ReadSingle();
            this.GroundFrictionNormalK0Scale = binaryReader.ReadSingle();
            this.GroundDepthScale = binaryReader.ReadSingle();
            this.GroundDampFractionScale = binaryReader.ReadSingle();
            this.MeleeHitSound = binaryReader.ReadTagReference();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.NewMaterialName);
            queueableBinaryWriter.Write(this.NewGeneralMaterialName);
            queueableBinaryWriter.Write(this.GroundFrictionScale);
            queueableBinaryWriter.Write(this.GroundFrictionNormalK1Scale);
            queueableBinaryWriter.Write(this.GroundFrictionNormalK0Scale);
            queueableBinaryWriter.Write(this.GroundDepthScale);
            queueableBinaryWriter.Write(this.GroundDampFractionScale);
            queueableBinaryWriter.Write(this.MeleeHitSound);
        }
    }
}
