//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("orders_block")]
    public partial class OrdersBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.String32 Name;
        public Moonfish.Tags.ShortBlockIndex1 Style;
        private byte[] fieldpad = new byte[2];
        public Flags OrdersFlags;
        public ForceCombatStatusEnum ForceCombatStatus;
        private byte[] fieldpad0 = new byte[2];
        public Moonfish.Tags.String32 EntryScript;
        private byte[] fieldskip = new byte[2];
        public Moonfish.Tags.ShortBlockIndex1 FollowSquad;
        public float FollowRadius;
        public ZoneSetBlock[] PrimaryAreaSet = new ZoneSetBlock[0];
        public SecondaryZoneSetBlock[] SecondaryAreaSet = new SecondaryZoneSetBlock[0];
        public SecondarySetTriggerBlock[] SecondarySetTrigger = new SecondarySetTriggerBlock[0];
        public SpecialMovementBlock[] SpecialMovement = new SpecialMovementBlock[0];
        public OrderEndingBlock[] OrderEndings = new OrderEndingBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 124;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadString32();
            this.Style = binaryReader.ReadShortBlockIndex1();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.OrdersFlags = ((Flags)(binaryReader.ReadInt32()));
            this.ForceCombatStatus = ((ForceCombatStatusEnum)(binaryReader.ReadInt16()));
            this.fieldpad0 = binaryReader.ReadBytes(2);
            this.EntryScript = binaryReader.ReadString32();
            this.fieldskip = binaryReader.ReadBytes(2);
            this.FollowSquad = binaryReader.ReadShortBlockIndex1();
            this.FollowRadius = binaryReader.ReadSingle();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.PrimaryAreaSet = base.ReadBlockArrayData<ZoneSetBlock>(binaryReader, pointerQueue.Dequeue());
            this.SecondaryAreaSet = base.ReadBlockArrayData<SecondaryZoneSetBlock>(binaryReader, pointerQueue.Dequeue());
            this.SecondarySetTrigger = base.ReadBlockArrayData<SecondarySetTriggerBlock>(binaryReader, pointerQueue.Dequeue());
            this.SpecialMovement = base.ReadBlockArrayData<SpecialMovementBlock>(binaryReader, pointerQueue.Dequeue());
            this.OrderEndings = base.ReadBlockArrayData<OrderEndingBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.DeferReferences(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.PrimaryAreaSet);
            queueableBinaryWriter.Defer(this.SecondaryAreaSet);
            queueableBinaryWriter.Defer(this.SecondarySetTrigger);
            queueableBinaryWriter.Defer(this.SpecialMovement);
            queueableBinaryWriter.Defer(this.OrderEndings);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.Name);
            queueableBinaryWriter.Write(this.Style);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(((int)(this.OrdersFlags)));
            queueableBinaryWriter.Write(((short)(this.ForceCombatStatus)));
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.EntryScript);
            queueableBinaryWriter.Write(this.fieldskip);
            queueableBinaryWriter.Write(this.FollowSquad);
            queueableBinaryWriter.Write(this.FollowRadius);
            queueableBinaryWriter.WritePointer(this.PrimaryAreaSet);
            queueableBinaryWriter.WritePointer(this.SecondaryAreaSet);
            queueableBinaryWriter.WritePointer(this.SecondarySetTrigger);
            queueableBinaryWriter.WritePointer(this.SpecialMovement);
            queueableBinaryWriter.WritePointer(this.OrderEndings);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            Locked = 1,
            AlwaysActive = 2,
            DebugOn = 4,
            StrictAreaDef = 8,
            FollowClosestPlayer = 16,
            FollowSquad = 32,
            ActiveCamo = 64,
            SuppressCombatUntilEngaged = 128,
            InhibitVehicleUse = 256,
        }
        public enum ForceCombatStatusEnum : short
        {
            NONE = 0,
            Asleep = 1,
            Idle = 2,
            Alert = 3,
            Combat = 4,
        }
    }
}
