//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class ParticleSystemDefinitionBlockNew : GuerillaBlock, IWriteQueueable
    {
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference Particle;
        public Moonfish.Tags.LongBlockIndex1 Location;
        public CoordinateSystemEnum CoordinateSystem;
        public EnvironmentEnum Environment;
        public DispositionEnum Disposition;
        public CameraModeEnum CameraMode;
        public short SortBias;
        public Flags ParticleSystemDefinitionNewFlags;
        public float LODInDistance;
        public float LODFeatherInDelta;
        private byte[] fieldskip = new byte[4];
        public float LODOutDistance;
        public float LODFeatherOutDelta;
        private byte[] fieldskip0 = new byte[4];
        public ParticleSystemEmitterDefinitionBlock[] Emitters = new ParticleSystemEmitterDefinitionBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 56;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Particle = binaryReader.ReadTagReference();
            this.Location = binaryReader.ReadLongBlockIndex1();
            this.CoordinateSystem = ((CoordinateSystemEnum)(binaryReader.ReadInt16()));
            this.Environment = ((EnvironmentEnum)(binaryReader.ReadInt16()));
            this.Disposition = ((DispositionEnum)(binaryReader.ReadInt16()));
            this.CameraMode = ((CameraModeEnum)(binaryReader.ReadInt16()));
            this.SortBias = binaryReader.ReadInt16();
            this.ParticleSystemDefinitionNewFlags = ((Flags)(binaryReader.ReadInt16()));
            this.LODInDistance = binaryReader.ReadSingle();
            this.LODFeatherInDelta = binaryReader.ReadSingle();
            this.fieldskip = binaryReader.ReadBytes(4);
            this.LODOutDistance = binaryReader.ReadSingle();
            this.LODFeatherOutDelta = binaryReader.ReadSingle();
            this.fieldskip0 = binaryReader.ReadBytes(4);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(184));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Emitters = base.ReadBlockArrayData<ParticleSystemEmitterDefinitionBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.Emitters);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.Particle);
            queueableBlamBinaryWriter.Write(this.Location);
            queueableBlamBinaryWriter.Write(((short)(this.CoordinateSystem)));
            queueableBlamBinaryWriter.Write(((short)(this.Environment)));
            queueableBlamBinaryWriter.Write(((short)(this.Disposition)));
            queueableBlamBinaryWriter.Write(((short)(this.CameraMode)));
            queueableBlamBinaryWriter.Write(this.SortBias);
            queueableBlamBinaryWriter.Write(((short)(this.ParticleSystemDefinitionNewFlags)));
            queueableBlamBinaryWriter.Write(this.LODInDistance);
            queueableBlamBinaryWriter.Write(this.LODFeatherInDelta);
            queueableBlamBinaryWriter.Write(this.fieldskip);
            queueableBlamBinaryWriter.Write(this.LODOutDistance);
            queueableBlamBinaryWriter.Write(this.LODFeatherOutDelta);
            queueableBlamBinaryWriter.Write(this.fieldskip0);
            queueableBlamBinaryWriter.WritePointer(this.Emitters);
        }
        public enum CoordinateSystemEnum : short
        {
            World = 0,
            Local = 1,
            Parent = 2,
        }
        public enum EnvironmentEnum : short
        {
            AnyEnvironment = 0,
            AirOnly = 1,
            WaterOnly = 2,
            SpaceOnly = 3,
        }
        public enum DispositionEnum : short
        {
            EitherMode = 0,
            ViolentModeOnly = 1,
            NonviolentModeOnly = 2,
        }
        public enum CameraModeEnum : short
        {
            IndependentOfCameraMode = 0,
            OnlyInFirstPerson = 1,
            OnlyInThirdPerson = 2,
            BothFirstAndThird = 3,
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            Glow = 1,
            Cinematics = 2,
            LoopingParticle = 4,
            DisabledForDebugging = 8,
            InheritEffectVelocity = 16,
            DontRenderSystem = 32,
            RenderWhenZoomed = 64,
            SpreadBetweenTicks = 128,
            PersistentParticle = 256,
            ExpensiveVisibility = 512,
        }
    }
}
