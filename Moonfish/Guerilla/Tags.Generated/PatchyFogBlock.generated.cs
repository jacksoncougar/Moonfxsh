//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("fpch")]
    [TagBlockOriginalNameAttribute("patchy_fog_block")]
    public partial class PatchyFogBlock : GuerillaBlock, IWriteDeferrable
    {
        public Flags PatchyFogFlags;
        private byte[] fieldpad = new byte[2];
        public float RotationMultiplier;
        public float StrafingMultiplier;
        public float ZoomMultiplier;
        public float NoiseMapScale;
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference NoiseMap;
        public float NoiseVerticalScaleForward;
        public float NoiseVerticalScaleUp;
        public float NoiseOpacityScaleUp;
        public float AnimationPeriod;
        public Moonfish.Model.Range WindVelocity;
        public Moonfish.Model.Range WindPeriod;
        public float WindAccelerationWeight;
        public float WindPerpendicularWeight;
        public float WindConstantVelocityX;
        public float WindConstantVelocityY;
        public float WindConstantVelocityZ;
        public override int SerializedSize
        {
            get
            {
                return 80;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.PatchyFogFlags = ((Flags)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.RotationMultiplier = binaryReader.ReadSingle();
            this.StrafingMultiplier = binaryReader.ReadSingle();
            this.ZoomMultiplier = binaryReader.ReadSingle();
            this.NoiseMapScale = binaryReader.ReadSingle();
            this.NoiseMap = binaryReader.ReadTagReference();
            this.NoiseVerticalScaleForward = binaryReader.ReadSingle();
            this.NoiseVerticalScaleUp = binaryReader.ReadSingle();
            this.NoiseOpacityScaleUp = binaryReader.ReadSingle();
            this.AnimationPeriod = binaryReader.ReadSingle();
            this.WindVelocity = binaryReader.ReadRange();
            this.WindPeriod = binaryReader.ReadRange();
            this.WindAccelerationWeight = binaryReader.ReadSingle();
            this.WindPerpendicularWeight = binaryReader.ReadSingle();
            this.WindConstantVelocityX = binaryReader.ReadSingle();
            this.WindConstantVelocityY = binaryReader.ReadSingle();
            this.WindConstantVelocityZ = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((short)(this.PatchyFogFlags)));
            writer.Write(this.fieldpad);
            writer.Write(this.RotationMultiplier);
            writer.Write(this.StrafingMultiplier);
            writer.Write(this.ZoomMultiplier);
            writer.Write(this.NoiseMapScale);
            writer.Write(this.NoiseMap);
            writer.Write(this.NoiseVerticalScaleForward);
            writer.Write(this.NoiseVerticalScaleUp);
            writer.Write(this.NoiseOpacityScaleUp);
            writer.Write(this.AnimationPeriod);
            writer.Write(this.WindVelocity);
            writer.Write(this.WindPeriod);
            writer.Write(this.WindAccelerationWeight);
            writer.Write(this.WindPerpendicularWeight);
            writer.Write(this.WindConstantVelocityX);
            writer.Write(this.WindConstantVelocityY);
            writer.Write(this.WindConstantVelocityZ);
        }
        /// <summary>
        /// Use the separate_layer_depths flag carefully, it's expensive!
        /// </summary>
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            SeparateLayerDepths = 1,
            SortBehindTransparents = 2,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Fpch = ((TagClass)("fpch"));
    }
}
