//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("pathfinding_data_block")]
    public partial class PathfindingDataBlock : GuerillaBlock, IWriteDeferrable
    {
        public SectorBlock[] Sectors = new SectorBlock[0];
        public SectorLinkBlock[] Links = new SectorLinkBlock[0];
        public RefBlock[] Refs = new RefBlock[0];
        public SectorBsp2dNodesBlock[] Bsp2dNodes = new SectorBsp2dNodesBlock[0];
        public SurfaceFlagsBlock[] SurfaceFlags = new SurfaceFlagsBlock[0];
        public SectorVertexBlock[] Vertices = new SectorVertexBlock[0];
        public EnvironmentObjectRefs[] ObjectRefs = new EnvironmentObjectRefs[0];
        public PathfindingHintsBlock[] PathfindingHints = new PathfindingHintsBlock[0];
        public InstancedGeometryReferenceBlock[] InstancedGeometryRefs = new InstancedGeometryReferenceBlock[0];
        public int StructureChecksum;
        private byte[] fieldpad = new byte[32];
        public UserHintBlock[] UserplacedHints = new UserHintBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 116;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(28));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            this.StructureChecksum = binaryReader.ReadInt32();
            this.fieldpad = binaryReader.ReadBytes(32);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(72));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Sectors = base.ReadBlockArrayData<SectorBlock>(binaryReader, pointerQueue.Dequeue());
            this.Links = base.ReadBlockArrayData<SectorLinkBlock>(binaryReader, pointerQueue.Dequeue());
            this.Refs = base.ReadBlockArrayData<RefBlock>(binaryReader, pointerQueue.Dequeue());
            this.Bsp2dNodes = base.ReadBlockArrayData<SectorBsp2dNodesBlock>(binaryReader, pointerQueue.Dequeue());
            this.SurfaceFlags = base.ReadBlockArrayData<SurfaceFlagsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Vertices = base.ReadBlockArrayData<SectorVertexBlock>(binaryReader, pointerQueue.Dequeue());
            this.ObjectRefs = base.ReadBlockArrayData<EnvironmentObjectRefs>(binaryReader, pointerQueue.Dequeue());
            this.PathfindingHints = base.ReadBlockArrayData<PathfindingHintsBlock>(binaryReader, pointerQueue.Dequeue());
            this.InstancedGeometryRefs = base.ReadBlockArrayData<InstancedGeometryReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.UserplacedHints = base.ReadBlockArrayData<UserHintBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.DeferReferences(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.Sectors);
            queueableBinaryWriter.Defer(this.Links);
            queueableBinaryWriter.Defer(this.Refs);
            queueableBinaryWriter.Defer(this.Bsp2dNodes);
            queueableBinaryWriter.Defer(this.SurfaceFlags);
            queueableBinaryWriter.Defer(this.Vertices);
            queueableBinaryWriter.Defer(this.ObjectRefs);
            queueableBinaryWriter.Defer(this.PathfindingHints);
            queueableBinaryWriter.Defer(this.InstancedGeometryRefs);
            queueableBinaryWriter.Defer(this.UserplacedHints);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.WritePointer(this.Sectors);
            queueableBinaryWriter.WritePointer(this.Links);
            queueableBinaryWriter.WritePointer(this.Refs);
            queueableBinaryWriter.WritePointer(this.Bsp2dNodes);
            queueableBinaryWriter.WritePointer(this.SurfaceFlags);
            queueableBinaryWriter.WritePointer(this.Vertices);
            queueableBinaryWriter.WritePointer(this.ObjectRefs);
            queueableBinaryWriter.WritePointer(this.PathfindingHints);
            queueableBinaryWriter.WritePointer(this.InstancedGeometryRefs);
            queueableBinaryWriter.Write(this.StructureChecksum);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.WritePointer(this.UserplacedHints);
        }
    }
}
