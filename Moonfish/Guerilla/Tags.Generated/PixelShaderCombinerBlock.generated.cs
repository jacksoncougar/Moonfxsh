//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class PixelShaderCombinerBlock : GuerillaBlock, IWriteQueueable
    {
        private byte[] fieldpad = new byte[16];
        public Moonfish.Tags.ColourA1R1G1B1 ConstantColor0;
        public Moonfish.Tags.ColourA1R1G1B1 ConstantColor1;
        public byte ColorARegisterPtrIndex;
        public byte ColorBRegisterPtrIndex;
        public byte ColorCRegisterPtrIndex;
        public byte ColorDRegisterPtrIndex;
        public byte AlphaARegisterPtrIndex;
        public byte AlphaBRegisterPtrIndex;
        public byte AlphaCRegisterPtrIndex;
        public byte AlphaDRegisterPtrIndex;
        public override int SerializedSize
        {
            get
            {
                return 32;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.fieldpad = binaryReader.ReadBytes(16);
            this.ConstantColor0 = binaryReader.ReadColourA1R1G1B1();
            this.ConstantColor1 = binaryReader.ReadColourA1R1G1B1();
            this.ColorARegisterPtrIndex = binaryReader.ReadByte();
            this.ColorBRegisterPtrIndex = binaryReader.ReadByte();
            this.ColorCRegisterPtrIndex = binaryReader.ReadByte();
            this.ColorDRegisterPtrIndex = binaryReader.ReadByte();
            this.AlphaARegisterPtrIndex = binaryReader.ReadByte();
            this.AlphaBRegisterPtrIndex = binaryReader.ReadByte();
            this.AlphaCRegisterPtrIndex = binaryReader.ReadByte();
            this.AlphaDRegisterPtrIndex = binaryReader.ReadByte();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.ConstantColor0);
            queueableBlamBinaryWriter.Write(this.ConstantColor1);
            queueableBlamBinaryWriter.Write(this.ColorARegisterPtrIndex);
            queueableBlamBinaryWriter.Write(this.ColorBRegisterPtrIndex);
            queueableBlamBinaryWriter.Write(this.ColorCRegisterPtrIndex);
            queueableBlamBinaryWriter.Write(this.ColorDRegisterPtrIndex);
            queueableBlamBinaryWriter.Write(this.AlphaARegisterPtrIndex);
            queueableBlamBinaryWriter.Write(this.AlphaBRegisterPtrIndex);
            queueableBlamBinaryWriter.Write(this.AlphaCRegisterPtrIndex);
            queueableBlamBinaryWriter.Write(this.AlphaDRegisterPtrIndex);
        }
    }
}
