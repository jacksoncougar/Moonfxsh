//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class PlatformSoundFilterBlock : GuerillaBlock, IWriteQueueable
    {
        public FilterTypeEnum FilterType;
        public int FilterWidth;
        public SoundPlaybackParameterDefinitionBlock LeftFilterFrequency = new SoundPlaybackParameterDefinitionBlock();
        public SoundPlaybackParameterDefinitionBlock LeftFilterGain = new SoundPlaybackParameterDefinitionBlock();
        public SoundPlaybackParameterDefinitionBlock RightFilterFrequency = new SoundPlaybackParameterDefinitionBlock();
        public SoundPlaybackParameterDefinitionBlock RightFilterGain = new SoundPlaybackParameterDefinitionBlock();
        public override int SerializedSize
        {
            get
            {
                return 72;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.FilterType = ((FilterTypeEnum)(binaryReader.ReadInt32()));
            this.FilterWidth = binaryReader.ReadInt32();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.LeftFilterFrequency.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.LeftFilterGain.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.RightFilterFrequency.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.RightFilterGain.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.LeftFilterFrequency.ReadInstances(binaryReader, pointerQueue);
            this.LeftFilterGain.ReadInstances(binaryReader, pointerQueue);
            this.RightFilterFrequency.ReadInstances(binaryReader, pointerQueue);
            this.RightFilterGain.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            this.LeftFilterFrequency.QueueWrites(queueableBlamBinaryWriter);
            this.LeftFilterGain.QueueWrites(queueableBlamBinaryWriter);
            this.RightFilterFrequency.QueueWrites(queueableBlamBinaryWriter);
            this.RightFilterGain.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((int)(this.FilterType)));
            queueableBlamBinaryWriter.Write(this.FilterWidth);
            this.LeftFilterFrequency.Write_(queueableBlamBinaryWriter);
            this.LeftFilterGain.Write_(queueableBlamBinaryWriter);
            this.RightFilterFrequency.Write_(queueableBlamBinaryWriter);
            this.RightFilterGain.Write_(queueableBlamBinaryWriter);
        }
        /// <summary>
        /// DLS2 filtering:
        ///    resonance gain range: [0, 22.5] dB
        ///
        ///parametric EQ:
        ///    gain range: [-64, 14] dB
        ///
        ///for mono sounds:
        ///    the left filter controls the DLS 2 parameters
        ///    the right filter controls the Parametric EQ parameters
        ///
        ///for stereo sounds:
        ///    both left and right channels must have the same filter
        ///    i.e., filter type both is invalid
        /// </summary>
        public enum FilterTypeEnum : int
        {
            ParametricEQ = 0,
            DLS2 = 1,
            BothonlyValidForMono = 2,
        }
    }
}
