//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("player_control_block")]
    public partial class PlayerControlBlock : GuerillaBlock, IWriteDeferrable
    {
        public float MagnetismFriction;
        public float MagnetismAdhesion;
        public float InconsequentialTargetScale;
        private byte[] fieldpad = new byte[12];
        public OpenTK.Vector2 CrosshairLocation;
        public float SecondsToStart;
        public float SecondsToFullSpeed;
        public float DecayRate;
        public float FullSpeedMultiplier;
        public float PeggedMagnitude;
        public float PeggedAngularThreshold;
        private byte[] fieldpad0 = new byte[8];
        public float LookDefaultPitchRate;
        public float LookDefaultYawRate;
        public float LookPegThreshold01;
        public float LookYawAccelerationTime;
        public float LookYawAccelerationScale;
        public float LookPitchAccelerationTime;
        public float LookPitchAccelerationScale;
        public float LookAutolevellingScale;
        private byte[] fieldpad1 = new byte[8];
        public float GravityScale;
        private byte[] fieldpad2 = new byte[2];
        public short MinimumAutolevellingTicks;
        public float MinimumAngleForVehicleFlipping;
        public LookFunctionBlock[] LookFunction = new LookFunctionBlock[0];
        public float MinimumActionHoldTime;
        public override int SerializedSize
        {
            get
            {
                return 128;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.MagnetismFriction = binaryReader.ReadSingle();
            this.MagnetismAdhesion = binaryReader.ReadSingle();
            this.InconsequentialTargetScale = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(12);
            this.CrosshairLocation = binaryReader.ReadVector2();
            this.SecondsToStart = binaryReader.ReadSingle();
            this.SecondsToFullSpeed = binaryReader.ReadSingle();
            this.DecayRate = binaryReader.ReadSingle();
            this.FullSpeedMultiplier = binaryReader.ReadSingle();
            this.PeggedMagnitude = binaryReader.ReadSingle();
            this.PeggedAngularThreshold = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(8);
            this.LookDefaultPitchRate = binaryReader.ReadSingle();
            this.LookDefaultYawRate = binaryReader.ReadSingle();
            this.LookPegThreshold01 = binaryReader.ReadSingle();
            this.LookYawAccelerationTime = binaryReader.ReadSingle();
            this.LookYawAccelerationScale = binaryReader.ReadSingle();
            this.LookPitchAccelerationTime = binaryReader.ReadSingle();
            this.LookPitchAccelerationScale = binaryReader.ReadSingle();
            this.LookAutolevellingScale = binaryReader.ReadSingle();
            this.fieldpad1 = binaryReader.ReadBytes(8);
            this.GravityScale = binaryReader.ReadSingle();
            this.fieldpad2 = binaryReader.ReadBytes(2);
            this.MinimumAutolevellingTicks = binaryReader.ReadInt16();
            this.MinimumAngleForVehicleFlipping = binaryReader.ReadSingle();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            this.MinimumActionHoldTime = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.LookFunction = base.ReadBlockArrayData<LookFunctionBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.LookFunction);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.MagnetismFriction);
            writer.Write(this.MagnetismAdhesion);
            writer.Write(this.InconsequentialTargetScale);
            writer.Write(this.fieldpad);
            writer.Write(this.CrosshairLocation);
            writer.Write(this.SecondsToStart);
            writer.Write(this.SecondsToFullSpeed);
            writer.Write(this.DecayRate);
            writer.Write(this.FullSpeedMultiplier);
            writer.Write(this.PeggedMagnitude);
            writer.Write(this.PeggedAngularThreshold);
            writer.Write(this.fieldpad0);
            writer.Write(this.LookDefaultPitchRate);
            writer.Write(this.LookDefaultYawRate);
            writer.Write(this.LookPegThreshold01);
            writer.Write(this.LookYawAccelerationTime);
            writer.Write(this.LookYawAccelerationScale);
            writer.Write(this.LookPitchAccelerationTime);
            writer.Write(this.LookPitchAccelerationScale);
            writer.Write(this.LookAutolevellingScale);
            writer.Write(this.fieldpad1);
            writer.Write(this.GravityScale);
            writer.Write(this.fieldpad2);
            writer.Write(this.MinimumAutolevellingTicks);
            writer.Write(this.MinimumAngleForVehicleFlipping);
            writer.WritePointer(this.LookFunction);
            writer.Write(this.MinimumActionHoldTime);
        }
    }
}
