//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("player_information_block")]
    public partial class PlayerInformationBlock : GuerillaBlock, IWriteQueueable
    {
        [Moonfish.Tags.TagReferenceAttribute("unit")]
        public Moonfish.Tags.TagReference Unused;
        private byte[] fieldpad = new byte[28];
        public float WalkingSpeed;
        private byte[] fieldpad0 = new byte[4];
        public float RunForward;
        public float RunBackward;
        public float RunSideways;
        public float RunAcceleration;
        public float SneakForward;
        public float SneakBackward;
        public float SneakSideways;
        public float SneakAcceleration;
        public float AirborneAcceleration;
        private byte[] fieldpad1 = new byte[16];
        public OpenTK.Vector3 GrenadeOrigin;
        private byte[] fieldpad2 = new byte[12];
        public float StunMovementPenalty;
        public float StunTurningPenalty;
        public float StunJumpingPenalty;
        public float MinimumStunTime;
        public float MaximumStunTime;
        private byte[] fieldpad3 = new byte[8];
        public Moonfish.Model.Range FirstPersonIdleTime;
        public float FirstPersonSkipFraction;
        private byte[] fieldpad4 = new byte[16];
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference CoopRespawnEffect;
        public int BinocularsZoomCount;
        public Moonfish.Model.Range BinocularsZoomRange;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference BinocularsZoomInSound;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference BinocularsZoomOutSound;
        private byte[] fieldpad5 = new byte[16];
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference ActiveCamouflageOn;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference ActiveCamouflageOff;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference ActiveCamouflageError;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference ActiveCamouflageReady;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference FlashlightOn;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference FlashlightOff;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference IceCream;
        public override int SerializedSize
        {
            get
            {
                return 284;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Unused = binaryReader.ReadTagReference();
            this.fieldpad = binaryReader.ReadBytes(28);
            this.WalkingSpeed = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(4);
            this.RunForward = binaryReader.ReadSingle();
            this.RunBackward = binaryReader.ReadSingle();
            this.RunSideways = binaryReader.ReadSingle();
            this.RunAcceleration = binaryReader.ReadSingle();
            this.SneakForward = binaryReader.ReadSingle();
            this.SneakBackward = binaryReader.ReadSingle();
            this.SneakSideways = binaryReader.ReadSingle();
            this.SneakAcceleration = binaryReader.ReadSingle();
            this.AirborneAcceleration = binaryReader.ReadSingle();
            this.fieldpad1 = binaryReader.ReadBytes(16);
            this.GrenadeOrigin = binaryReader.ReadVector3();
            this.fieldpad2 = binaryReader.ReadBytes(12);
            this.StunMovementPenalty = binaryReader.ReadSingle();
            this.StunTurningPenalty = binaryReader.ReadSingle();
            this.StunJumpingPenalty = binaryReader.ReadSingle();
            this.MinimumStunTime = binaryReader.ReadSingle();
            this.MaximumStunTime = binaryReader.ReadSingle();
            this.fieldpad3 = binaryReader.ReadBytes(8);
            this.FirstPersonIdleTime = binaryReader.ReadRange();
            this.FirstPersonSkipFraction = binaryReader.ReadSingle();
            this.fieldpad4 = binaryReader.ReadBytes(16);
            this.CoopRespawnEffect = binaryReader.ReadTagReference();
            this.BinocularsZoomCount = binaryReader.ReadInt32();
            this.BinocularsZoomRange = binaryReader.ReadRange();
            this.BinocularsZoomInSound = binaryReader.ReadTagReference();
            this.BinocularsZoomOutSound = binaryReader.ReadTagReference();
            this.fieldpad5 = binaryReader.ReadBytes(16);
            this.ActiveCamouflageOn = binaryReader.ReadTagReference();
            this.ActiveCamouflageOff = binaryReader.ReadTagReference();
            this.ActiveCamouflageError = binaryReader.ReadTagReference();
            this.ActiveCamouflageReady = binaryReader.ReadTagReference();
            this.FlashlightOn = binaryReader.ReadTagReference();
            this.FlashlightOff = binaryReader.ReadTagReference();
            this.IceCream = binaryReader.ReadTagReference();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.Unused);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.WalkingSpeed);
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.RunForward);
            queueableBinaryWriter.Write(this.RunBackward);
            queueableBinaryWriter.Write(this.RunSideways);
            queueableBinaryWriter.Write(this.RunAcceleration);
            queueableBinaryWriter.Write(this.SneakForward);
            queueableBinaryWriter.Write(this.SneakBackward);
            queueableBinaryWriter.Write(this.SneakSideways);
            queueableBinaryWriter.Write(this.SneakAcceleration);
            queueableBinaryWriter.Write(this.AirborneAcceleration);
            queueableBinaryWriter.Write(this.fieldpad1);
            queueableBinaryWriter.Write(this.GrenadeOrigin);
            queueableBinaryWriter.Write(this.fieldpad2);
            queueableBinaryWriter.Write(this.StunMovementPenalty);
            queueableBinaryWriter.Write(this.StunTurningPenalty);
            queueableBinaryWriter.Write(this.StunJumpingPenalty);
            queueableBinaryWriter.Write(this.MinimumStunTime);
            queueableBinaryWriter.Write(this.MaximumStunTime);
            queueableBinaryWriter.Write(this.fieldpad3);
            queueableBinaryWriter.Write(this.FirstPersonIdleTime);
            queueableBinaryWriter.Write(this.FirstPersonSkipFraction);
            queueableBinaryWriter.Write(this.fieldpad4);
            queueableBinaryWriter.Write(this.CoopRespawnEffect);
            queueableBinaryWriter.Write(this.BinocularsZoomCount);
            queueableBinaryWriter.Write(this.BinocularsZoomRange);
            queueableBinaryWriter.Write(this.BinocularsZoomInSound);
            queueableBinaryWriter.Write(this.BinocularsZoomOutSound);
            queueableBinaryWriter.Write(this.fieldpad5);
            queueableBinaryWriter.Write(this.ActiveCamouflageOn);
            queueableBinaryWriter.Write(this.ActiveCamouflageOff);
            queueableBinaryWriter.Write(this.ActiveCamouflageError);
            queueableBinaryWriter.Write(this.ActiveCamouflageReady);
            queueableBinaryWriter.Write(this.FlashlightOn);
            queueableBinaryWriter.Write(this.FlashlightOff);
            queueableBinaryWriter.Write(this.IceCream);
        }
    }
}
