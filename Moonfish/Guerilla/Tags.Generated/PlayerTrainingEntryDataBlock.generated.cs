//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("player_training_entry_data_block")]
    public partial class PlayerTrainingEntryDataBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.StringIdent DisplayString;
        public Moonfish.Tags.StringIdent DisplayString2;
        public Moonfish.Tags.StringIdent DisplayString3;
        public short MaxDisplayTime;
        public short DisplayCount;
        public short DissapearDelay;
        public short RedisplayDelay;
        public float DisplayDelay;
        public Flags PlayerTrainingEntryDataFlags;
        private byte[] fieldpad = new byte[2];
        public override int SerializedSize
        {
            get
            {
                return 28;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.DisplayString = binaryReader.ReadStringIdent();
            this.DisplayString2 = binaryReader.ReadStringIdent();
            this.DisplayString3 = binaryReader.ReadStringIdent();
            this.MaxDisplayTime = binaryReader.ReadInt16();
            this.DisplayCount = binaryReader.ReadInt16();
            this.DissapearDelay = binaryReader.ReadInt16();
            this.RedisplayDelay = binaryReader.ReadInt16();
            this.DisplayDelay = binaryReader.ReadSingle();
            this.PlayerTrainingEntryDataFlags = ((Flags)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.DeferReferences(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.DisplayString);
            queueableBinaryWriter.Write(this.DisplayString2);
            queueableBinaryWriter.Write(this.DisplayString3);
            queueableBinaryWriter.Write(this.MaxDisplayTime);
            queueableBinaryWriter.Write(this.DisplayCount);
            queueableBinaryWriter.Write(this.DissapearDelay);
            queueableBinaryWriter.Write(this.RedisplayDelay);
            queueableBinaryWriter.Write(this.DisplayDelay);
            queueableBinaryWriter.Write(((short)(this.PlayerTrainingEntryDataFlags)));
            queueableBinaryWriter.Write(this.fieldpad);
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            NotInMultiplayer = 1,
        }
    }
}
