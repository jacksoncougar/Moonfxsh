//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("pphy")]
    [TagBlockOriginalNameAttribute("point_physics_block")]
    public partial class PointPhysicsBlock : GuerillaBlock, IWriteDeferrable
    {
        public Flags PointPhysicsFlags;
        private byte[] fieldpad = new byte[28];
        public float Density;
        public float AirFriction;
        public float WaterFriction;
        public float SurfaceFriction;
        public float Elasticity;
        private byte[] fieldpad0 = new byte[12];
        public override int SerializedSize
        {
            get
            {
                return 64;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.PointPhysicsFlags = ((Flags)(binaryReader.ReadInt32()));
            this.fieldpad = binaryReader.ReadBytes(28);
            this.Density = binaryReader.ReadSingle();
            this.AirFriction = binaryReader.ReadSingle();
            this.WaterFriction = binaryReader.ReadSingle();
            this.SurfaceFriction = binaryReader.ReadSingle();
            this.Elasticity = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(12);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((int)(this.PointPhysicsFlags)));
            writer.Write(this.fieldpad);
            writer.Write(this.Density);
            writer.Write(this.AirFriction);
            writer.Write(this.WaterFriction);
            writer.Write(this.SurfaceFriction);
            writer.Write(this.Elasticity);
            writer.Write(this.fieldpad0);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            UNUSED = 1,
            CollidesWithStructures = 2,
            CollidesWithWaterSurface = 4,
            UsesSimpleWindtheWindOnThisPointWontHaveHighfrequencyVariations = 8,
            UsesDampedWindtheWindOnThisPointWillBeArtificiallySlow = 16,
            NoGravitythePointIsNotAffectedByGravity = 32,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Pphy = ((TagClass)("pphy"));
    }
}
