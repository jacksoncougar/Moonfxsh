//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("powered_mass_point_block")]
    public partial class PoweredMassPointBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.String32 Name;
        public Flags PoweredMassPointFlags;
        public float AntigravStrength;
        public float AntigravOffset;
        public float AntigravHeight;
        public float AntigravDampFraction;
        public float AntigravNormalK1;
        public float AntigravNormalK0;
        public Moonfish.Tags.StringIdent DamageSourceRegionName;
        private byte[] fieldpad = new byte[64];
        public override int SerializedSize
        {
            get
            {
                return 128;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadString32();
            this.PoweredMassPointFlags = ((Flags)(binaryReader.ReadInt32()));
            this.AntigravStrength = binaryReader.ReadSingle();
            this.AntigravOffset = binaryReader.ReadSingle();
            this.AntigravHeight = binaryReader.ReadSingle();
            this.AntigravDampFraction = binaryReader.ReadSingle();
            this.AntigravNormalK1 = binaryReader.ReadSingle();
            this.AntigravNormalK0 = binaryReader.ReadSingle();
            this.DamageSourceRegionName = binaryReader.ReadStringIdent();
            this.fieldpad = binaryReader.ReadBytes(64);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.Name);
            queueableBinaryWriter.Write(((int)(this.PoweredMassPointFlags)));
            queueableBinaryWriter.Write(this.AntigravStrength);
            queueableBinaryWriter.Write(this.AntigravOffset);
            queueableBinaryWriter.Write(this.AntigravHeight);
            queueableBinaryWriter.Write(this.AntigravDampFraction);
            queueableBinaryWriter.Write(this.AntigravNormalK1);
            queueableBinaryWriter.Write(this.AntigravNormalK0);
            queueableBinaryWriter.Write(this.DamageSourceRegionName);
            queueableBinaryWriter.Write(this.fieldpad);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            GroundFriction = 1,
            WaterFriction = 2,
            AirFriction = 4,
            WaterLift = 8,
            AirLift = 16,
            Thrust = 32,
            Antigrav = 64,
            GetsDamageFromRegion = 128,
        }
    }
}
