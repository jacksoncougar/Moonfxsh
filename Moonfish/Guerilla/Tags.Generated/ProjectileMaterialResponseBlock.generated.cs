//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class ProjectileMaterialResponseBlock : GuerillaBlock, IWriteQueueable
    {
        public Flags ProjectileMaterialResponseFlags;
        public ResponseEnum Response;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference DONOTUSE;
        public Moonfish.Tags.StringIdent MaterialName;
        private byte[] fieldskip = new byte[4];
        public ProjectileMaterialResponseResponseEnum ProjectileMaterialResponseProjectileMaterialResponseResponse;
        public ProjectileMaterialResponseFlags0 ProjectileMaterialResponseProjectileMaterialResponseFlags0;
        public float ChanceFraction;
        public Moonfish.Model.Range Between;
        public Moonfish.Model.Range And;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference DONOTUSE0;
        public ScaleEffectsByEnum ScaleEffectsBy;
        private byte[] fieldpad = new byte[2];
        public float AngularNoise;
        public float VelocityNoise;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference DONOTUSE1;
        public float InitialFriction;
        public float MaximumDistance;
        public float ParallelFriction;
        public float PerpendicularFriction;
        public override int SerializedSize
        {
            get
            {
                return 88;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.ProjectileMaterialResponseFlags = ((Flags)(binaryReader.ReadInt16()));
            this.Response = ((ResponseEnum)(binaryReader.ReadInt16()));
            this.DONOTUSE = binaryReader.ReadTagReference();
            this.MaterialName = binaryReader.ReadStringIdent();
            this.fieldskip = binaryReader.ReadBytes(4);
            this.ProjectileMaterialResponseProjectileMaterialResponseResponse = ((ProjectileMaterialResponseResponseEnum)(binaryReader.ReadInt16()));
            this.ProjectileMaterialResponseProjectileMaterialResponseFlags0 = ((ProjectileMaterialResponseFlags0)(binaryReader.ReadInt16()));
            this.ChanceFraction = binaryReader.ReadSingle();
            this.Between = binaryReader.ReadRange();
            this.And = binaryReader.ReadRange();
            this.DONOTUSE0 = binaryReader.ReadTagReference();
            this.ScaleEffectsBy = ((ScaleEffectsByEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.AngularNoise = binaryReader.ReadSingle();
            this.VelocityNoise = binaryReader.ReadSingle();
            this.DONOTUSE1 = binaryReader.ReadTagReference();
            this.InitialFriction = binaryReader.ReadSingle();
            this.MaximumDistance = binaryReader.ReadSingle();
            this.ParallelFriction = binaryReader.ReadSingle();
            this.PerpendicularFriction = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.ProjectileMaterialResponseFlags)));
            queueableBinaryWriter.Write(((short)(this.Response)));
            queueableBinaryWriter.Write(this.DONOTUSE);
            queueableBinaryWriter.Write(this.MaterialName);
            queueableBinaryWriter.Write(this.fieldskip);
            queueableBinaryWriter.Write(((short)(this.ProjectileMaterialResponseProjectileMaterialResponseResponse)));
            queueableBinaryWriter.Write(((short)(this.ProjectileMaterialResponseProjectileMaterialResponseFlags0)));
            queueableBinaryWriter.Write(this.ChanceFraction);
            queueableBinaryWriter.Write(this.Between);
            queueableBinaryWriter.Write(this.And);
            queueableBinaryWriter.Write(this.DONOTUSE0);
            queueableBinaryWriter.Write(((short)(this.ScaleEffectsBy)));
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.AngularNoise);
            queueableBinaryWriter.Write(this.VelocityNoise);
            queueableBinaryWriter.Write(this.DONOTUSE1);
            queueableBinaryWriter.Write(this.InitialFriction);
            queueableBinaryWriter.Write(this.MaximumDistance);
            queueableBinaryWriter.Write(this.ParallelFriction);
            queueableBinaryWriter.Write(this.PerpendicularFriction);
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            CannotBeOverpenetrated = 1,
        }
        /// <summary>
        /// (if the potential result, below, fails to happen)
        /// </summary>
        public enum ResponseEnum : short
        {
            Impactdetonate = 0,
            Fizzle = 1,
            Overpenetrate = 2,
            Attach = 3,
            Bounce = 4,
            Bouncedud = 5,
            Fizzlericochet = 6,
        }
        public enum ProjectileMaterialResponseResponseEnum : short
        {
            Impactdetonate = 0,
            Fizzle = 1,
            Overpenetrate = 2,
            Attach = 3,
            Bounce = 4,
            Bouncedud = 5,
            Fizzlericochet = 6,
        }
        [System.FlagsAttribute()]
        public enum ProjectileMaterialResponseFlags0 : short
        {
            None = 0,
            OnlyAgainstUnits = 1,
            NeverAgainstUnits = 2,
        }
        public enum ScaleEffectsByEnum : short
        {
            Damage = 0,
            Angle = 1,
        }
    }
}
