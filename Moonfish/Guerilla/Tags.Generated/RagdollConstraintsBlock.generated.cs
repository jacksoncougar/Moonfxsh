//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("ragdoll_constraints_block")]
    public partial class RagdollConstraintsBlock : GuerillaBlock, IWriteDeferrable
    {
        public ConstraintBodiesStructBlock ConstraintBodies = new ConstraintBodiesStructBlock();
        private byte[] fieldpad = new byte[4];
        public float MinTwist;
        public float MaxTwist;
        public float MinCone;
        public float MaxCone;
        public float MinPlane;
        public float MaxPlane;
        public float MaxFricitonTorque;
        public override int SerializedSize
        {
            get
            {
                return 148;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.ConstraintBodies.ReadFields(binaryReader)));
            this.fieldpad = binaryReader.ReadBytes(4);
            this.MinTwist = binaryReader.ReadSingle();
            this.MaxTwist = binaryReader.ReadSingle();
            this.MinCone = binaryReader.ReadSingle();
            this.MaxCone = binaryReader.ReadSingle();
            this.MinPlane = binaryReader.ReadSingle();
            this.MaxPlane = binaryReader.ReadSingle();
            this.MaxFricitonTorque = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.ConstraintBodies.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            this.ConstraintBodies.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            this.ConstraintBodies.Write(writer);
            writer.Write(this.fieldpad);
            writer.Write(this.MinTwist);
            writer.Write(this.MaxTwist);
            writer.Write(this.MinCone);
            writer.Write(this.MaxCone);
            writer.Write(this.MinPlane);
            writer.Write(this.MaxPlane);
            writer.Write(this.MaxFricitonTorque);
        }
    }
}
