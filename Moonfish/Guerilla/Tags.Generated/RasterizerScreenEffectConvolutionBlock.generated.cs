//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("rasterizer_screen_effect_convolution_block")]
    public partial class RasterizerScreenEffectConvolutionBlock : GuerillaBlock, IWriteQueueable
    {
        public Flags RasterizerScreenEffectConvolutionFlags;
        private byte[] fieldpad = new byte[2];
        private byte[] fieldpad0 = new byte[64];
        public float ConvolutionAmount;
        public float FilterScale;
        public float FilterBoxFactor;
        public float ZoomFalloffRadius;
        public float ZoomCutoffRadius;
        public float ResolutionScale;
        public override int SerializedSize
        {
            get
            {
                return 92;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.RasterizerScreenEffectConvolutionFlags = ((Flags)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.fieldpad0 = binaryReader.ReadBytes(64);
            this.ConvolutionAmount = binaryReader.ReadSingle();
            this.FilterScale = binaryReader.ReadSingle();
            this.FilterBoxFactor = binaryReader.ReadSingle();
            this.ZoomFalloffRadius = binaryReader.ReadSingle();
            this.ZoomCutoffRadius = binaryReader.ReadSingle();
            this.ResolutionScale = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.RasterizerScreenEffectConvolutionFlags)));
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.ConvolutionAmount);
            queueableBinaryWriter.Write(this.FilterScale);
            queueableBinaryWriter.Write(this.FilterBoxFactor);
            queueableBinaryWriter.Write(this.ZoomFalloffRadius);
            queueableBinaryWriter.Write(this.ZoomCutoffRadius);
            queueableBinaryWriter.Write(this.ResolutionScale);
        }
        /// <summary>
        /// Convolution blurs the target of this pass reference to the SCREEN EFFECT CONVOLUTION buffer, which is accessible in the shader system through a texture extern. It is not cheap especially for large convolution amounts, so please use it sparingly!! Note that the resolution will be clamped to 64x64 minimum and 768000 pixels total maximum.
        /// </summary>
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            OnlyWhenPrimaryIsActive = 1,
            OnlyWhenSecondaryIsActive = 2,
            PredatorZoom = 4,
        }
    }
}
