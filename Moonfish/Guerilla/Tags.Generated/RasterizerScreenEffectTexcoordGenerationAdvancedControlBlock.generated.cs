//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("rasterizer_screen_effect_texcoord_generation_advanced_control_block")]
    public partial class RasterizerScreenEffectTexcoordGenerationAdvancedControlBlock : GuerillaBlock, IWriteDeferrable
    {
        public Stage0Flags RasterizerScreenEffectTexcoordGenerationAdvancedControlStage0Flags;
        public Stage1Flags RasterizerScreenEffectTexcoordGenerationAdvancedControlStage1Flags;
        public Stage2Flags RasterizerScreenEffectTexcoordGenerationAdvancedControlStage2Flags;
        public Stage3Flags RasterizerScreenEffectTexcoordGenerationAdvancedControlStage3Flags;
        public OpenTK.Vector4 Stage0Offset;
        public OpenTK.Vector4 Stage1Offset;
        public OpenTK.Vector4 Stage2Offset;
        public OpenTK.Vector4 Stage3Offset;
        public override int SerializedSize
        {
            get
            {
                return 72;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.RasterizerScreenEffectTexcoordGenerationAdvancedControlStage0Flags = ((Stage0Flags)(binaryReader.ReadInt16()));
            this.RasterizerScreenEffectTexcoordGenerationAdvancedControlStage1Flags = ((Stage1Flags)(binaryReader.ReadInt16()));
            this.RasterizerScreenEffectTexcoordGenerationAdvancedControlStage2Flags = ((Stage2Flags)(binaryReader.ReadInt16()));
            this.RasterizerScreenEffectTexcoordGenerationAdvancedControlStage3Flags = ((Stage3Flags)(binaryReader.ReadInt16()));
            this.Stage0Offset = binaryReader.ReadVector4();
            this.Stage1Offset = binaryReader.ReadVector4();
            this.Stage2Offset = binaryReader.ReadVector4();
            this.Stage3Offset = binaryReader.ReadVector4();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((short)(this.RasterizerScreenEffectTexcoordGenerationAdvancedControlStage0Flags)));
            writer.Write(((short)(this.RasterizerScreenEffectTexcoordGenerationAdvancedControlStage1Flags)));
            writer.Write(((short)(this.RasterizerScreenEffectTexcoordGenerationAdvancedControlStage2Flags)));
            writer.Write(((short)(this.RasterizerScreenEffectTexcoordGenerationAdvancedControlStage3Flags)));
            writer.Write(this.Stage0Offset);
            writer.Write(this.Stage1Offset);
            writer.Write(this.Stage2Offset);
            writer.Write(this.Stage3Offset);
        }
        [System.FlagsAttribute()]
        public enum Stage0Flags : short
        {
            None = 0,
            XyScaledByZFar = 1,
        }
        [System.FlagsAttribute()]
        public enum Stage1Flags : short
        {
            None = 0,
            XyScaledByZFar = 1,
        }
        [System.FlagsAttribute()]
        public enum Stage2Flags : short
        {
            None = 0,
            XyScaledByZFar = 1,
        }
        [System.FlagsAttribute()]
        public enum Stage3Flags : short
        {
            None = 0,
            XyScaledByZFar = 1,
        }
    }
}
