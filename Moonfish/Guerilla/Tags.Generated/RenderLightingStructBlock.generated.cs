//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("render_lighting_struct_block")]
    public partial class RenderLightingStructBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.ColourR8G8B8 Ambient;
        public OpenTK.Vector3 ShadowDirection;
        public float LightingAccuracy;
        public float ShadowOpacity;
        public Moonfish.Tags.ColourR8G8B8 PrimaryDirectionColor;
        public OpenTK.Vector3 PrimaryDirection;
        public Moonfish.Tags.ColourR8G8B8 SecondaryDirectionColor;
        public OpenTK.Vector3 SecondaryDirection;
        public short ShIndex;
        private byte[] fieldpad = new byte[2];
        public override int SerializedSize
        {
            get
            {
                return 84;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Ambient = binaryReader.ReadColourR8G8B8();
            this.ShadowDirection = binaryReader.ReadVector3();
            this.LightingAccuracy = binaryReader.ReadSingle();
            this.ShadowOpacity = binaryReader.ReadSingle();
            this.PrimaryDirectionColor = binaryReader.ReadColourR8G8B8();
            this.PrimaryDirection = binaryReader.ReadVector3();
            this.SecondaryDirectionColor = binaryReader.ReadColourR8G8B8();
            this.SecondaryDirection = binaryReader.ReadVector3();
            this.ShIndex = binaryReader.ReadInt16();
            this.fieldpad = binaryReader.ReadBytes(2);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Ambient);
            writer.Write(this.ShadowDirection);
            writer.Write(this.LightingAccuracy);
            writer.Write(this.ShadowOpacity);
            writer.Write(this.PrimaryDirectionColor);
            writer.Write(this.PrimaryDirection);
            writer.Write(this.SecondaryDirectionColor);
            writer.Write(this.SecondaryDirection);
            writer.Write(this.ShIndex);
            writer.Write(this.fieldpad);
        }
    }
}
