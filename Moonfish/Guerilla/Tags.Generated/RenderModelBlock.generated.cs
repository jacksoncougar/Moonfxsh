//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("mode")]
    public partial class RenderModelBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.StringIdent Name;
        public Flags RenderModelFlags;
        private byte[] fieldpad = new byte[2];
        private byte[] fieldpad0 = new byte[4];
        public GlobalTagImportInfoBlock[] ImportInfo = new GlobalTagImportInfoBlock[0];
        public GlobalGeometryCompressionInfoBlock[] CompressionInfo = new GlobalGeometryCompressionInfoBlock[0];
        public RenderModelRegionBlock[] Regions = new RenderModelRegionBlock[0];
        public RenderModelSectionBlock[] Sections = new RenderModelSectionBlock[0];
        public RenderModelInvalidSectionPairsBlock[] InvalidSectionPairBits = new RenderModelInvalidSectionPairsBlock[0];
        public RenderModelSectionGroupBlock[] SectionGroups = new RenderModelSectionGroupBlock[0];
        public byte L1SectionGroupIndex;
        public byte L2SectionGroupIndex;
        public byte L3SectionGroupIndex;
        public byte L4SectionGroupIndex;
        public byte L5SectionGroupIndex;
        public byte L6SectionGroupIndex;
        private byte[] fieldpad1 = new byte[2];
        public int NodeListChecksum;
        public RenderModelNodeBlock[] Nodes = new RenderModelNodeBlock[0];
        public RenderModelNodeMapBlockOLD[] NodeMap = new RenderModelNodeMapBlockOLD[0];
        public RenderModelMarkerGroupBlock[] MarkerGroups = new RenderModelMarkerGroupBlock[0];
        public GlobalGeometryMaterialBlock[] Materials = new GlobalGeometryMaterialBlock[0];
        public GlobalErrorReportCategoriesBlock[] Errors = new GlobalErrorReportCategoriesBlock[0];
        public float DontDrawOverCameraCosineAngle;
        public PrtInfoBlock[] PRTInfo = new PrtInfoBlock[0];
        public SectionRenderLeavesBlock[] SectionRenderLeaves = new SectionRenderLeavesBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 132;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadStringIdent();
            this.RenderModelFlags = ((Flags)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.fieldpad0 = binaryReader.ReadBytes(4);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(592));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(92));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            this.L1SectionGroupIndex = binaryReader.ReadByte();
            this.L2SectionGroupIndex = binaryReader.ReadByte();
            this.L3SectionGroupIndex = binaryReader.ReadByte();
            this.L4SectionGroupIndex = binaryReader.ReadByte();
            this.L5SectionGroupIndex = binaryReader.ReadByte();
            this.L6SectionGroupIndex = binaryReader.ReadByte();
            this.fieldpad1 = binaryReader.ReadBytes(2);
            this.NodeListChecksum = binaryReader.ReadInt32();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(96));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(676));
            this.DontDrawOverCameraCosineAngle = binaryReader.ReadSingle();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(88));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.ImportInfo = base.ReadBlockArrayData<GlobalTagImportInfoBlock>(binaryReader, pointerQueue.Dequeue());
            this.CompressionInfo = base.ReadBlockArrayData<GlobalGeometryCompressionInfoBlock>(binaryReader, pointerQueue.Dequeue());
            this.Regions = base.ReadBlockArrayData<RenderModelRegionBlock>(binaryReader, pointerQueue.Dequeue());
            this.Sections = base.ReadBlockArrayData<RenderModelSectionBlock>(binaryReader, pointerQueue.Dequeue());
            this.InvalidSectionPairBits = base.ReadBlockArrayData<RenderModelInvalidSectionPairsBlock>(binaryReader, pointerQueue.Dequeue());
            this.SectionGroups = base.ReadBlockArrayData<RenderModelSectionGroupBlock>(binaryReader, pointerQueue.Dequeue());
            this.Nodes = base.ReadBlockArrayData<RenderModelNodeBlock>(binaryReader, pointerQueue.Dequeue());
            this.NodeMap = base.ReadBlockArrayData<RenderModelNodeMapBlockOLD>(binaryReader, pointerQueue.Dequeue());
            this.MarkerGroups = base.ReadBlockArrayData<RenderModelMarkerGroupBlock>(binaryReader, pointerQueue.Dequeue());
            this.Materials = base.ReadBlockArrayData<GlobalGeometryMaterialBlock>(binaryReader, pointerQueue.Dequeue());
            this.Errors = base.ReadBlockArrayData<GlobalErrorReportCategoriesBlock>(binaryReader, pointerQueue.Dequeue());
            this.PRTInfo = base.ReadBlockArrayData<PrtInfoBlock>(binaryReader, pointerQueue.Dequeue());
            this.SectionRenderLeaves = base.ReadBlockArrayData<SectionRenderLeavesBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.ImportInfo);
            queueableBlamBinaryWriter.QueueWrite(this.CompressionInfo);
            queueableBlamBinaryWriter.QueueWrite(this.Regions);
            queueableBlamBinaryWriter.QueueWrite(this.Sections);
            queueableBlamBinaryWriter.QueueWrite(this.InvalidSectionPairBits);
            queueableBlamBinaryWriter.QueueWrite(this.SectionGroups);
            queueableBlamBinaryWriter.QueueWrite(this.Nodes);
            queueableBlamBinaryWriter.QueueWrite(this.NodeMap);
            queueableBlamBinaryWriter.QueueWrite(this.MarkerGroups);
            queueableBlamBinaryWriter.QueueWrite(this.Materials);
            queueableBlamBinaryWriter.QueueWrite(this.Errors);
            queueableBlamBinaryWriter.QueueWrite(this.PRTInfo);
            queueableBlamBinaryWriter.QueueWrite(this.SectionRenderLeaves);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.Name);
            queueableBlamBinaryWriter.Write(((short)(this.RenderModelFlags)));
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.WritePointer(this.ImportInfo);
            queueableBlamBinaryWriter.WritePointer(this.CompressionInfo);
            queueableBlamBinaryWriter.WritePointer(this.Regions);
            queueableBlamBinaryWriter.WritePointer(this.Sections);
            queueableBlamBinaryWriter.WritePointer(this.InvalidSectionPairBits);
            queueableBlamBinaryWriter.WritePointer(this.SectionGroups);
            queueableBlamBinaryWriter.Write(this.L1SectionGroupIndex);
            queueableBlamBinaryWriter.Write(this.L2SectionGroupIndex);
            queueableBlamBinaryWriter.Write(this.L3SectionGroupIndex);
            queueableBlamBinaryWriter.Write(this.L4SectionGroupIndex);
            queueableBlamBinaryWriter.Write(this.L5SectionGroupIndex);
            queueableBlamBinaryWriter.Write(this.L6SectionGroupIndex);
            queueableBlamBinaryWriter.Write(this.fieldpad1);
            queueableBlamBinaryWriter.Write(this.NodeListChecksum);
            queueableBlamBinaryWriter.WritePointer(this.Nodes);
            queueableBlamBinaryWriter.WritePointer(this.NodeMap);
            queueableBlamBinaryWriter.WritePointer(this.MarkerGroups);
            queueableBlamBinaryWriter.WritePointer(this.Materials);
            queueableBlamBinaryWriter.WritePointer(this.Errors);
            queueableBlamBinaryWriter.Write(this.DontDrawOverCameraCosineAngle);
            queueableBlamBinaryWriter.WritePointer(this.PRTInfo);
            queueableBlamBinaryWriter.WritePointer(this.SectionRenderLeaves);
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            RenderModelForceThirdPersonBit = 1,
            ForceCarmackreverse = 2,
            ForceNodeMaps = 4,
            GeometryPostprocessed = 8,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Mode = ((TagClass)("mode"));
    }
}
