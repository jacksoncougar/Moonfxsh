//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class RenderModelSectionBlock : GuerillaBlock, IWriteQueueable
    {
        public GlobalGeometryClassificationEnumDefinitionEnum GlobalGeometryClassificationEnumDefinition;
        private byte[] fieldpad = new byte[2];
        public GlobalGeometrySectionInfoStructBlock SectionInfo = new GlobalGeometrySectionInfoStructBlock();
        public Moonfish.Tags.ShortBlockIndex1 RigidNode;
        public Flags RenderModelSectionFlags;
        public RenderModelSectionDataBlock[] SectionData = new RenderModelSectionDataBlock[0];
        public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo = new GlobalGeometryBlockInfoStructBlock();
        public override int SerializedSize
        {
            get
            {
                return 92;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.GlobalGeometryClassificationEnumDefinition = ((GlobalGeometryClassificationEnumDefinitionEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.SectionInfo.ReadFields(binaryReader)));
            this.RigidNode = binaryReader.ReadShortBlockIndex1();
            this.RenderModelSectionFlags = ((Flags)(binaryReader.ReadInt16()));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(112));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.GeometryBlockInfo.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.SectionInfo.ReadInstances(binaryReader, pointerQueue);
            this.SectionData = base.ReadBlockArrayData<RenderModelSectionDataBlock>(binaryReader, pointerQueue.Dequeue());
            this.GeometryBlockInfo.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            this.SectionInfo.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.SectionData);
            this.GeometryBlockInfo.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((short)(this.GlobalGeometryClassificationEnumDefinition)));
            queueableBlamBinaryWriter.Write(this.fieldpad);
            this.SectionInfo.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.RigidNode);
            queueableBlamBinaryWriter.Write(((short)(this.RenderModelSectionFlags)));
            queueableBlamBinaryWriter.WritePointer(this.SectionData);
            this.GeometryBlockInfo.Write_(queueableBlamBinaryWriter);
        }
        public enum GlobalGeometryClassificationEnumDefinitionEnum : short
        {
            Worldspace = 0,
            Rigid = 1,
            RigidBoned = 2,
            Skinned = 3,
            UnsupportedReimport = 4,
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            GeometryPostprocessed = 1,
        }
    }
}
