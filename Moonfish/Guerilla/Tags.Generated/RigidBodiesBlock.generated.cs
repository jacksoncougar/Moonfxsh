//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("rigid_bodies_block")]
    public partial class RigidBodiesBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.ShortBlockIndex1 Node;
        public Moonfish.Tags.ShortBlockIndex1 Region;
        public Moonfish.Tags.ShortBlockIndex2 Permutattion;
        private byte[] fieldpad = new byte[2];
        public OpenTK.Vector3 BoudingSphereOffset;
        public float BoundingSphereRadius;
        public Flags RigidBodiesFlags;
        public MotionTypeEnum MotionType;
        public Moonfish.Tags.ShortBlockIndex1 NoPhantomPowerAlt;
        public SizeEnum Size;
        public float InertiaTensorScale;
        public float LinearDamping;
        public float AngularDamping;
        public OpenTK.Vector3 CenterOffMassOffset;
        public ShapeTypeEnum ShapeType;
        public Moonfish.Tags.ShortBlockIndex2 Shape;
        public float Mass;
        public OpenTK.Vector3 CenterOfMass;
        private byte[] fieldskip = new byte[4];
        public OpenTK.Vector3 IntertiaTensorX;
        private byte[] fieldskip0 = new byte[4];
        public OpenTK.Vector3 IntertiaTensorY;
        private byte[] fieldskip1 = new byte[4];
        public OpenTK.Vector3 IntertiaTensorZ;
        private byte[] fieldskip2 = new byte[4];
        public float BoundingSpherePad;
        private byte[] fieldpad0 = new byte[12];
        public override int SerializedSize
        {
            get
            {
                return 144;
            }
        }
        public override int Alignment
        {
            get
            {
                return 16;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Node = binaryReader.ReadShortBlockIndex1();
            this.Region = binaryReader.ReadShortBlockIndex1();
            this.Permutattion = binaryReader.ReadShortBlockIndex2();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.BoudingSphereOffset = binaryReader.ReadVector3();
            this.BoundingSphereRadius = binaryReader.ReadSingle();
            this.RigidBodiesFlags = ((Flags)(binaryReader.ReadInt16()));
            this.MotionType = ((MotionTypeEnum)(binaryReader.ReadInt16()));
            this.NoPhantomPowerAlt = binaryReader.ReadShortBlockIndex1();
            this.Size = ((SizeEnum)(binaryReader.ReadInt16()));
            this.InertiaTensorScale = binaryReader.ReadSingle();
            this.LinearDamping = binaryReader.ReadSingle();
            this.AngularDamping = binaryReader.ReadSingle();
            this.CenterOffMassOffset = binaryReader.ReadVector3();
            this.ShapeType = ((ShapeTypeEnum)(binaryReader.ReadInt16()));
            this.Shape = binaryReader.ReadShortBlockIndex2();
            this.Mass = binaryReader.ReadSingle();
            this.CenterOfMass = binaryReader.ReadVector3();
            this.fieldskip = binaryReader.ReadBytes(4);
            this.IntertiaTensorX = binaryReader.ReadVector3();
            this.fieldskip0 = binaryReader.ReadBytes(4);
            this.IntertiaTensorY = binaryReader.ReadVector3();
            this.fieldskip1 = binaryReader.ReadBytes(4);
            this.IntertiaTensorZ = binaryReader.ReadVector3();
            this.fieldskip2 = binaryReader.ReadBytes(4);
            this.BoundingSpherePad = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(12);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Node);
            writer.Write(this.Region);
            writer.Write(this.Permutattion);
            writer.Write(this.fieldpad);
            writer.Write(this.BoudingSphereOffset);
            writer.Write(this.BoundingSphereRadius);
            writer.Write(((short)(this.RigidBodiesFlags)));
            writer.Write(((short)(this.MotionType)));
            writer.Write(this.NoPhantomPowerAlt);
            writer.Write(((short)(this.Size)));
            writer.Write(this.InertiaTensorScale);
            writer.Write(this.LinearDamping);
            writer.Write(this.AngularDamping);
            writer.Write(this.CenterOffMassOffset);
            writer.Write(((short)(this.ShapeType)));
            writer.Write(this.Shape);
            writer.Write(this.Mass);
            writer.Write(this.CenterOfMass);
            writer.Write(this.fieldskip);
            writer.Write(this.IntertiaTensorX);
            writer.Write(this.fieldskip0);
            writer.Write(this.IntertiaTensorY);
            writer.Write(this.fieldskip1);
            writer.Write(this.IntertiaTensorZ);
            writer.Write(this.fieldskip2);
            writer.Write(this.BoundingSpherePad);
            writer.Write(this.fieldpad0);
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            NoCollisionsWself = 1,
            OnlyCollideWenv = 2,
            DisableEffectsthisRigidBodyWillNotGenerateImpactEffectsUnlessItHitsAnotherDynamicRigidBodyThatDoes = 4,
            DoesNotInteractWenvironmentsetThisFlagIfThisRigidBodiesWontTouchTheEnvironmentThisAllowsUsToOpenUpSomeOptimizations = 8,
            BestEarlyMoverBodyIfYouHaveEitherOfTheEarlyMoverFlagsSetInTheObjectDefinitoinThisBodyWillBeChoosenAsTheOneToMakeEveryThingLocalToOtherwiseIPick = 16,
            HasNoPhantomPowerVersiondontCheckThisFlagWithoutTalkingToEamon = 32,
        }
        public enum MotionTypeEnum : short
        {
            Sphere = 0,
            StabilizedSphere = 1,
            Box = 2,
            StabilizedBox = 3,
            Keyframed = 4,
            Fixed = 5,
        }
        public enum SizeEnum : short
        {
            Default = 0,
            Tiny = 1,
            Small = 2,
            Medium = 3,
            Large = 4,
            Huge = 5,
            ExtraHuge = 6,
        }
        public enum ShapeTypeEnum : short
        {
            Sphere = 0,
            Pill = 1,
            Box = 2,
            Triangle = 3,
            Polyhedron = 4,
            MultiSphere = 5,
            Unused0 = 6,
            Unused1 = 7,
            Unused2 = 8,
            Unused3 = 9,
            Unused4 = 10,
            Unused5 = 11,
            Unused6 = 12,
            Unused7 = 13,
            List = 14,
            Mopp = 15,
        }
    }
}
