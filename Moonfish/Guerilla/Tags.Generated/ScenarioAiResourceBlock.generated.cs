//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("ai**")]
    public partial class ScenarioAiResourceBlock : GuerillaBlock, IWriteQueueable
    {
        public StylePaletteBlock[] StylePalette = new StylePaletteBlock[0];
        public SquadGroupsBlock[] SquadGroups = new SquadGroupsBlock[0];
        public SquadsBlock[] Squads = new SquadsBlock[0];
        public ZoneBlock[] Zones = new ZoneBlock[0];
        public CharacterPaletteBlock[] CharacterPalette = new CharacterPaletteBlock[0];
        public AiAnimationReferenceBlock[] AIAnimationReferences = new AiAnimationReferenceBlock[0];
        public AiScriptReferenceBlock[] AIScriptReferences = new AiScriptReferenceBlock[0];
        public AiRecordingReferenceBlock[] AIRecordingReferences = new AiRecordingReferenceBlock[0];
        public AiConversationBlock[] AIConversations = new AiConversationBlock[0];
        public CsScriptDataBlock[] ScriptingData = new CsScriptDataBlock[0];
        public OrdersBlock[] Orders = new OrdersBlock[0];
        public TriggersBlock[] Triggers = new TriggersBlock[0];
        public ScenarioStructureBspReferenceBlock[] BSPPreferences = new ScenarioStructureBspReferenceBlock[0];
        public ScenarioWeaponPaletteBlock[] WeaponReferences = new ScenarioWeaponPaletteBlock[0];
        public ScenarioVehiclePaletteBlock[] VehicleReferences = new ScenarioVehiclePaletteBlock[0];
        public ScenarioVehicleBlock[] VehicleDatumReferences = new ScenarioVehicleBlock[0];
        public AiSceneBlock[] MissionDialogueScenes = new AiSceneBlock[0];
        public FlockDefinitionBlock[] Flocks = new FlockDefinitionBlock[0];
        public ScenarioTriggerVolumeBlock[] TriggerVolumeReferences = new ScenarioTriggerVolumeBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 152;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(36));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(116));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(52));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(104));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(128));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(124));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(48));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(68));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(84));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(132));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(68));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.StylePalette = base.ReadBlockArrayData<StylePaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.SquadGroups = base.ReadBlockArrayData<SquadGroupsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Squads = base.ReadBlockArrayData<SquadsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Zones = base.ReadBlockArrayData<ZoneBlock>(binaryReader, pointerQueue.Dequeue());
            this.CharacterPalette = base.ReadBlockArrayData<CharacterPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.AIAnimationReferences = base.ReadBlockArrayData<AiAnimationReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.AIScriptReferences = base.ReadBlockArrayData<AiScriptReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.AIRecordingReferences = base.ReadBlockArrayData<AiRecordingReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.AIConversations = base.ReadBlockArrayData<AiConversationBlock>(binaryReader, pointerQueue.Dequeue());
            this.ScriptingData = base.ReadBlockArrayData<CsScriptDataBlock>(binaryReader, pointerQueue.Dequeue());
            this.Orders = base.ReadBlockArrayData<OrdersBlock>(binaryReader, pointerQueue.Dequeue());
            this.Triggers = base.ReadBlockArrayData<TriggersBlock>(binaryReader, pointerQueue.Dequeue());
            this.BSPPreferences = base.ReadBlockArrayData<ScenarioStructureBspReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.WeaponReferences = base.ReadBlockArrayData<ScenarioWeaponPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.VehicleReferences = base.ReadBlockArrayData<ScenarioVehiclePaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.VehicleDatumReferences = base.ReadBlockArrayData<ScenarioVehicleBlock>(binaryReader, pointerQueue.Dequeue());
            this.MissionDialogueScenes = base.ReadBlockArrayData<AiSceneBlock>(binaryReader, pointerQueue.Dequeue());
            this.Flocks = base.ReadBlockArrayData<FlockDefinitionBlock>(binaryReader, pointerQueue.Dequeue());
            this.TriggerVolumeReferences = base.ReadBlockArrayData<ScenarioTriggerVolumeBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.StylePalette);
            queueableBlamBinaryWriter.QueueWrite(this.SquadGroups);
            queueableBlamBinaryWriter.QueueWrite(this.Squads);
            queueableBlamBinaryWriter.QueueWrite(this.Zones);
            queueableBlamBinaryWriter.QueueWrite(this.CharacterPalette);
            queueableBlamBinaryWriter.QueueWrite(this.AIAnimationReferences);
            queueableBlamBinaryWriter.QueueWrite(this.AIScriptReferences);
            queueableBlamBinaryWriter.QueueWrite(this.AIRecordingReferences);
            queueableBlamBinaryWriter.QueueWrite(this.AIConversations);
            queueableBlamBinaryWriter.QueueWrite(this.ScriptingData);
            queueableBlamBinaryWriter.QueueWrite(this.Orders);
            queueableBlamBinaryWriter.QueueWrite(this.Triggers);
            queueableBlamBinaryWriter.QueueWrite(this.BSPPreferences);
            queueableBlamBinaryWriter.QueueWrite(this.WeaponReferences);
            queueableBlamBinaryWriter.QueueWrite(this.VehicleReferences);
            queueableBlamBinaryWriter.QueueWrite(this.VehicleDatumReferences);
            queueableBlamBinaryWriter.QueueWrite(this.MissionDialogueScenes);
            queueableBlamBinaryWriter.QueueWrite(this.Flocks);
            queueableBlamBinaryWriter.QueueWrite(this.TriggerVolumeReferences);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.WritePointer(this.StylePalette);
            queueableBlamBinaryWriter.WritePointer(this.SquadGroups);
            queueableBlamBinaryWriter.WritePointer(this.Squads);
            queueableBlamBinaryWriter.WritePointer(this.Zones);
            queueableBlamBinaryWriter.WritePointer(this.CharacterPalette);
            queueableBlamBinaryWriter.WritePointer(this.AIAnimationReferences);
            queueableBlamBinaryWriter.WritePointer(this.AIScriptReferences);
            queueableBlamBinaryWriter.WritePointer(this.AIRecordingReferences);
            queueableBlamBinaryWriter.WritePointer(this.AIConversations);
            queueableBlamBinaryWriter.WritePointer(this.ScriptingData);
            queueableBlamBinaryWriter.WritePointer(this.Orders);
            queueableBlamBinaryWriter.WritePointer(this.Triggers);
            queueableBlamBinaryWriter.WritePointer(this.BSPPreferences);
            queueableBlamBinaryWriter.WritePointer(this.WeaponReferences);
            queueableBlamBinaryWriter.WritePointer(this.VehicleReferences);
            queueableBlamBinaryWriter.WritePointer(this.VehicleDatumReferences);
            queueableBlamBinaryWriter.WritePointer(this.MissionDialogueScenes);
            queueableBlamBinaryWriter.WritePointer(this.Flocks);
            queueableBlamBinaryWriter.WritePointer(this.TriggerVolumeReferences);
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Ai = ((TagClass)("ai**"));
    }
}
