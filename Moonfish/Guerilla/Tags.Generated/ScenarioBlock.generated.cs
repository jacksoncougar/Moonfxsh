//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("scnr")]
    [TagBlockOriginalNameAttribute("scenario_block")]
    public partial class ScenarioBlock : GuerillaBlock, IWriteDeferrable
    {
        [Moonfish.Tags.TagReferenceAttribute("sbsp")]
        public Moonfish.Tags.TagReference DoNotUse;
        public ScenarioSkyReferenceBlock[] Skies = new ScenarioSkyReferenceBlock[0];
        public TypeEnum Type;
        public Flags ScenarioFlags;
        public ScenarioChildScenarioBlock[] childScenarios = new ScenarioChildScenarioBlock[0];
        public float LocalNorth;
        public PredictedResourceBlock[] PredictedResources = new PredictedResourceBlock[0];
        public ScenarioFunctionBlock[] Functions = new ScenarioFunctionBlock[0];
        private byte[] EditorScenarioData;
        public EditorCommentBlock[] Comments = new EditorCommentBlock[0];
        public DontUseMeScenarioEnvironmentObjectBlock[] DontUseMeScenarioEnvironmentObjectBlock = new DontUseMeScenarioEnvironmentObjectBlock[0];
        public ScenarioObjectNamesBlock[] ObjectNames = new ScenarioObjectNamesBlock[0];
        public ScenarioSceneryBlock[] Scenery = new ScenarioSceneryBlock[0];
        public ScenarioSceneryPaletteBlock[] SceneryPalette = new ScenarioSceneryPaletteBlock[0];
        public ScenarioBipedBlock[] Bipeds = new ScenarioBipedBlock[0];
        public ScenarioBipedPaletteBlock[] BipedPalette = new ScenarioBipedPaletteBlock[0];
        public ScenarioVehicleBlock[] Vehicles = new ScenarioVehicleBlock[0];
        public ScenarioVehiclePaletteBlock[] VehiclePalette = new ScenarioVehiclePaletteBlock[0];
        public ScenarioEquipmentBlock[] Equipment = new ScenarioEquipmentBlock[0];
        public ScenarioEquipmentPaletteBlock[] EquipmentPalette = new ScenarioEquipmentPaletteBlock[0];
        public ScenarioWeaponBlock[] Weapons = new ScenarioWeaponBlock[0];
        public ScenarioWeaponPaletteBlock[] WeaponPalette = new ScenarioWeaponPaletteBlock[0];
        public DeviceGroupBlock[] DeviceGroups = new DeviceGroupBlock[0];
        public ScenarioMachineBlock[] Machines = new ScenarioMachineBlock[0];
        public ScenarioMachinePaletteBlock[] MachinePalette = new ScenarioMachinePaletteBlock[0];
        public ScenarioControlBlock[] Controls = new ScenarioControlBlock[0];
        public ScenarioControlPaletteBlock[] ControlPalette = new ScenarioControlPaletteBlock[0];
        public ScenarioLightFixtureBlock[] LightFixtures = new ScenarioLightFixtureBlock[0];
        public ScenarioLightFixturePaletteBlock[] LightFixturesPalette = new ScenarioLightFixturePaletteBlock[0];
        public ScenarioSoundSceneryBlock[] SoundScenery = new ScenarioSoundSceneryBlock[0];
        public ScenarioSoundSceneryPaletteBlock[] SoundSceneryPalette = new ScenarioSoundSceneryPaletteBlock[0];
        public ScenarioLightBlock[] LightVolumes = new ScenarioLightBlock[0];
        public ScenarioLightPaletteBlock[] LightVolumesPalette = new ScenarioLightPaletteBlock[0];
        public ScenarioProfilesBlock[] PlayerStartingProfile = new ScenarioProfilesBlock[0];
        public ScenarioPlayersBlock[] PlayerStartingLocations = new ScenarioPlayersBlock[0];
        public ScenarioTriggerVolumeBlock[] KillTriggerVolumes = new ScenarioTriggerVolumeBlock[0];
        public RecordedAnimationBlock[] RecordedAnimations = new RecordedAnimationBlock[0];
        public ScenarioNetpointsBlock[] NetgameFlags = new ScenarioNetpointsBlock[0];
        public ScenarioNetgameEquipmentBlock[] NetgameEquipment = new ScenarioNetgameEquipmentBlock[0];
        public ScenarioStartingEquipmentBlock[] StartingEquipment = new ScenarioStartingEquipmentBlock[0];
        public ScenarioBspSwitchTriggerVolumeBlock[] BSPSwitchTriggerVolumes = new ScenarioBspSwitchTriggerVolumeBlock[0];
        public ScenarioDecalsBlock[] Decals = new ScenarioDecalsBlock[0];
        public ScenarioDecalPaletteBlock[] DecalsPalette = new ScenarioDecalPaletteBlock[0];
        public ScenarioDetailObjectCollectionPaletteBlock[] DetailObjectCollectionPalette = new ScenarioDetailObjectCollectionPaletteBlock[0];
        public StylePaletteBlock[] StylePalette = new StylePaletteBlock[0];
        public SquadGroupsBlock[] SquadGroups = new SquadGroupsBlock[0];
        public SquadsBlock[] Squads = new SquadsBlock[0];
        public ZoneBlock[] Zones = new ZoneBlock[0];
        public AiSceneBlock[] MissionScenes = new AiSceneBlock[0];
        public CharacterPaletteBlock[] CharacterPalette = new CharacterPaletteBlock[0];
        public PathfindingDataBlock[] AIPathfindingData = new PathfindingDataBlock[0];
        public AiAnimationReferenceBlock[] AIAnimationReferences = new AiAnimationReferenceBlock[0];
        public AiScriptReferenceBlock[] AIScriptReferences = new AiScriptReferenceBlock[0];
        public AiRecordingReferenceBlock[] AIRecordingReferences = new AiRecordingReferenceBlock[0];
        public AiConversationBlock[] AIConversations = new AiConversationBlock[0];
        private byte[] ScriptSyntaxData;
        private byte[] ScriptStringData;
        public HsScriptsBlock[] Scripts = new HsScriptsBlock[0];
        public HsGlobalsBlock[] Globals = new HsGlobalsBlock[0];
        public HsReferencesBlock[] References = new HsReferencesBlock[0];
        public HsSourceFilesBlock[] SourceFiles = new HsSourceFilesBlock[0];
        public CsScriptDataBlock[] ScriptingData = new CsScriptDataBlock[0];
        public ScenarioCutsceneFlagBlock[] CutsceneFlags = new ScenarioCutsceneFlagBlock[0];
        public ScenarioCutsceneCameraPointBlock[] CutsceneCameraPoints = new ScenarioCutsceneCameraPointBlock[0];
        public ScenarioCutsceneTitleBlock[] CutsceneTitles = new ScenarioCutsceneTitleBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("unic")]
        public Moonfish.Tags.TagReference CustomObjectNames;
        [Moonfish.Tags.TagReferenceAttribute("unic")]
        public Moonfish.Tags.TagReference ChapterTitleText;
        [Moonfish.Tags.TagReferenceAttribute("hmt ")]
        public Moonfish.Tags.TagReference HUDMessages;
        public ScenarioStructureBspReferenceBlock[] StructureBSPs = new ScenarioStructureBspReferenceBlock[0];
        public ScenarioResourcesBlock[] ScenarioResources = new ScenarioResourcesBlock[0];
        public OldUnusedStrucurePhysicsBlock[] ScenarioResources0 = new OldUnusedStrucurePhysicsBlock[0];
        public HsUnitSeatBlock[] hsUnitSeats = new HsUnitSeatBlock[0];
        public ScenarioKillTriggerVolumesBlock[] ScenarioKillTriggers = new ScenarioKillTriggerVolumesBlock[0];
        public SyntaxDatumBlock[] HsSyntaxDatums = new SyntaxDatumBlock[0];
        public OrdersBlock[] Orders = new OrdersBlock[0];
        public TriggersBlock[] Triggers = new TriggersBlock[0];
        public StructureBspBackgroundSoundPaletteBlock[] BackgroundSoundPalette = new StructureBspBackgroundSoundPaletteBlock[0];
        public StructureBspSoundEnvironmentPaletteBlock[] SoundEnvironmentPalette = new StructureBspSoundEnvironmentPaletteBlock[0];
        public StructureBspWeatherPaletteBlock[] WeatherPalette = new StructureBspWeatherPaletteBlock[0];
        public GNullBlock[] EMPTYSTRING = new GNullBlock[0];
        public GNullBlock[] EMPTYSTRING0 = new GNullBlock[0];
        public GNullBlock[] EMPTYSTRING1 = new GNullBlock[0];
        public GNullBlock[] EMPTYSTRING2 = new GNullBlock[0];
        public GNullBlock[] EMPTYSTRING3 = new GNullBlock[0];
        public ScenarioClusterDataBlock[] ScenarioClusterData = new ScenarioClusterDataBlock[0];
        public ObjectSaltsBlock[] ObjectSalts00 = new ObjectSaltsBlock[32];
        public ScenarioSpawnDataBlock[] SpawnData = new ScenarioSpawnDataBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("sfx+")]
        public Moonfish.Tags.TagReference SoundEffectCollection;
        public ScenarioCrateBlock[] Crates = new ScenarioCrateBlock[0];
        public ScenarioCratePaletteBlock[] CratesPalette = new ScenarioCratePaletteBlock[0];
        /// <summary>
        /// EMPTY STRING
        /// </summary>
        [Moonfish.Tags.TagReferenceAttribute("gldf")]
        public Moonfish.Tags.TagReference GlobalLighting;
        public ScenarioAtmosphericFogPalette[] AtmosphericFogPalette = new ScenarioAtmosphericFogPalette[0];
        public ScenarioPlanarFogPalette[] PlanarFogPalette = new ScenarioPlanarFogPalette[0];
        public FlockDefinitionBlock[] Flocks = new FlockDefinitionBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("unic")]
        public Moonfish.Tags.TagReference Subtitles;
        public DecoratorPlacementDefinitionBlock[] Decorators = new DecoratorPlacementDefinitionBlock[0];
        public ScenarioCreatureBlock[] Creatures = new ScenarioCreatureBlock[0];
        public ScenarioCreaturePaletteBlock[] CreaturesPalette = new ScenarioCreaturePaletteBlock[0];
        public ScenarioDecoratorSetPaletteEntryBlock[] DecoratorsPalette = new ScenarioDecoratorSetPaletteEntryBlock[0];
        public ScenarioBspSwitchTransitionVolumeBlock[] BSPTransitionVolumes = new ScenarioBspSwitchTransitionVolumeBlock[0];
        public ScenarioStructureBspSphericalHarmonicLightingBlock[] StructureBSPLighting = new ScenarioStructureBspSphericalHarmonicLightingBlock[0];
        public GScenarioEditorFolderBlock[] EditorFolders = new GScenarioEditorFolderBlock[0];
        public ScenarioLevelDataBlock[] LevelData = new ScenarioLevelDataBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("unic")]
        public Moonfish.Tags.TagReference TerritoryLocationNames;
        private byte[] fieldpad = new byte[8];
        public AiScenarioMissionDialogueBlock[] MissionDialogue = new AiScenarioMissionDialogueBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("unic")]
        public Moonfish.Tags.TagReference Objectives;
        public ScenarioInterpolatorBlock[] Interpolators = new ScenarioInterpolatorBlock[0];
        public HsReferencesBlock[] SharedReferences = new HsReferencesBlock[0];
        public ScenarioScreenEffectReferenceBlock[] ScreenEffectReferences = new ScenarioScreenEffectReferenceBlock[0];
        public ScenarioSimulationDefinitionTableBlock[] SimulationDefinitionTable = new ScenarioSimulationDefinitionTableBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 992;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.DoNotUse = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            this.Type = ((TypeEnum)(binaryReader.ReadInt16()));
            this.ScenarioFlags = ((Flags)(binaryReader.ReadInt16()));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            this.LocalNorth = binaryReader.ReadSingle();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(120));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(304));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(64));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(36));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(92));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(84));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(84));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(84));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(72));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(68));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(84));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(80));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(108));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(68));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(52));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(68));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(52));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(144));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(156));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(14));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(36));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(116));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(116));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(52));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(104));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(128));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(64));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(36));
            this.CustomObjectNames = binaryReader.ReadTagReference();
            this.ChapterTitleText = binaryReader.ReadTagReference();
            this.HUDMessages = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(68));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(44));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(2));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(124));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(48));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(100));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(72));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(136));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(52));
            int i;
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.ObjectSalts00[i] = new ObjectSaltsBlock();
                pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.ObjectSalts00[i].ReadFields(binaryReader)));
            }
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(96));
            this.SoundEffectCollection = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(76));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            this.GlobalLighting = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(244));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(132));
            this.Subtitles = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(48));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(52));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(260));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            this.TerritoryLocationNames = binaryReader.ReadTagReference();
            this.fieldpad = binaryReader.ReadBytes(8);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            this.Objectives = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(36));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Skies = base.ReadBlockArrayData<ScenarioSkyReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.childScenarios = base.ReadBlockArrayData<ScenarioChildScenarioBlock>(binaryReader, pointerQueue.Dequeue());
            this.PredictedResources = base.ReadBlockArrayData<PredictedResourceBlock>(binaryReader, pointerQueue.Dequeue());
            this.Functions = base.ReadBlockArrayData<ScenarioFunctionBlock>(binaryReader, pointerQueue.Dequeue());
            this.EditorScenarioData = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
            this.Comments = base.ReadBlockArrayData<EditorCommentBlock>(binaryReader, pointerQueue.Dequeue());
            this.DontUseMeScenarioEnvironmentObjectBlock = base.ReadBlockArrayData<DontUseMeScenarioEnvironmentObjectBlock>(binaryReader, pointerQueue.Dequeue());
            this.ObjectNames = base.ReadBlockArrayData<ScenarioObjectNamesBlock>(binaryReader, pointerQueue.Dequeue());
            this.Scenery = base.ReadBlockArrayData<ScenarioSceneryBlock>(binaryReader, pointerQueue.Dequeue());
            this.SceneryPalette = base.ReadBlockArrayData<ScenarioSceneryPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.Bipeds = base.ReadBlockArrayData<ScenarioBipedBlock>(binaryReader, pointerQueue.Dequeue());
            this.BipedPalette = base.ReadBlockArrayData<ScenarioBipedPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.Vehicles = base.ReadBlockArrayData<ScenarioVehicleBlock>(binaryReader, pointerQueue.Dequeue());
            this.VehiclePalette = base.ReadBlockArrayData<ScenarioVehiclePaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.Equipment = base.ReadBlockArrayData<ScenarioEquipmentBlock>(binaryReader, pointerQueue.Dequeue());
            this.EquipmentPalette = base.ReadBlockArrayData<ScenarioEquipmentPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.Weapons = base.ReadBlockArrayData<ScenarioWeaponBlock>(binaryReader, pointerQueue.Dequeue());
            this.WeaponPalette = base.ReadBlockArrayData<ScenarioWeaponPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.DeviceGroups = base.ReadBlockArrayData<DeviceGroupBlock>(binaryReader, pointerQueue.Dequeue());
            this.Machines = base.ReadBlockArrayData<ScenarioMachineBlock>(binaryReader, pointerQueue.Dequeue());
            this.MachinePalette = base.ReadBlockArrayData<ScenarioMachinePaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.Controls = base.ReadBlockArrayData<ScenarioControlBlock>(binaryReader, pointerQueue.Dequeue());
            this.ControlPalette = base.ReadBlockArrayData<ScenarioControlPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.LightFixtures = base.ReadBlockArrayData<ScenarioLightFixtureBlock>(binaryReader, pointerQueue.Dequeue());
            this.LightFixturesPalette = base.ReadBlockArrayData<ScenarioLightFixturePaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.SoundScenery = base.ReadBlockArrayData<ScenarioSoundSceneryBlock>(binaryReader, pointerQueue.Dequeue());
            this.SoundSceneryPalette = base.ReadBlockArrayData<ScenarioSoundSceneryPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.LightVolumes = base.ReadBlockArrayData<ScenarioLightBlock>(binaryReader, pointerQueue.Dequeue());
            this.LightVolumesPalette = base.ReadBlockArrayData<ScenarioLightPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.PlayerStartingProfile = base.ReadBlockArrayData<ScenarioProfilesBlock>(binaryReader, pointerQueue.Dequeue());
            this.PlayerStartingLocations = base.ReadBlockArrayData<ScenarioPlayersBlock>(binaryReader, pointerQueue.Dequeue());
            this.KillTriggerVolumes = base.ReadBlockArrayData<ScenarioTriggerVolumeBlock>(binaryReader, pointerQueue.Dequeue());
            this.RecordedAnimations = base.ReadBlockArrayData<RecordedAnimationBlock>(binaryReader, pointerQueue.Dequeue());
            this.NetgameFlags = base.ReadBlockArrayData<ScenarioNetpointsBlock>(binaryReader, pointerQueue.Dequeue());
            this.NetgameEquipment = base.ReadBlockArrayData<ScenarioNetgameEquipmentBlock>(binaryReader, pointerQueue.Dequeue());
            this.StartingEquipment = base.ReadBlockArrayData<ScenarioStartingEquipmentBlock>(binaryReader, pointerQueue.Dequeue());
            this.BSPSwitchTriggerVolumes = base.ReadBlockArrayData<ScenarioBspSwitchTriggerVolumeBlock>(binaryReader, pointerQueue.Dequeue());
            this.Decals = base.ReadBlockArrayData<ScenarioDecalsBlock>(binaryReader, pointerQueue.Dequeue());
            this.DecalsPalette = base.ReadBlockArrayData<ScenarioDecalPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.DetailObjectCollectionPalette = base.ReadBlockArrayData<ScenarioDetailObjectCollectionPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.StylePalette = base.ReadBlockArrayData<StylePaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.SquadGroups = base.ReadBlockArrayData<SquadGroupsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Squads = base.ReadBlockArrayData<SquadsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Zones = base.ReadBlockArrayData<ZoneBlock>(binaryReader, pointerQueue.Dequeue());
            this.MissionScenes = base.ReadBlockArrayData<AiSceneBlock>(binaryReader, pointerQueue.Dequeue());
            this.CharacterPalette = base.ReadBlockArrayData<CharacterPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.AIPathfindingData = base.ReadBlockArrayData<PathfindingDataBlock>(binaryReader, pointerQueue.Dequeue());
            this.AIAnimationReferences = base.ReadBlockArrayData<AiAnimationReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.AIScriptReferences = base.ReadBlockArrayData<AiScriptReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.AIRecordingReferences = base.ReadBlockArrayData<AiRecordingReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.AIConversations = base.ReadBlockArrayData<AiConversationBlock>(binaryReader, pointerQueue.Dequeue());
            this.ScriptSyntaxData = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
            this.ScriptStringData = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
            this.Scripts = base.ReadBlockArrayData<HsScriptsBlock>(binaryReader, pointerQueue.Dequeue());
            this.Globals = base.ReadBlockArrayData<HsGlobalsBlock>(binaryReader, pointerQueue.Dequeue());
            this.References = base.ReadBlockArrayData<HsReferencesBlock>(binaryReader, pointerQueue.Dequeue());
            this.SourceFiles = base.ReadBlockArrayData<HsSourceFilesBlock>(binaryReader, pointerQueue.Dequeue());
            this.ScriptingData = base.ReadBlockArrayData<CsScriptDataBlock>(binaryReader, pointerQueue.Dequeue());
            this.CutsceneFlags = base.ReadBlockArrayData<ScenarioCutsceneFlagBlock>(binaryReader, pointerQueue.Dequeue());
            this.CutsceneCameraPoints = base.ReadBlockArrayData<ScenarioCutsceneCameraPointBlock>(binaryReader, pointerQueue.Dequeue());
            this.CutsceneTitles = base.ReadBlockArrayData<ScenarioCutsceneTitleBlock>(binaryReader, pointerQueue.Dequeue());
            this.StructureBSPs = base.ReadBlockArrayData<ScenarioStructureBspReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.ScenarioResources = base.ReadBlockArrayData<ScenarioResourcesBlock>(binaryReader, pointerQueue.Dequeue());
            this.ScenarioResources0 = base.ReadBlockArrayData<OldUnusedStrucurePhysicsBlock>(binaryReader, pointerQueue.Dequeue());
            this.hsUnitSeats = base.ReadBlockArrayData<HsUnitSeatBlock>(binaryReader, pointerQueue.Dequeue());
            this.ScenarioKillTriggers = base.ReadBlockArrayData<ScenarioKillTriggerVolumesBlock>(binaryReader, pointerQueue.Dequeue());
            this.HsSyntaxDatums = base.ReadBlockArrayData<SyntaxDatumBlock>(binaryReader, pointerQueue.Dequeue());
            this.Orders = base.ReadBlockArrayData<OrdersBlock>(binaryReader, pointerQueue.Dequeue());
            this.Triggers = base.ReadBlockArrayData<TriggersBlock>(binaryReader, pointerQueue.Dequeue());
            this.BackgroundSoundPalette = base.ReadBlockArrayData<StructureBspBackgroundSoundPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.SoundEnvironmentPalette = base.ReadBlockArrayData<StructureBspSoundEnvironmentPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.WeatherPalette = base.ReadBlockArrayData<StructureBspWeatherPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.EMPTYSTRING = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
            this.EMPTYSTRING0 = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
            this.EMPTYSTRING1 = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
            this.EMPTYSTRING2 = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
            this.EMPTYSTRING3 = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
            this.ScenarioClusterData = base.ReadBlockArrayData<ScenarioClusterDataBlock>(binaryReader, pointerQueue.Dequeue());
            int i;
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.ObjectSalts00[i].ReadInstances(binaryReader, pointerQueue);
            }
            this.SpawnData = base.ReadBlockArrayData<ScenarioSpawnDataBlock>(binaryReader, pointerQueue.Dequeue());
            this.Crates = base.ReadBlockArrayData<ScenarioCrateBlock>(binaryReader, pointerQueue.Dequeue());
            this.CratesPalette = base.ReadBlockArrayData<ScenarioCratePaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.AtmosphericFogPalette = base.ReadBlockArrayData<ScenarioAtmosphericFogPalette>(binaryReader, pointerQueue.Dequeue());
            this.PlanarFogPalette = base.ReadBlockArrayData<ScenarioPlanarFogPalette>(binaryReader, pointerQueue.Dequeue());
            this.Flocks = base.ReadBlockArrayData<FlockDefinitionBlock>(binaryReader, pointerQueue.Dequeue());
            this.Decorators = base.ReadBlockArrayData<DecoratorPlacementDefinitionBlock>(binaryReader, pointerQueue.Dequeue());
            this.Creatures = base.ReadBlockArrayData<ScenarioCreatureBlock>(binaryReader, pointerQueue.Dequeue());
            this.CreaturesPalette = base.ReadBlockArrayData<ScenarioCreaturePaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.DecoratorsPalette = base.ReadBlockArrayData<ScenarioDecoratorSetPaletteEntryBlock>(binaryReader, pointerQueue.Dequeue());
            this.BSPTransitionVolumes = base.ReadBlockArrayData<ScenarioBspSwitchTransitionVolumeBlock>(binaryReader, pointerQueue.Dequeue());
            this.StructureBSPLighting = base.ReadBlockArrayData<ScenarioStructureBspSphericalHarmonicLightingBlock>(binaryReader, pointerQueue.Dequeue());
            this.EditorFolders = base.ReadBlockArrayData<GScenarioEditorFolderBlock>(binaryReader, pointerQueue.Dequeue());
            this.LevelData = base.ReadBlockArrayData<ScenarioLevelDataBlock>(binaryReader, pointerQueue.Dequeue());
            this.MissionDialogue = base.ReadBlockArrayData<AiScenarioMissionDialogueBlock>(binaryReader, pointerQueue.Dequeue());
            this.Interpolators = base.ReadBlockArrayData<ScenarioInterpolatorBlock>(binaryReader, pointerQueue.Dequeue());
            this.SharedReferences = base.ReadBlockArrayData<HsReferencesBlock>(binaryReader, pointerQueue.Dequeue());
            this.ScreenEffectReferences = base.ReadBlockArrayData<ScenarioScreenEffectReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.SimulationDefinitionTable = base.ReadBlockArrayData<ScenarioSimulationDefinitionTableBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Skies);
            writer.Defer(this.childScenarios);
            writer.Defer(this.PredictedResources);
            writer.Defer(this.Functions);
            writer.Defer(this.EditorScenarioData);
            writer.Defer(this.Comments);
            writer.Defer(this.DontUseMeScenarioEnvironmentObjectBlock);
            writer.Defer(this.ObjectNames);
            writer.Defer(this.Scenery);
            writer.Defer(this.SceneryPalette);
            writer.Defer(this.Bipeds);
            writer.Defer(this.BipedPalette);
            writer.Defer(this.Vehicles);
            writer.Defer(this.VehiclePalette);
            writer.Defer(this.Equipment);
            writer.Defer(this.EquipmentPalette);
            writer.Defer(this.Weapons);
            writer.Defer(this.WeaponPalette);
            writer.Defer(this.DeviceGroups);
            writer.Defer(this.Machines);
            writer.Defer(this.MachinePalette);
            writer.Defer(this.Controls);
            writer.Defer(this.ControlPalette);
            writer.Defer(this.LightFixtures);
            writer.Defer(this.LightFixturesPalette);
            writer.Defer(this.SoundScenery);
            writer.Defer(this.SoundSceneryPalette);
            writer.Defer(this.LightVolumes);
            writer.Defer(this.LightVolumesPalette);
            writer.Defer(this.PlayerStartingProfile);
            writer.Defer(this.PlayerStartingLocations);
            writer.Defer(this.KillTriggerVolumes);
            writer.Defer(this.RecordedAnimations);
            writer.Defer(this.NetgameFlags);
            writer.Defer(this.NetgameEquipment);
            writer.Defer(this.StartingEquipment);
            writer.Defer(this.BSPSwitchTriggerVolumes);
            writer.Defer(this.Decals);
            writer.Defer(this.DecalsPalette);
            writer.Defer(this.DetailObjectCollectionPalette);
            writer.Defer(this.StylePalette);
            writer.Defer(this.SquadGroups);
            writer.Defer(this.Squads);
            writer.Defer(this.Zones);
            writer.Defer(this.MissionScenes);
            writer.Defer(this.CharacterPalette);
            writer.Defer(this.AIPathfindingData);
            writer.Defer(this.AIAnimationReferences);
            writer.Defer(this.AIScriptReferences);
            writer.Defer(this.AIRecordingReferences);
            writer.Defer(this.AIConversations);
            writer.Defer(this.ScriptSyntaxData);
            writer.Defer(this.ScriptStringData);
            writer.Defer(this.Scripts);
            writer.Defer(this.Globals);
            writer.Defer(this.References);
            writer.Defer(this.SourceFiles);
            writer.Defer(this.ScriptingData);
            writer.Defer(this.CutsceneFlags);
            writer.Defer(this.CutsceneCameraPoints);
            writer.Defer(this.CutsceneTitles);
            writer.Defer(this.StructureBSPs);
            writer.Defer(this.ScenarioResources);
            writer.Defer(this.ScenarioResources0);
            writer.Defer(this.hsUnitSeats);
            writer.Defer(this.ScenarioKillTriggers);
            writer.Defer(this.HsSyntaxDatums);
            writer.Defer(this.Orders);
            writer.Defer(this.Triggers);
            writer.Defer(this.BackgroundSoundPalette);
            writer.Defer(this.SoundEnvironmentPalette);
            writer.Defer(this.WeatherPalette);
            writer.Defer(this.EMPTYSTRING);
            writer.Defer(this.EMPTYSTRING0);
            writer.Defer(this.EMPTYSTRING1);
            writer.Defer(this.EMPTYSTRING2);
            writer.Defer(this.EMPTYSTRING3);
            writer.Defer(this.ScenarioClusterData);
            int i;
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.ObjectSalts00[i].DeferReferences(writer);
            }
            writer.Defer(this.SpawnData);
            writer.Defer(this.Crates);
            writer.Defer(this.CratesPalette);
            writer.Defer(this.AtmosphericFogPalette);
            writer.Defer(this.PlanarFogPalette);
            writer.Defer(this.Flocks);
            writer.Defer(this.Decorators);
            writer.Defer(this.Creatures);
            writer.Defer(this.CreaturesPalette);
            writer.Defer(this.DecoratorsPalette);
            writer.Defer(this.BSPTransitionVolumes);
            writer.Defer(this.StructureBSPLighting);
            writer.Defer(this.EditorFolders);
            writer.Defer(this.LevelData);
            writer.Defer(this.MissionDialogue);
            writer.Defer(this.Interpolators);
            writer.Defer(this.SharedReferences);
            writer.Defer(this.ScreenEffectReferences);
            writer.Defer(this.SimulationDefinitionTable);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.DoNotUse);
            writer.WritePointer(this.Skies);
            writer.Write(((short)(this.Type)));
            writer.Write(((short)(this.ScenarioFlags)));
            writer.WritePointer(this.childScenarios);
            writer.Write(this.LocalNorth);
            writer.WritePointer(this.PredictedResources);
            writer.WritePointer(this.Functions);
            writer.WritePointer(this.EditorScenarioData);
            writer.WritePointer(this.Comments);
            writer.WritePointer(this.DontUseMeScenarioEnvironmentObjectBlock);
            writer.WritePointer(this.ObjectNames);
            writer.WritePointer(this.Scenery);
            writer.WritePointer(this.SceneryPalette);
            writer.WritePointer(this.Bipeds);
            writer.WritePointer(this.BipedPalette);
            writer.WritePointer(this.Vehicles);
            writer.WritePointer(this.VehiclePalette);
            writer.WritePointer(this.Equipment);
            writer.WritePointer(this.EquipmentPalette);
            writer.WritePointer(this.Weapons);
            writer.WritePointer(this.WeaponPalette);
            writer.WritePointer(this.DeviceGroups);
            writer.WritePointer(this.Machines);
            writer.WritePointer(this.MachinePalette);
            writer.WritePointer(this.Controls);
            writer.WritePointer(this.ControlPalette);
            writer.WritePointer(this.LightFixtures);
            writer.WritePointer(this.LightFixturesPalette);
            writer.WritePointer(this.SoundScenery);
            writer.WritePointer(this.SoundSceneryPalette);
            writer.WritePointer(this.LightVolumes);
            writer.WritePointer(this.LightVolumesPalette);
            writer.WritePointer(this.PlayerStartingProfile);
            writer.WritePointer(this.PlayerStartingLocations);
            writer.WritePointer(this.KillTriggerVolumes);
            writer.WritePointer(this.RecordedAnimations);
            writer.WritePointer(this.NetgameFlags);
            writer.WritePointer(this.NetgameEquipment);
            writer.WritePointer(this.StartingEquipment);
            writer.WritePointer(this.BSPSwitchTriggerVolumes);
            writer.WritePointer(this.Decals);
            writer.WritePointer(this.DecalsPalette);
            writer.WritePointer(this.DetailObjectCollectionPalette);
            writer.WritePointer(this.StylePalette);
            writer.WritePointer(this.SquadGroups);
            writer.WritePointer(this.Squads);
            writer.WritePointer(this.Zones);
            writer.WritePointer(this.MissionScenes);
            writer.WritePointer(this.CharacterPalette);
            writer.WritePointer(this.AIPathfindingData);
            writer.WritePointer(this.AIAnimationReferences);
            writer.WritePointer(this.AIScriptReferences);
            writer.WritePointer(this.AIRecordingReferences);
            writer.WritePointer(this.AIConversations);
            writer.WritePointer(this.ScriptSyntaxData);
            writer.WritePointer(this.ScriptStringData);
            writer.WritePointer(this.Scripts);
            writer.WritePointer(this.Globals);
            writer.WritePointer(this.References);
            writer.WritePointer(this.SourceFiles);
            writer.WritePointer(this.ScriptingData);
            writer.WritePointer(this.CutsceneFlags);
            writer.WritePointer(this.CutsceneCameraPoints);
            writer.WritePointer(this.CutsceneTitles);
            writer.Write(this.CustomObjectNames);
            writer.Write(this.ChapterTitleText);
            writer.Write(this.HUDMessages);
            writer.WritePointer(this.StructureBSPs);
            writer.WritePointer(this.ScenarioResources);
            writer.WritePointer(this.ScenarioResources0);
            writer.WritePointer(this.hsUnitSeats);
            writer.WritePointer(this.ScenarioKillTriggers);
            writer.WritePointer(this.HsSyntaxDatums);
            writer.WritePointer(this.Orders);
            writer.WritePointer(this.Triggers);
            writer.WritePointer(this.BackgroundSoundPalette);
            writer.WritePointer(this.SoundEnvironmentPalette);
            writer.WritePointer(this.WeatherPalette);
            writer.WritePointer(this.EMPTYSTRING);
            writer.WritePointer(this.EMPTYSTRING0);
            writer.WritePointer(this.EMPTYSTRING1);
            writer.WritePointer(this.EMPTYSTRING2);
            writer.WritePointer(this.EMPTYSTRING3);
            writer.WritePointer(this.ScenarioClusterData);
            int i;
            for (i = 0; (i < 32); i = (i + 1))
            {
                this.ObjectSalts00[i].Write(writer);
            }
            writer.WritePointer(this.SpawnData);
            writer.Write(this.SoundEffectCollection);
            writer.WritePointer(this.Crates);
            writer.WritePointer(this.CratesPalette);
            writer.Write(this.GlobalLighting);
            writer.WritePointer(this.AtmosphericFogPalette);
            writer.WritePointer(this.PlanarFogPalette);
            writer.WritePointer(this.Flocks);
            writer.Write(this.Subtitles);
            writer.WritePointer(this.Decorators);
            writer.WritePointer(this.Creatures);
            writer.WritePointer(this.CreaturesPalette);
            writer.WritePointer(this.DecoratorsPalette);
            writer.WritePointer(this.BSPTransitionVolumes);
            writer.WritePointer(this.StructureBSPLighting);
            writer.WritePointer(this.EditorFolders);
            writer.WritePointer(this.LevelData);
            writer.Write(this.TerritoryLocationNames);
            writer.Write(this.fieldpad);
            writer.WritePointer(this.MissionDialogue);
            writer.Write(this.Objectives);
            writer.WritePointer(this.Interpolators);
            writer.WritePointer(this.SharedReferences);
            writer.WritePointer(this.ScreenEffectReferences);
            writer.WritePointer(this.SimulationDefinitionTable);
        }
        public enum TypeEnum : short
        {
            Multiplayer = 1,
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            CortanaHackSortsCortanaInFrontOfOtherTransparentGeometry = 1,
            AlwaysDrawSkyAlwaysDrawsSky0EvenIfNoskyPolygonsAreVisible = 2,
            DontStripPathfindingAlwaysLeavesPathfindingInEvenForMultiplayerScenario = 4,
            SymmetricMultiplayerMap = 8,
            QuickLoadingCinematicOnlyScenario = 16,
            CharactersUsePreviousMissionWeapons = 32,
            LightmapsSmoothPalettesWithNeighbors = 64,
            SnapToWhiteAtStart = 128,
        }
        [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
        public class ObjectSaltsBlock : GuerillaBlock, IWriteDeferrable
        {
            public int EMPTYSTRING;
            public override int SerializedSize
            {
                get
                {
                    return 4;
                }
            }
            public override int Alignment
            {
                get
                {
                    return 1;
                }
            }
            public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
            {
                System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
                this.EMPTYSTRING = binaryReader.ReadInt32();
                return pointerQueue;
            }
            public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
            {
                base.ReadInstances(binaryReader, pointerQueue);
            }
            public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
            {
                base.DeferReferences(writer);
            }
            public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
            {
                base.Write(writer);
                writer.Write(this.EMPTYSTRING);
            }
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Scnr = ((TagClass)("scnr"));
    }
}
