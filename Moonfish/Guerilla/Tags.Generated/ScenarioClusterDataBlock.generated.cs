//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("scenario_cluster_data_block")]
    public partial class ScenarioClusterDataBlock : GuerillaBlock, IWriteQueueable
    {
        [Moonfish.Tags.TagReferenceAttribute("sbsp")]
        public Moonfish.Tags.TagReference BSP;
        public ScenarioClusterBackgroundSoundsBlock[] BackgroundSounds = new ScenarioClusterBackgroundSoundsBlock[0];
        public ScenarioClusterSoundEnvironmentsBlock[] SoundEnvironments = new ScenarioClusterSoundEnvironmentsBlock[0];
        public int BSPChecksum;
        public ScenarioClusterPointsBlock[] ClusterCentroids = new ScenarioClusterPointsBlock[0];
        public ScenarioClusterWeatherPropertiesBlock[] WeatherProperties = new ScenarioClusterWeatherPropertiesBlock[0];
        public ScenarioClusterAtmosphericFogPropertiesBlock[] AtmosphericFogProperties = new ScenarioClusterAtmosphericFogPropertiesBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 52;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.BSP = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            this.BSPChecksum = binaryReader.ReadInt32();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.BackgroundSounds = base.ReadBlockArrayData<ScenarioClusterBackgroundSoundsBlock>(binaryReader, pointerQueue.Dequeue());
            this.SoundEnvironments = base.ReadBlockArrayData<ScenarioClusterSoundEnvironmentsBlock>(binaryReader, pointerQueue.Dequeue());
            this.ClusterCentroids = base.ReadBlockArrayData<ScenarioClusterPointsBlock>(binaryReader, pointerQueue.Dequeue());
            this.WeatherProperties = base.ReadBlockArrayData<ScenarioClusterWeatherPropertiesBlock>(binaryReader, pointerQueue.Dequeue());
            this.AtmosphericFogProperties = base.ReadBlockArrayData<ScenarioClusterAtmosphericFogPropertiesBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.BackgroundSounds);
            queueableBinaryWriter.Defer(this.SoundEnvironments);
            queueableBinaryWriter.Defer(this.ClusterCentroids);
            queueableBinaryWriter.Defer(this.WeatherProperties);
            queueableBinaryWriter.Defer(this.AtmosphericFogProperties);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.BSP);
            queueableBinaryWriter.WritePointer(this.BackgroundSounds);
            queueableBinaryWriter.WritePointer(this.SoundEnvironments);
            queueableBinaryWriter.Write(this.BSPChecksum);
            queueableBinaryWriter.WritePointer(this.ClusterCentroids);
            queueableBinaryWriter.WritePointer(this.WeatherProperties);
            queueableBinaryWriter.WritePointer(this.AtmosphericFogProperties);
        }
    }
}
