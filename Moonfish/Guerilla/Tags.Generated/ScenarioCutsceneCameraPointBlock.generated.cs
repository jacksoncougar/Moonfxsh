//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class ScenarioCutsceneCameraPointBlock : GuerillaBlock, IWriteQueueable
    {
        public Flags ScenarioCutsceneCameraPointFlags;
        public TypeEnum Type;
        public Moonfish.Tags.String32 Name;
        public OpenTK.Vector3 Position;
        public OpenTK.Vector3 Orientation;
        public float Unused;
        public override int SerializedSize
        {
            get
            {
                return 64;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.ScenarioCutsceneCameraPointFlags = ((Flags)(binaryReader.ReadInt16()));
            this.Type = ((TypeEnum)(binaryReader.ReadInt16()));
            this.Name = binaryReader.ReadString32();
            this.Position = binaryReader.ReadVector3();
            this.Orientation = binaryReader.ReadVector3();
            this.Unused = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((short)(this.ScenarioCutsceneCameraPointFlags)));
            queueableBlamBinaryWriter.Write(((short)(this.Type)));
            queueableBlamBinaryWriter.Write(this.Name);
            queueableBlamBinaryWriter.Write(this.Position);
            queueableBlamBinaryWriter.Write(this.Orientation);
            queueableBlamBinaryWriter.Write(this.Unused);
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            EditAsRelative = 1,
        }
        public enum TypeEnum : short
        {
            Normal = 0,
            IgnoreTargetOrientation = 1,
            Dolly = 2,
            IgnoreTargetUpdates = 3,
        }
    }
}
