//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("scenario_cutscene_title_block")]
    public partial class ScenarioCutsceneTitleBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.StringIdent Name;
        public OpenTK.Vector2 TextBounds;
        public JustificationEnum Justification;
        public FontEnum Font;
        public Moonfish.Tags.ColourR1G1B1 TextColor;
        private byte[] rgb8padding = new byte[1];
        public Moonfish.Tags.ColourR1G1B1 ShadowColor;
        private byte[] rgb8padding0 = new byte[1];
        public float FadeInTimeseconds;
        public float UpTimeseconds;
        public float FadeOutTimeseconds;
        private byte[] padding = new byte[2];
        public override int SerializedSize
        {
            get
            {
                return 38;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadStringIdent();
            this.TextBounds = binaryReader.ReadVector2();
            this.Justification = ((JustificationEnum)(binaryReader.ReadInt16()));
            this.Font = ((FontEnum)(binaryReader.ReadInt16()));
            this.TextColor = binaryReader.ReadColourR1G1B1();
            this.rgb8padding = binaryReader.ReadBytes(1);
            this.ShadowColor = binaryReader.ReadColourR1G1B1();
            this.rgb8padding0 = binaryReader.ReadBytes(1);
            this.FadeInTimeseconds = binaryReader.ReadSingle();
            this.UpTimeseconds = binaryReader.ReadSingle();
            this.FadeOutTimeseconds = binaryReader.ReadSingle();
            this.padding = binaryReader.ReadBytes(2);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Name);
            writer.Write(this.TextBounds);
            writer.Write(((short)(this.Justification)));
            writer.Write(((short)(this.Font)));
            writer.Write(this.TextColor);
            writer.Write(this.rgb8padding);
            writer.Write(this.ShadowColor);
            writer.Write(this.rgb8padding0);
            writer.Write(this.FadeInTimeseconds);
            writer.Write(this.UpTimeseconds);
            writer.Write(this.FadeOutTimeseconds);
            writer.Write(this.padding);
        }
        public enum JustificationEnum : short
        {
            Left = 0,
            Right = 1,
            Center = 2,
            CustomTextEntry = 3,
        }
        public enum FontEnum : short
        {
            TerminalFont = 0,
            BodyTextFont = 1,
            TitleFont = 2,
            SuperLargeFont = 3,
            LargeBodyTextFont = 4,
            SplitScreenHudMessageFont = 5,
            FullScreenHudMessageFont = 6,
            EnglishBodyTextFont = 7,
            HudNumberFont = 8,
            SubtitleFont = 9,
            MainMenuFont = 10,
            TextChatFont = 11,
        }
    }
}
