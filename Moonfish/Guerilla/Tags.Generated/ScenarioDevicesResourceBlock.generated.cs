//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("dgr*")]
    public partial class ScenarioDevicesResourceBlock : GuerillaBlock, IWriteQueueable
    {
        public ScenarioObjectNamesBlock[] Names = new ScenarioObjectNamesBlock[0];
        public DontUseMeScenarioEnvironmentObjectBlock[] DontUseMeScenarioEnvironmentObjectBlock = new DontUseMeScenarioEnvironmentObjectBlock[0];
        public ScenarioStructureBspReferenceBlock[] StructureReferences = new ScenarioStructureBspReferenceBlock[0];
        public DeviceGroupBlock[] DeviceGroups = new DeviceGroupBlock[0];
        public ScenarioMachineBlock[] Machines = new ScenarioMachineBlock[0];
        public ScenarioMachinePaletteBlock[] MachinesPalette = new ScenarioMachinePaletteBlock[0];
        public ScenarioControlBlock[] Controls = new ScenarioControlBlock[0];
        public ScenarioControlPaletteBlock[] ControlsPalette = new ScenarioControlPaletteBlock[0];
        public ScenarioLightFixtureBlock[] LightFixtures = new ScenarioLightFixtureBlock[0];
        public ScenarioLightFixturePaletteBlock[] LightFixturesPalette = new ScenarioLightFixturePaletteBlock[0];
        public int NextMachineIdSalt;
        public int NextControlIDSalt;
        public int NextLightFixtureIDSalt;
        public GScenarioEditorFolderBlock[] EditorFolders = new GScenarioEditorFolderBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 100;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(36));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(64));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(68));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(72));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(68));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(84));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            this.NextMachineIdSalt = binaryReader.ReadInt32();
            this.NextControlIDSalt = binaryReader.ReadInt32();
            this.NextLightFixtureIDSalt = binaryReader.ReadInt32();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(260));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Names = base.ReadBlockArrayData<ScenarioObjectNamesBlock>(binaryReader, pointerQueue.Dequeue());
            this.DontUseMeScenarioEnvironmentObjectBlock = base.ReadBlockArrayData<DontUseMeScenarioEnvironmentObjectBlock>(binaryReader, pointerQueue.Dequeue());
            this.StructureReferences = base.ReadBlockArrayData<ScenarioStructureBspReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.DeviceGroups = base.ReadBlockArrayData<DeviceGroupBlock>(binaryReader, pointerQueue.Dequeue());
            this.Machines = base.ReadBlockArrayData<ScenarioMachineBlock>(binaryReader, pointerQueue.Dequeue());
            this.MachinesPalette = base.ReadBlockArrayData<ScenarioMachinePaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.Controls = base.ReadBlockArrayData<ScenarioControlBlock>(binaryReader, pointerQueue.Dequeue());
            this.ControlsPalette = base.ReadBlockArrayData<ScenarioControlPaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.LightFixtures = base.ReadBlockArrayData<ScenarioLightFixtureBlock>(binaryReader, pointerQueue.Dequeue());
            this.LightFixturesPalette = base.ReadBlockArrayData<ScenarioLightFixturePaletteBlock>(binaryReader, pointerQueue.Dequeue());
            this.EditorFolders = base.ReadBlockArrayData<GScenarioEditorFolderBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.Names);
            queueableBlamBinaryWriter.QueueWrite(this.DontUseMeScenarioEnvironmentObjectBlock);
            queueableBlamBinaryWriter.QueueWrite(this.StructureReferences);
            queueableBlamBinaryWriter.QueueWrite(this.DeviceGroups);
            queueableBlamBinaryWriter.QueueWrite(this.Machines);
            queueableBlamBinaryWriter.QueueWrite(this.MachinesPalette);
            queueableBlamBinaryWriter.QueueWrite(this.Controls);
            queueableBlamBinaryWriter.QueueWrite(this.ControlsPalette);
            queueableBlamBinaryWriter.QueueWrite(this.LightFixtures);
            queueableBlamBinaryWriter.QueueWrite(this.LightFixturesPalette);
            queueableBlamBinaryWriter.QueueWrite(this.EditorFolders);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.WritePointer(this.Names);
            queueableBlamBinaryWriter.WritePointer(this.DontUseMeScenarioEnvironmentObjectBlock);
            queueableBlamBinaryWriter.WritePointer(this.StructureReferences);
            queueableBlamBinaryWriter.WritePointer(this.DeviceGroups);
            queueableBlamBinaryWriter.WritePointer(this.Machines);
            queueableBlamBinaryWriter.WritePointer(this.MachinesPalette);
            queueableBlamBinaryWriter.WritePointer(this.Controls);
            queueableBlamBinaryWriter.WritePointer(this.ControlsPalette);
            queueableBlamBinaryWriter.WritePointer(this.LightFixtures);
            queueableBlamBinaryWriter.WritePointer(this.LightFixturesPalette);
            queueableBlamBinaryWriter.Write(this.NextMachineIdSalt);
            queueableBlamBinaryWriter.Write(this.NextControlIDSalt);
            queueableBlamBinaryWriter.Write(this.NextLightFixtureIDSalt);
            queueableBlamBinaryWriter.WritePointer(this.EditorFolders);
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Dgr = ((TagClass)("dgr*"));
    }
}
