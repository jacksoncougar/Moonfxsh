//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class ScenarioFunctionBlock : GuerillaBlock, IWriteQueueable
    {
        public Flags ScenarioFunctionFlags;
        public Moonfish.Tags.String32 Name;
        public float Period;
        public Moonfish.Tags.ShortBlockIndex1 ScalePeriodBy;
        public FunctionEnum Function;
        public Moonfish.Tags.ShortBlockIndex1 ScaleFunctionBy;
        public WobbleFunctionEnum WobbleFunction;
        public float WobblePeriod;
        public float WobbleMagnitude;
        public float SquareWaveThreshold;
        public short StepCount;
        public MapToEnum MapTo;
        public short SawtoothCount;
        private byte[] fieldpad = new byte[2];
        public Moonfish.Tags.ShortBlockIndex1 ScaleResultBy;
        public BoundsModeEnum BoundsMode;
        public OpenTK.Vector2 Bounds;
        private byte[] fieldpad0 = new byte[4];
        private byte[] fieldpad1 = new byte[2];
        public Moonfish.Tags.ShortBlockIndex1 TurnOffWith;
        private byte[] fieldpad2 = new byte[16];
        private byte[] fieldpad3 = new byte[16];
        public override int SerializedSize
        {
            get
            {
                return 120;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.ScenarioFunctionFlags = ((Flags)(binaryReader.ReadInt32()));
            this.Name = binaryReader.ReadString32();
            this.Period = binaryReader.ReadSingle();
            this.ScalePeriodBy = binaryReader.ReadShortBlockIndex1();
            this.Function = ((FunctionEnum)(binaryReader.ReadInt16()));
            this.ScaleFunctionBy = binaryReader.ReadShortBlockIndex1();
            this.WobbleFunction = ((WobbleFunctionEnum)(binaryReader.ReadInt16()));
            this.WobblePeriod = binaryReader.ReadSingle();
            this.WobbleMagnitude = binaryReader.ReadSingle();
            this.SquareWaveThreshold = binaryReader.ReadSingle();
            this.StepCount = binaryReader.ReadInt16();
            this.MapTo = ((MapToEnum)(binaryReader.ReadInt16()));
            this.SawtoothCount = binaryReader.ReadInt16();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.ScaleResultBy = binaryReader.ReadShortBlockIndex1();
            this.BoundsMode = ((BoundsModeEnum)(binaryReader.ReadInt16()));
            this.Bounds = binaryReader.ReadVector2();
            this.fieldpad0 = binaryReader.ReadBytes(4);
            this.fieldpad1 = binaryReader.ReadBytes(2);
            this.TurnOffWith = binaryReader.ReadShortBlockIndex1();
            this.fieldpad2 = binaryReader.ReadBytes(16);
            this.fieldpad3 = binaryReader.ReadBytes(16);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((int)(this.ScenarioFunctionFlags)));
            queueableBlamBinaryWriter.Write(this.Name);
            queueableBlamBinaryWriter.Write(this.Period);
            queueableBlamBinaryWriter.Write(this.ScalePeriodBy);
            queueableBlamBinaryWriter.Write(((short)(this.Function)));
            queueableBlamBinaryWriter.Write(this.ScaleFunctionBy);
            queueableBlamBinaryWriter.Write(((short)(this.WobbleFunction)));
            queueableBlamBinaryWriter.Write(this.WobblePeriod);
            queueableBlamBinaryWriter.Write(this.WobbleMagnitude);
            queueableBlamBinaryWriter.Write(this.SquareWaveThreshold);
            queueableBlamBinaryWriter.Write(this.StepCount);
            queueableBlamBinaryWriter.Write(((short)(this.MapTo)));
            queueableBlamBinaryWriter.Write(this.SawtoothCount);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.ScaleResultBy);
            queueableBlamBinaryWriter.Write(((short)(this.BoundsMode)));
            queueableBlamBinaryWriter.Write(this.Bounds);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.fieldpad1);
            queueableBlamBinaryWriter.Write(this.TurnOffWith);
            queueableBlamBinaryWriter.Write(this.fieldpad2);
            queueableBlamBinaryWriter.Write(this.fieldpad3);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            ScriptedLevelScriptWillSetThisValueOtherSettingsHereWillBeIgnored = 1,
            InvertResultOfFunctionIs1MinusActualResult = 2,
            Additive = 4,
            AlwaysActiveFunctionDoesNotDeactivateWhenAtOrBelowLowerBound = 8,
        }
        public enum FunctionEnum : short
        {
            One = 0,
            Zero = 1,
            Cosine = 2,
            CosinevariablePeriod = 3,
            DiagonalWave = 4,
            DiagonalWavevariablePeriod = 5,
            Slide = 6,
            SlidevariablePeriod = 7,
            Noise = 8,
            Jitter = 9,
            Wander = 10,
            Spark = 11,
        }
        public enum WobbleFunctionEnum : short
        {
            One = 0,
            Zero = 1,
            Cosine = 2,
            CosinevariablePeriod = 3,
            DiagonalWave = 4,
            DiagonalWavevariablePeriod = 5,
            Slide = 6,
            SlidevariablePeriod = 7,
            Noise = 8,
            Jitter = 9,
            Wander = 10,
            Spark = 11,
        }
        public enum MapToEnum : short
        {
            Linear = 0,
            Early = 1,
            VeryEarly = 2,
            Late = 3,
            VeryLate = 4,
            Cosine = 5,
            One = 6,
            Zero = 7,
        }
        public enum BoundsModeEnum : short
        {
            Clip = 0,
            ClipAndNormalize = 1,
            ScaleToFit = 2,
        }
    }
}
