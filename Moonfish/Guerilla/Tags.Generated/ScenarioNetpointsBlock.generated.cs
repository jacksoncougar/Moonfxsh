//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class ScenarioNetpointsBlock : GuerillaBlock, IWriteQueueable
    {
        public OpenTK.Vector3 Position;
        public float Facing;
        public TypeEnum Type;
        public TeamDesignatorEnum TeamDesignator;
        public short Identifier;
        public Flags ScenarioNetpointsFlags;
        public Moonfish.Tags.StringIdent EMPTYSTRING;
        public Moonfish.Tags.StringIdent EMPTYSTRING0;
        public override int SerializedSize
        {
            get
            {
                return 32;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Position = binaryReader.ReadVector3();
            this.Facing = binaryReader.ReadSingle();
            this.Type = ((TypeEnum)(binaryReader.ReadInt16()));
            this.TeamDesignator = ((TeamDesignatorEnum)(binaryReader.ReadInt16()));
            this.Identifier = binaryReader.ReadInt16();
            this.ScenarioNetpointsFlags = ((Flags)(binaryReader.ReadInt16()));
            this.EMPTYSTRING = binaryReader.ReadStringIdent();
            this.EMPTYSTRING0 = binaryReader.ReadStringIdent();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.Position);
            queueableBinaryWriter.Write(this.Facing);
            queueableBinaryWriter.Write(((short)(this.Type)));
            queueableBinaryWriter.Write(((short)(this.TeamDesignator)));
            queueableBinaryWriter.Write(this.Identifier);
            queueableBinaryWriter.Write(((short)(this.ScenarioNetpointsFlags)));
            queueableBinaryWriter.Write(this.EMPTYSTRING);
            queueableBinaryWriter.Write(this.EMPTYSTRING0);
        }
        public enum TypeEnum : short
        {
            CTFFlagSpawn = 0,
            CTFFlagReturn = 1,
            AssaultBombSpawn = 2,
            AssaultBombReturn = 3,
            OddballSpawn = 4,
            Unused = 5,
            RaceCheckpoint = 6,
            Teleportersrc = 7,
            Teleporterdest = 8,
            HeadhunterBin = 9,
            TerritoriesFlag = 10,
            KingHill0 = 11,
            KingHill1 = 12,
            KingHill2 = 13,
            KingHill3 = 14,
            KingHill4 = 15,
            KingHill5 = 16,
            KingHill6 = 17,
            KingHill7 = 18,
        }
        public enum TeamDesignatorEnum : short
        {
            RedAlpha = 0,
            BlueBravo = 1,
            YellowCharlie = 2,
            GreenDelta = 3,
            PurpleEcho = 4,
            OrangeFoxtrot = 5,
            BrownGolf = 6,
            PinkHotel = 7,
            NEUTRAL = 8,
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            MultipleFlagBomb = 1,
            SingleFlagBomb = 2,
            NeutralFlagBomb = 4,
        }
    }
}
