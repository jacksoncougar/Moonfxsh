//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("scenario_object_permutation_struct_block")]
    public partial class ScenarioObjectPermutationStructBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.StringIdent VariantName;
        public ActiveChangeColors ScenarioObjectPermutationStructActiveChangeColors;
        public Moonfish.Tags.ColourR1G1B1 PrimaryColor;
        private byte[] rgb8padding = new byte[1];
        public Moonfish.Tags.ColourR1G1B1 SecondaryColor;
        private byte[] rgb8padding0 = new byte[1];
        public Moonfish.Tags.ColourR1G1B1 TertiaryColor;
        private byte[] rgb8padding1 = new byte[1];
        public Moonfish.Tags.ColourR1G1B1 QuaternaryColor;
        private byte[] rgb8padding2 = new byte[1];
        public override int SerializedSize
        {
            get
            {
                return 24;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.VariantName = binaryReader.ReadStringIdent();
            this.ScenarioObjectPermutationStructActiveChangeColors = ((ActiveChangeColors)(binaryReader.ReadInt32()));
            this.PrimaryColor = binaryReader.ReadColourR1G1B1();
            this.rgb8padding = binaryReader.ReadBytes(1);
            this.SecondaryColor = binaryReader.ReadColourR1G1B1();
            this.rgb8padding0 = binaryReader.ReadBytes(1);
            this.TertiaryColor = binaryReader.ReadColourR1G1B1();
            this.rgb8padding1 = binaryReader.ReadBytes(1);
            this.QuaternaryColor = binaryReader.ReadColourR1G1B1();
            this.rgb8padding2 = binaryReader.ReadBytes(1);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.VariantName);
            writer.Write(((int)(this.ScenarioObjectPermutationStructActiveChangeColors)));
            writer.Write(this.PrimaryColor);
            writer.Write(this.rgb8padding);
            writer.Write(this.SecondaryColor);
            writer.Write(this.rgb8padding0);
            writer.Write(this.TertiaryColor);
            writer.Write(this.rgb8padding1);
            writer.Write(this.QuaternaryColor);
            writer.Write(this.rgb8padding2);
        }
        [System.FlagsAttribute()]
        public enum ActiveChangeColors : int
        {
            None = 0,
            Primary = 1,
            Secondary = 2,
            Tertiary = 4,
            Quaternary = 8,
        }
    }
}
