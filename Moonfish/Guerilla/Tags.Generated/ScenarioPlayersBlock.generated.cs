//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("scenario_players_block")]
    public partial class ScenarioPlayersBlock : GuerillaBlock, IWriteQueueable
    {
        public OpenTK.Vector3 Position;
        public float Facing;
        public TeamDesignatorEnum TeamDesignator;
        public short BSPIndex;
        public GameType1Enum GameType1;
        public GameType2Enum GameType2;
        public GameType3Enum GameType3;
        public GameType4Enum GameType4;
        public SpawnType0Enum SpawnType0;
        public SpawnType1Enum SpawnType1;
        public SpawnType2Enum SpawnType2;
        public SpawnType3Enum SpawnType3;
        public Moonfish.Tags.StringIdent EMPTYSTRING;
        public Moonfish.Tags.StringIdent EMPTYSTRING0;
        public CampaignPlayerTypeEnum CampaignPlayerType;
        private byte[] fieldpad = new byte[6];
        public override int SerializedSize
        {
            get
            {
                return 52;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Position = binaryReader.ReadVector3();
            this.Facing = binaryReader.ReadSingle();
            this.TeamDesignator = ((TeamDesignatorEnum)(binaryReader.ReadInt16()));
            this.BSPIndex = binaryReader.ReadInt16();
            this.GameType1 = ((GameType1Enum)(binaryReader.ReadInt16()));
            this.GameType2 = ((GameType2Enum)(binaryReader.ReadInt16()));
            this.GameType3 = ((GameType3Enum)(binaryReader.ReadInt16()));
            this.GameType4 = ((GameType4Enum)(binaryReader.ReadInt16()));
            this.SpawnType0 = ((SpawnType0Enum)(binaryReader.ReadInt16()));
            this.SpawnType1 = ((SpawnType1Enum)(binaryReader.ReadInt16()));
            this.SpawnType2 = ((SpawnType2Enum)(binaryReader.ReadInt16()));
            this.SpawnType3 = ((SpawnType3Enum)(binaryReader.ReadInt16()));
            this.EMPTYSTRING = binaryReader.ReadStringIdent();
            this.EMPTYSTRING0 = binaryReader.ReadStringIdent();
            this.CampaignPlayerType = ((CampaignPlayerTypeEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(6);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.Position);
            queueableBinaryWriter.Write(this.Facing);
            queueableBinaryWriter.Write(((short)(this.TeamDesignator)));
            queueableBinaryWriter.Write(this.BSPIndex);
            queueableBinaryWriter.Write(((short)(this.GameType1)));
            queueableBinaryWriter.Write(((short)(this.GameType2)));
            queueableBinaryWriter.Write(((short)(this.GameType3)));
            queueableBinaryWriter.Write(((short)(this.GameType4)));
            queueableBinaryWriter.Write(((short)(this.SpawnType0)));
            queueableBinaryWriter.Write(((short)(this.SpawnType1)));
            queueableBinaryWriter.Write(((short)(this.SpawnType2)));
            queueableBinaryWriter.Write(((short)(this.SpawnType3)));
            queueableBinaryWriter.Write(this.EMPTYSTRING);
            queueableBinaryWriter.Write(this.EMPTYSTRING0);
            queueableBinaryWriter.Write(((short)(this.CampaignPlayerType)));
            queueableBinaryWriter.Write(this.fieldpad);
        }
        public enum TeamDesignatorEnum : short
        {
            RedAlpha = 0,
            BlueBravo = 1,
            YellowCharlie = 2,
            GreenDelta = 3,
            PurpleEcho = 4,
            OrangeFoxtrot = 5,
            BrownGolf = 6,
            PinkHotel = 7,
            NEUTRAL = 8,
        }
        public enum GameType1Enum : short
        {
            NONE = 0,
            CaptureTheFlag = 1,
            Slayer = 2,
            Oddball = 3,
            KingOfTheHill = 4,
            Race = 5,
            Headhunter = 6,
            Juggernaut = 7,
            Territories = 8,
            Stub = 9,
            Ignored3 = 10,
            Ignored4 = 11,
            AllGameTypes = 12,
            AllExceptCTF = 13,
            AllExceptCTFRace = 14,
        }
        public enum GameType2Enum : short
        {
            NONE = 0,
            CaptureTheFlag = 1,
            Slayer = 2,
            Oddball = 3,
            KingOfTheHill = 4,
            Race = 5,
            Headhunter = 6,
            Juggernaut = 7,
            Territories = 8,
            Stub = 9,
            Ignored3 = 10,
            Ignored4 = 11,
            AllGameTypes = 12,
            AllExceptCTF = 13,
            AllExceptCTFRace = 14,
        }
        public enum GameType3Enum : short
        {
            NONE = 0,
            CaptureTheFlag = 1,
            Slayer = 2,
            Oddball = 3,
            KingOfTheHill = 4,
            Race = 5,
            Headhunter = 6,
            Juggernaut = 7,
            Territories = 8,
            Stub = 9,
            Ignored3 = 10,
            Ignored4 = 11,
            AllGameTypes = 12,
            AllExceptCTF = 13,
            AllExceptCTFRace = 14,
        }
        public enum GameType4Enum : short
        {
            NONE = 0,
            CaptureTheFlag = 1,
            Slayer = 2,
            Oddball = 3,
            KingOfTheHill = 4,
            Race = 5,
            Headhunter = 6,
            Juggernaut = 7,
            Territories = 8,
            Stub = 9,
            Ignored3 = 10,
            Ignored4 = 11,
            AllGameTypes = 12,
            AllExceptCTF = 13,
            AllExceptCTFRace = 14,
        }
        public enum SpawnType0Enum : short
        {
            Both = 0,
            InitialSpawnOnly = 1,
            RespawnOnly = 2,
        }
        public enum SpawnType1Enum : short
        {
            Both = 0,
            InitialSpawnOnly = 1,
            RespawnOnly = 2,
        }
        public enum SpawnType2Enum : short
        {
            Both = 0,
            InitialSpawnOnly = 1,
            RespawnOnly = 2,
        }
        public enum SpawnType3Enum : short
        {
            Both = 0,
            InitialSpawnOnly = 1,
            RespawnOnly = 2,
        }
        public enum CampaignPlayerTypeEnum : short
        {
            Masterchief = 0,
            Dervish = 1,
            ChiefMultiplayer = 2,
            EliteMultiplayer = 3,
        }
    }
}
