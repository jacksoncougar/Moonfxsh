//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("scenario_scenery_datum_struct_v4_block")]
    public partial class ScenarioSceneryDatumStructV4Block : GuerillaBlock, IWriteQueueable
    {
        public PathfindingPolicyEnum PathfindingPolicy;
        public LightmappingPolicyEnum LightmappingPolicy;
        public PathfindingObjectIndexListBlock[] PathfindingReferences = new PathfindingObjectIndexListBlock[0];
        private byte[] fieldpad = new byte[2];
        public ValidMultiplayerGames ScenarioSceneryDatumStructV4ValidMultiplayerGames;
        public override int SerializedSize
        {
            get
            {
                return 16;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.PathfindingPolicy = ((PathfindingPolicyEnum)(binaryReader.ReadInt16()));
            this.LightmappingPolicy = ((LightmappingPolicyEnum)(binaryReader.ReadInt16()));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.ScenarioSceneryDatumStructV4ValidMultiplayerGames = ((ValidMultiplayerGames)(binaryReader.ReadInt16()));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.PathfindingReferences = base.ReadBlockArrayData<PathfindingObjectIndexListBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.PathfindingReferences);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.PathfindingPolicy)));
            queueableBinaryWriter.Write(((short)(this.LightmappingPolicy)));
            queueableBinaryWriter.WritePointer(this.PathfindingReferences);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(((short)(this.ScenarioSceneryDatumStructV4ValidMultiplayerGames)));
        }
        public enum PathfindingPolicyEnum : short
        {
            TagDefault = 0,
            PathfindingDYNAMIC = 1,
            PathfindingCUTOUT = 2,
            PathfindingSTATIC = 3,
            PathfindingNONE = 4,
        }
        public enum LightmappingPolicyEnum : short
        {
            TagDefault = 0,
            Dynamic = 1,
            PerVertex = 2,
        }
        [System.FlagsAttribute()]
        public enum ValidMultiplayerGames : short
        {
            None = 0,
            CaptureTheFlag = 1,
            Slayer = 2,
            Oddball = 4,
            KingOfTheHill = 8,
            Juggernaut = 16,
            Territories = 32,
            Assault = 64,
        }
    }
}
