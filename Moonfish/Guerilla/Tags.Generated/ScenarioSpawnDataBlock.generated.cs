//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("scenario_spawn_data_block")]
    public partial class ScenarioSpawnDataBlock : GuerillaBlock, IWriteDeferrable
    {
        /// <summary>
        /// Non-0 values here overload what appears in multiplayer_globals.
        /// </summary>
        public float DynamicSpawnLowerHeight;
        public float DynamicSpawnUpperHeight;
        public float GameObjectResetHeight;
        private byte[] fieldpad = new byte[60];
        public DynamicSpawnZoneOverloadBlock[] DynamicSpawnOverloads = new DynamicSpawnZoneOverloadBlock[0];
        public StaticSpawnZoneBlock[] StaticRespawnZones = new StaticSpawnZoneBlock[0];
        public StaticSpawnZoneBlock[] StaticInitialSpawnZones = new StaticSpawnZoneBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 96;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.DynamicSpawnLowerHeight = binaryReader.ReadSingle();
            this.DynamicSpawnUpperHeight = binaryReader.ReadSingle();
            this.GameObjectResetHeight = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(60);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(48));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(48));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.DynamicSpawnOverloads = base.ReadBlockArrayData<DynamicSpawnZoneOverloadBlock>(binaryReader, pointerQueue.Dequeue());
            this.StaticRespawnZones = base.ReadBlockArrayData<StaticSpawnZoneBlock>(binaryReader, pointerQueue.Dequeue());
            this.StaticInitialSpawnZones = base.ReadBlockArrayData<StaticSpawnZoneBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.DynamicSpawnOverloads);
            writer.Defer(this.StaticRespawnZones);
            writer.Defer(this.StaticInitialSpawnZones);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.DynamicSpawnLowerHeight);
            writer.Write(this.DynamicSpawnUpperHeight);
            writer.Write(this.GameObjectResetHeight);
            writer.Write(this.fieldpad);
            writer.WritePointer(this.DynamicSpawnOverloads);
            writer.WritePointer(this.StaticRespawnZones);
            writer.WritePointer(this.StaticInitialSpawnZones);
        }
    }
}
