//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class ScenarioStructureBspReferenceBlock : GuerillaBlock, IWriteQueueable
    {
        public MoonfishGlobalStructureBlockInfoStructBlock StructureBlockInfo = new MoonfishGlobalStructureBlockInfoStructBlock();
        [Moonfish.Tags.TagReferenceAttribute("sbsp")]
        public Moonfish.Tags.TagReference StructureBSP;
        [Moonfish.Tags.TagReferenceAttribute("ltmp")]
        public Moonfish.Tags.TagReference StructureLightmap;
        private byte[] fieldpad = new byte[4];
        public float UNUSEDRadianceEstSearchDistance;
        private byte[] fieldpad0 = new byte[4];
        public float UNUSEDLuminelsPerWorldUnit;
        public float UNUSEDOutputWhiteReference;
        private byte[] fieldpad1 = new byte[8];
        public Flags ScenarioStructureBspReferenceFlags;
        private byte[] fieldpad2 = new byte[2];
        public Moonfish.Tags.ShortBlockIndex1 DefaultSky;
        private byte[] fieldpad3 = new byte[2];
        public override int SerializedSize
        {
            get
            {
                return 68;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.StructureBlockInfo.ReadFields(binaryReader)));
            this.StructureBSP = binaryReader.ReadTagReference();
            this.StructureLightmap = binaryReader.ReadTagReference();
            this.fieldpad = binaryReader.ReadBytes(4);
            this.UNUSEDRadianceEstSearchDistance = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(4);
            this.UNUSEDLuminelsPerWorldUnit = binaryReader.ReadSingle();
            this.UNUSEDOutputWhiteReference = binaryReader.ReadSingle();
            this.fieldpad1 = binaryReader.ReadBytes(8);
            this.ScenarioStructureBspReferenceFlags = ((Flags)(binaryReader.ReadInt16()));
            this.fieldpad2 = binaryReader.ReadBytes(2);
            this.DefaultSky = binaryReader.ReadShortBlockIndex1();
            this.fieldpad3 = binaryReader.ReadBytes(2);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.StructureBlockInfo.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            this.StructureBlockInfo.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            this.StructureBlockInfo.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.StructureBSP);
            queueableBlamBinaryWriter.Write(this.StructureLightmap);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.UNUSEDRadianceEstSearchDistance);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.UNUSEDLuminelsPerWorldUnit);
            queueableBlamBinaryWriter.Write(this.UNUSEDOutputWhiteReference);
            queueableBlamBinaryWriter.Write(this.fieldpad1);
            queueableBlamBinaryWriter.Write(((short)(this.ScenarioStructureBspReferenceFlags)));
            queueableBlamBinaryWriter.Write(this.fieldpad2);
            queueableBlamBinaryWriter.Write(this.DefaultSky);
            queueableBlamBinaryWriter.Write(this.fieldpad3);
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            DefaultSkyEnabled = 1,
        }
    }
}
