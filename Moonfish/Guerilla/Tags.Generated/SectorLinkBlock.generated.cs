//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("sector_link_block")]
    public partial class SectorLinkBlock : GuerillaBlock, IWriteQueueable
    {
        public short Vertex1;
        public short Vertex2;
        public LinkFlags SectorLinkLinkFlags;
        public short HintIndex;
        public short ForwardLink;
        public short ReverseLink;
        public short LeftSector;
        public short RightSector;
        public override int SerializedSize
        {
            get
            {
                return 16;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Vertex1 = binaryReader.ReadInt16();
            this.Vertex2 = binaryReader.ReadInt16();
            this.SectorLinkLinkFlags = ((LinkFlags)(binaryReader.ReadInt16()));
            this.HintIndex = binaryReader.ReadInt16();
            this.ForwardLink = binaryReader.ReadInt16();
            this.ReverseLink = binaryReader.ReadInt16();
            this.LeftSector = binaryReader.ReadInt16();
            this.RightSector = binaryReader.ReadInt16();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.Vertex1);
            queueableBinaryWriter.Write(this.Vertex2);
            queueableBinaryWriter.Write(((short)(this.SectorLinkLinkFlags)));
            queueableBinaryWriter.Write(this.HintIndex);
            queueableBinaryWriter.Write(this.ForwardLink);
            queueableBinaryWriter.Write(this.ReverseLink);
            queueableBinaryWriter.Write(this.LeftSector);
            queueableBinaryWriter.Write(this.RightSector);
        }
        [System.FlagsAttribute()]
        public enum LinkFlags : short
        {
            None = 0,
            SectorLinkFromCollisionEdge = 1,
            SectorIntersectionLink = 2,
            SectorLinkBsp2dCreationError = 4,
            SectorLinkTopologyError = 8,
            SectorLinkChainError = 16,
            SectorLinkBothSectorsWalkable = 32,
            SectorLinkMagicHangingLink = 64,
            SectorLinkThreshold = 128,
            SectorLinkCrouchable = 256,
            SectorLinkWallBase = 512,
            SectorLinkLedge = 1024,
            SectorLinkLeanable = 2048,
            SectorLinkStartCorner = 4096,
            SectorLinkEndCorner = 8192,
        }
    }
}
