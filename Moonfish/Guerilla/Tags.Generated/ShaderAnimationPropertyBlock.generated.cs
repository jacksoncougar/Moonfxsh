//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("shader_animation_property_block")]
    public partial class ShaderAnimationPropertyBlock : GuerillaBlock, IWriteQueueable
    {
        public TypeEnum Type;
        private byte[] fieldpad = new byte[2];
        public Moonfish.Tags.StringIdent InputName;
        public Moonfish.Tags.StringIdent RangeName;
        public float TimePeriod;
        public MappingFunctionBlock Function = new MappingFunctionBlock();
        public override int SerializedSize
        {
            get
            {
                return 24;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Type = ((TypeEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.InputName = binaryReader.ReadStringIdent();
            this.RangeName = binaryReader.ReadStringIdent();
            this.TimePeriod = binaryReader.ReadSingle();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Function.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Function.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            this.Function.QueueWrites(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.Type)));
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.InputName);
            queueableBinaryWriter.Write(this.RangeName);
            queueableBinaryWriter.Write(this.TimePeriod);
            this.Function.Write_(queueableBinaryWriter);
        }
        public enum TypeEnum : short
        {
            BitmapScaleUniform = 0,
            BitmapScaleX = 1,
            BitmapScaleY = 2,
            BitmapScaleZ = 3,
            BitmapTranslationX = 4,
            BitmapTranslationY = 5,
            BitmapTranslationZ = 6,
            BitmapRotationAngle = 7,
            BitmapRotationAxisX = 8,
            BitmapRotationAxisY = 9,
            BitmapRotationAxisZ = 10,
            Value = 11,
            Color = 12,
            BitmapIndex = 13,
        }
    }
}
