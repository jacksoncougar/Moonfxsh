//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("shader_gpu_state_reference_struct_block")]
    public partial class ShaderGpuStateReferenceStructBlock : GuerillaBlock, IWriteQueueable
    {
        public TagBlockIndexStructBlock RenderStates = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock TextureStageStates = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock RenderStateParameters = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock TextureStageParameters = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock Textures = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock VnConstants = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock CnConstants = new TagBlockIndexStructBlock();
        public override int SerializedSize
        {
            get
            {
                return 14;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.RenderStates.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.TextureStageStates.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.RenderStateParameters.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.TextureStageParameters.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Textures.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.VnConstants.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.CnConstants.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.RenderStates.ReadInstances(binaryReader, pointerQueue);
            this.TextureStageStates.ReadInstances(binaryReader, pointerQueue);
            this.RenderStateParameters.ReadInstances(binaryReader, pointerQueue);
            this.TextureStageParameters.ReadInstances(binaryReader, pointerQueue);
            this.Textures.ReadInstances(binaryReader, pointerQueue);
            this.VnConstants.ReadInstances(binaryReader, pointerQueue);
            this.CnConstants.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            this.RenderStates.QueueWrites(queueableBinaryWriter);
            this.TextureStageStates.QueueWrites(queueableBinaryWriter);
            this.RenderStateParameters.QueueWrites(queueableBinaryWriter);
            this.TextureStageParameters.QueueWrites(queueableBinaryWriter);
            this.Textures.QueueWrites(queueableBinaryWriter);
            this.VnConstants.QueueWrites(queueableBinaryWriter);
            this.CnConstants.QueueWrites(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            this.RenderStates.Write(queueableBinaryWriter);
            this.TextureStageStates.Write(queueableBinaryWriter);
            this.RenderStateParameters.Write(queueableBinaryWriter);
            this.TextureStageParameters.Write(queueableBinaryWriter);
            this.Textures.Write(queueableBinaryWriter);
            this.VnConstants.Write(queueableBinaryWriter);
            this.CnConstants.Write(queueableBinaryWriter);
        }
    }
}
