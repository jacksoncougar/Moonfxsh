//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("shader_pass_postprocess_definition_new_block")]
    public partial class ShaderPassPostprocessDefinitionNewBlock : GuerillaBlock, IWriteDeferrable
    {
        public ShaderPassPostprocessImplementationNewBlock[] Implementations = new ShaderPassPostprocessImplementationNewBlock[0];
        public ShaderPassPostprocessTextureNewBlock[] Textures = new ShaderPassPostprocessTextureNewBlock[0];
        public RenderStateBlock[] RenderStates = new RenderStateBlock[0];
        public ShaderPassPostprocessTextureStateBlock[] TextureStates = new ShaderPassPostprocessTextureStateBlock[0];
        public PixelShaderFragmentBlock[] PsFragments = new PixelShaderFragmentBlock[0];
        public PixelShaderPermutationNewBlock[] PsPermutations = new PixelShaderPermutationNewBlock[0];
        public PixelShaderCombinerBlock[] PsCombiners = new PixelShaderCombinerBlock[0];
        public ShaderPassPostprocessExternNewBlock[] Externs = new ShaderPassPostprocessExternNewBlock[0];
        public ShaderPassPostprocessConstantNewBlock[] Constants = new ShaderPassPostprocessConstantNewBlock[0];
        public ShaderPassPostprocessConstantInfoNewBlock[] ConstantInfo = new ShaderPassPostprocessConstantInfoNewBlock[0];
        public ShaderPassPostprocessImplementationBlock[] OldImplementations = new ShaderPassPostprocessImplementationBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 88;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(304));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(5));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(6));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(7));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(7));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(438));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Implementations = base.ReadBlockArrayData<ShaderPassPostprocessImplementationNewBlock>(binaryReader, pointerQueue.Dequeue());
            this.Textures = base.ReadBlockArrayData<ShaderPassPostprocessTextureNewBlock>(binaryReader, pointerQueue.Dequeue());
            this.RenderStates = base.ReadBlockArrayData<RenderStateBlock>(binaryReader, pointerQueue.Dequeue());
            this.TextureStates = base.ReadBlockArrayData<ShaderPassPostprocessTextureStateBlock>(binaryReader, pointerQueue.Dequeue());
            this.PsFragments = base.ReadBlockArrayData<PixelShaderFragmentBlock>(binaryReader, pointerQueue.Dequeue());
            this.PsPermutations = base.ReadBlockArrayData<PixelShaderPermutationNewBlock>(binaryReader, pointerQueue.Dequeue());
            this.PsCombiners = base.ReadBlockArrayData<PixelShaderCombinerBlock>(binaryReader, pointerQueue.Dequeue());
            this.Externs = base.ReadBlockArrayData<ShaderPassPostprocessExternNewBlock>(binaryReader, pointerQueue.Dequeue());
            this.Constants = base.ReadBlockArrayData<ShaderPassPostprocessConstantNewBlock>(binaryReader, pointerQueue.Dequeue());
            this.ConstantInfo = base.ReadBlockArrayData<ShaderPassPostprocessConstantInfoNewBlock>(binaryReader, pointerQueue.Dequeue());
            this.OldImplementations = base.ReadBlockArrayData<ShaderPassPostprocessImplementationBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.DeferReferences(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.Implementations);
            queueableBinaryWriter.Defer(this.Textures);
            queueableBinaryWriter.Defer(this.RenderStates);
            queueableBinaryWriter.Defer(this.TextureStates);
            queueableBinaryWriter.Defer(this.PsFragments);
            queueableBinaryWriter.Defer(this.PsPermutations);
            queueableBinaryWriter.Defer(this.PsCombiners);
            queueableBinaryWriter.Defer(this.Externs);
            queueableBinaryWriter.Defer(this.Constants);
            queueableBinaryWriter.Defer(this.ConstantInfo);
            queueableBinaryWriter.Defer(this.OldImplementations);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.WritePointer(this.Implementations);
            queueableBinaryWriter.WritePointer(this.Textures);
            queueableBinaryWriter.WritePointer(this.RenderStates);
            queueableBinaryWriter.WritePointer(this.TextureStates);
            queueableBinaryWriter.WritePointer(this.PsFragments);
            queueableBinaryWriter.WritePointer(this.PsPermutations);
            queueableBinaryWriter.WritePointer(this.PsCombiners);
            queueableBinaryWriter.WritePointer(this.Externs);
            queueableBinaryWriter.WritePointer(this.Constants);
            queueableBinaryWriter.WritePointer(this.ConstantInfo);
            queueableBinaryWriter.WritePointer(this.OldImplementations);
        }
    }
}
