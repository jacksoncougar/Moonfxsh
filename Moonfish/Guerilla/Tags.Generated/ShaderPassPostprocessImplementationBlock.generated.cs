//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class ShaderPassPostprocessImplementationBlock : GuerillaBlock, IWriteQueueable
    {
        public ShaderGpuStateStructBlock GPUState = new ShaderGpuStateStructBlock();
        public ShaderGpuStateReferenceStructBlock GPUConstantState = new ShaderGpuStateReferenceStructBlock();
        public ShaderGpuStateReferenceStructBlock GPUVolatileState = new ShaderGpuStateReferenceStructBlock();
        public ShaderGpuStateReferenceStructBlock GPUDefaultState = new ShaderGpuStateReferenceStructBlock();
        [Moonfish.Tags.TagReferenceAttribute("vrtx")]
        public Moonfish.Tags.TagReference VertexShader;
        private byte[] fieldskip = new byte[8];
        private byte[] fieldskip0 = new byte[8];
        private byte[] fieldskip1 = new byte[4];
        private byte[] fieldskip2 = new byte[4];
        public ExternReferenceBlock[] ValueExterns = new ExternReferenceBlock[0];
        public ExternReferenceBlock[] ColorExterns = new ExternReferenceBlock[0];
        public ExternReferenceBlock[] SwitchExterns = new ExternReferenceBlock[0];
        public short BitmapParameterCount;
        private byte[] fieldpad = new byte[2];
        private byte[] fieldskip3 = new byte[240];
        public PixelShaderFragmentBlock[] PixelShaderFragments = new PixelShaderFragmentBlock[0];
        public PixelShaderPermutationBlock[] PixelShaderPermutations = new PixelShaderPermutationBlock[0];
        public PixelShaderCombinerBlock[] PixelShaderCombiners = new PixelShaderCombinerBlock[0];
        public PixelShaderConstantBlock[] PixelShaderConstants = new PixelShaderConstantBlock[0];
        private byte[] fieldskip4 = new byte[4];
        private byte[] fieldskip5 = new byte[4];
        public override int SerializedSize
        {
            get
            {
                return 438;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.GPUState.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.GPUConstantState.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.GPUVolatileState.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.GPUDefaultState.ReadFields(binaryReader)));
            this.VertexShader = binaryReader.ReadTagReference();
            this.fieldskip = binaryReader.ReadBytes(8);
            this.fieldskip0 = binaryReader.ReadBytes(8);
            this.fieldskip1 = binaryReader.ReadBytes(4);
            this.fieldskip2 = binaryReader.ReadBytes(4);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(2));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(2));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(2));
            this.BitmapParameterCount = binaryReader.ReadInt16();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.fieldskip3 = binaryReader.ReadBytes(240);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(6));
            this.fieldskip4 = binaryReader.ReadBytes(4);
            this.fieldskip5 = binaryReader.ReadBytes(4);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.GPUState.ReadInstances(binaryReader, pointerQueue);
            this.GPUConstantState.ReadInstances(binaryReader, pointerQueue);
            this.GPUVolatileState.ReadInstances(binaryReader, pointerQueue);
            this.GPUDefaultState.ReadInstances(binaryReader, pointerQueue);
            this.ValueExterns = base.ReadBlockArrayData<ExternReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.ColorExterns = base.ReadBlockArrayData<ExternReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.SwitchExterns = base.ReadBlockArrayData<ExternReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.PixelShaderFragments = base.ReadBlockArrayData<PixelShaderFragmentBlock>(binaryReader, pointerQueue.Dequeue());
            this.PixelShaderPermutations = base.ReadBlockArrayData<PixelShaderPermutationBlock>(binaryReader, pointerQueue.Dequeue());
            this.PixelShaderCombiners = base.ReadBlockArrayData<PixelShaderCombinerBlock>(binaryReader, pointerQueue.Dequeue());
            this.PixelShaderConstants = base.ReadBlockArrayData<PixelShaderConstantBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            this.GPUState.QueueWrites(queueableBlamBinaryWriter);
            this.GPUConstantState.QueueWrites(queueableBlamBinaryWriter);
            this.GPUVolatileState.QueueWrites(queueableBlamBinaryWriter);
            this.GPUDefaultState.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.ValueExterns);
            queueableBlamBinaryWriter.QueueWrite(this.ColorExterns);
            queueableBlamBinaryWriter.QueueWrite(this.SwitchExterns);
            queueableBlamBinaryWriter.QueueWrite(this.PixelShaderFragments);
            queueableBlamBinaryWriter.QueueWrite(this.PixelShaderPermutations);
            queueableBlamBinaryWriter.QueueWrite(this.PixelShaderCombiners);
            queueableBlamBinaryWriter.QueueWrite(this.PixelShaderConstants);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            this.GPUState.Write_(queueableBlamBinaryWriter);
            this.GPUConstantState.Write_(queueableBlamBinaryWriter);
            this.GPUVolatileState.Write_(queueableBlamBinaryWriter);
            this.GPUDefaultState.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.VertexShader);
            queueableBlamBinaryWriter.Write(this.fieldskip);
            queueableBlamBinaryWriter.Write(this.fieldskip0);
            queueableBlamBinaryWriter.Write(this.fieldskip1);
            queueableBlamBinaryWriter.Write(this.fieldskip2);
            queueableBlamBinaryWriter.WritePointer(this.ValueExterns);
            queueableBlamBinaryWriter.WritePointer(this.ColorExterns);
            queueableBlamBinaryWriter.WritePointer(this.SwitchExterns);
            queueableBlamBinaryWriter.Write(this.BitmapParameterCount);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.fieldskip3);
            queueableBlamBinaryWriter.WritePointer(this.PixelShaderFragments);
            queueableBlamBinaryWriter.WritePointer(this.PixelShaderPermutations);
            queueableBlamBinaryWriter.WritePointer(this.PixelShaderCombiners);
            queueableBlamBinaryWriter.WritePointer(this.PixelShaderConstants);
            queueableBlamBinaryWriter.Write(this.fieldskip4);
            queueableBlamBinaryWriter.Write(this.fieldskip5);
        }
    }
}
