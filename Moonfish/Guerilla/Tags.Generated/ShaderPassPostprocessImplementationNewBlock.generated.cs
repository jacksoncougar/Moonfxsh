//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("shader_pass_postprocess_implementation_new_block")]
    public partial class ShaderPassPostprocessImplementationNewBlock : GuerillaBlock, IWriteDeferrable
    {
        public TagBlockIndexStructBlock Textures = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock RenderStates = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock TextureStates = new TagBlockIndexStructBlock();
        private byte[] fieldskip = new byte[240];
        public TagBlockIndexStructBlock PsFragments = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock PsPermutations = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock PsCombiners = new TagBlockIndexStructBlock();
        [Moonfish.Tags.TagReferenceAttribute("vrtx")]
        public Moonfish.Tags.TagReference VertexShader;
        private byte[] fieldskip0 = new byte[8];
        private byte[] fieldskip1 = new byte[8];
        private byte[] fieldskip2 = new byte[4];
        private byte[] fieldskip3 = new byte[4];
        public TagBlockIndexStructBlock DefaultRenderStates = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock RenderStateExterns = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock TextureStateExterns = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock PixelConstantExterns = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock VertexConstantExterns = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock PsConstants = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock VsConstants = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock PixelConstantInfo = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock VertexConstantInfo = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock RenderStateInfo = new TagBlockIndexStructBlock();
        public override int SerializedSize
        {
            get
            {
                return 304;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Textures.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.RenderStates.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.TextureStates.ReadFields(binaryReader)));
            this.fieldskip = binaryReader.ReadBytes(240);
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.PsFragments.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.PsPermutations.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.PsCombiners.ReadFields(binaryReader)));
            this.VertexShader = binaryReader.ReadTagReference();
            this.fieldskip0 = binaryReader.ReadBytes(8);
            this.fieldskip1 = binaryReader.ReadBytes(8);
            this.fieldskip2 = binaryReader.ReadBytes(4);
            this.fieldskip3 = binaryReader.ReadBytes(4);
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.DefaultRenderStates.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.RenderStateExterns.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.TextureStateExterns.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.PixelConstantExterns.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.VertexConstantExterns.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.PsConstants.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.VsConstants.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.PixelConstantInfo.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.VertexConstantInfo.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.RenderStateInfo.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Textures.ReadInstances(binaryReader, pointerQueue);
            this.RenderStates.ReadInstances(binaryReader, pointerQueue);
            this.TextureStates.ReadInstances(binaryReader, pointerQueue);
            this.PsFragments.ReadInstances(binaryReader, pointerQueue);
            this.PsPermutations.ReadInstances(binaryReader, pointerQueue);
            this.PsCombiners.ReadInstances(binaryReader, pointerQueue);
            this.DefaultRenderStates.ReadInstances(binaryReader, pointerQueue);
            this.RenderStateExterns.ReadInstances(binaryReader, pointerQueue);
            this.TextureStateExterns.ReadInstances(binaryReader, pointerQueue);
            this.PixelConstantExterns.ReadInstances(binaryReader, pointerQueue);
            this.VertexConstantExterns.ReadInstances(binaryReader, pointerQueue);
            this.PsConstants.ReadInstances(binaryReader, pointerQueue);
            this.VsConstants.ReadInstances(binaryReader, pointerQueue);
            this.PixelConstantInfo.ReadInstances(binaryReader, pointerQueue);
            this.VertexConstantInfo.ReadInstances(binaryReader, pointerQueue);
            this.RenderStateInfo.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            this.Textures.DeferReferences(writer);
            this.RenderStates.DeferReferences(writer);
            this.TextureStates.DeferReferences(writer);
            this.PsFragments.DeferReferences(writer);
            this.PsPermutations.DeferReferences(writer);
            this.PsCombiners.DeferReferences(writer);
            this.DefaultRenderStates.DeferReferences(writer);
            this.RenderStateExterns.DeferReferences(writer);
            this.TextureStateExterns.DeferReferences(writer);
            this.PixelConstantExterns.DeferReferences(writer);
            this.VertexConstantExterns.DeferReferences(writer);
            this.PsConstants.DeferReferences(writer);
            this.VsConstants.DeferReferences(writer);
            this.PixelConstantInfo.DeferReferences(writer);
            this.VertexConstantInfo.DeferReferences(writer);
            this.RenderStateInfo.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            this.Textures.Write(writer);
            this.RenderStates.Write(writer);
            this.TextureStates.Write(writer);
            writer.Write(this.fieldskip);
            this.PsFragments.Write(writer);
            this.PsPermutations.Write(writer);
            this.PsCombiners.Write(writer);
            writer.Write(this.VertexShader);
            writer.Write(this.fieldskip0);
            writer.Write(this.fieldskip1);
            writer.Write(this.fieldskip2);
            writer.Write(this.fieldskip3);
            this.DefaultRenderStates.Write(writer);
            this.RenderStateExterns.Write(writer);
            this.TextureStateExterns.Write(writer);
            this.PixelConstantExterns.Write(writer);
            this.VertexConstantExterns.Write(writer);
            this.PsConstants.Write(writer);
            this.VsConstants.Write(writer);
            this.PixelConstantInfo.Write(writer);
            this.VertexConstantInfo.Write(writer);
            this.RenderStateInfo.Write(writer);
        }
    }
}
