//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("shader_pass_texture_block")]
    public partial class ShaderPassTextureBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.StringIdent SourceParameter;
        public SourceExternEnum SourceExtern;
        private byte[] fieldpad = new byte[2];
        private byte[] fieldskip = new byte[2];
        public ModeEnum Mode;
        private byte[] fieldpad0 = new byte[2];
        public DotMappingEnum DotMapping;
        public short InputStage;
        private byte[] fieldpad1 = new byte[2];
        public ShaderTextureStateAddressStateBlock[] AddressState = new ShaderTextureStateAddressStateBlock[0];
        public ShaderTextureStateFilterStateBlock[] FilterState = new ShaderTextureStateFilterStateBlock[0];
        public ShaderTextureStateKillStateBlock[] KillState = new ShaderTextureStateKillStateBlock[0];
        public ShaderTextureStateMiscStateBlock[] MiscState = new ShaderTextureStateMiscStateBlock[0];
        public ShaderTextureStateConstantBlock[] Constants = new ShaderTextureStateConstantBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 60;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.SourceParameter = binaryReader.ReadStringIdent();
            this.SourceExtern = ((SourceExternEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.fieldskip = binaryReader.ReadBytes(2);
            this.Mode = ((ModeEnum)(binaryReader.ReadInt16()));
            this.fieldpad0 = binaryReader.ReadBytes(2);
            this.DotMapping = ((DotMappingEnum)(binaryReader.ReadInt16()));
            this.InputStage = binaryReader.ReadInt16();
            this.fieldpad1 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(11));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.AddressState = base.ReadBlockArrayData<ShaderTextureStateAddressStateBlock>(binaryReader, pointerQueue.Dequeue());
            this.FilterState = base.ReadBlockArrayData<ShaderTextureStateFilterStateBlock>(binaryReader, pointerQueue.Dequeue());
            this.KillState = base.ReadBlockArrayData<ShaderTextureStateKillStateBlock>(binaryReader, pointerQueue.Dequeue());
            this.MiscState = base.ReadBlockArrayData<ShaderTextureStateMiscStateBlock>(binaryReader, pointerQueue.Dequeue());
            this.Constants = base.ReadBlockArrayData<ShaderTextureStateConstantBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.DeferReferences(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.AddressState);
            queueableBinaryWriter.Defer(this.FilterState);
            queueableBinaryWriter.Defer(this.KillState);
            queueableBinaryWriter.Defer(this.MiscState);
            queueableBinaryWriter.Defer(this.Constants);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.SourceParameter);
            queueableBinaryWriter.Write(((short)(this.SourceExtern)));
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.fieldskip);
            queueableBinaryWriter.Write(((short)(this.Mode)));
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(((short)(this.DotMapping)));
            queueableBinaryWriter.Write(this.InputStage);
            queueableBinaryWriter.Write(this.fieldpad1);
            queueableBinaryWriter.WritePointer(this.AddressState);
            queueableBinaryWriter.WritePointer(this.FilterState);
            queueableBinaryWriter.WritePointer(this.KillState);
            queueableBinaryWriter.WritePointer(this.MiscState);
            queueableBinaryWriter.WritePointer(this.Constants);
        }
        public enum SourceExternEnum : short
        {
            None = 0,
            GLOBALVectorNormalization = 1,
            UNUSED = 2,
            GLOBALTargetTexaccum = 3,
            UNUSED0 = 4,
            GLOBALTargetFrameBuffer = 5,
            GLOBATargetZ = 6,
            UNUSED1 = 7,
            GLOBALTargetShadow = 8,
            LIGHTFalloff = 9,
            LIGHTGel = 10,
            LIGHTMAP = 11,
            UNUSED2 = 12,
            GLOBALShadowBuffer = 13,
            GLOBALGradientSeparate = 14,
            GLOBALGradientProduct = 15,
            HUDBitmap = 16,
            GLOBALActiveCamo = 17,
            GLOBALTextureCamera = 18,
            GLOBALWaterReflection = 19,
            GLOBALWaterRefraction = 20,
            GLOBALAux1 = 21,
            GLOBALAux2 = 22,
            GLOBALParticleDistortion = 23,
            GLOBALConvolution1 = 24,
            GLOBALConvolution2 = 25,
            SHADERActiveCamoBump = 26,
            FIRSTPERSONScope = 27,
        }
        public enum ModeEnum : short
        {
            _2D = 0,
            _3D = 1,
            CubeMap = 2,
            Passthrough = 3,
            Texkill = 4,
            _2DDependentAR = 5,
            _2DDependentGB = 6,
            _2DBumpenv = 7,
            _2DBumpenvLuminance = 8,
            _3DBRDF = 9,
            DotProduct = 10,
            DotProduct2D = 11,
            DotProduct3D = 12,
            DotProductCubeMap = 13,
            DotProductZW = 14,
            DotReflectDiffuse = 15,
            DotReflectSpecular = 16,
            DotReflectSpecularConst = 17,
            None = 18,
        }
        public enum DotMappingEnum : short
        {
            _0To1 = 0,
            SignedD3D = 1,
            SignedGL = 2,
            SignedNV = 3,
            HILO0To1 = 4,
            HILOSignedHemisphereD3D = 5,
            HILOSignedHemisphereGL = 6,
            HILOSignedHemisphereNV = 7,
        }
    }
}
