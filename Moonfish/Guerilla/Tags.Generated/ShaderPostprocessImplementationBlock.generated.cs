//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("shader_postprocess_implementation_block")]
    public partial class ShaderPostprocessImplementationBlock : GuerillaBlock, IWriteDeferrable
    {
        public ShaderGpuStateReferenceStructBlock GPUConstantState = new ShaderGpuStateReferenceStructBlock();
        public ShaderGpuStateReferenceStructBlock GPUVolatileState = new ShaderGpuStateReferenceStructBlock();
        public TagBlockIndexStructBlock BitmapParameters = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock BitmapTransforms = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock ValueParameters = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock ColorParameters = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock BitmapTransformOverlays = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock ValueOverlays = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock ColorOverlays = new TagBlockIndexStructBlock();
        public TagBlockIndexStructBlock VertexShaderConstants = new TagBlockIndexStructBlock();
        public override int SerializedSize
        {
            get
            {
                return 44;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.GPUConstantState.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.GPUVolatileState.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.BitmapParameters.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.BitmapTransforms.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.ValueParameters.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.ColorParameters.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.BitmapTransformOverlays.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.ValueOverlays.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.ColorOverlays.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.VertexShaderConstants.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.GPUConstantState.ReadInstances(binaryReader, pointerQueue);
            this.GPUVolatileState.ReadInstances(binaryReader, pointerQueue);
            this.BitmapParameters.ReadInstances(binaryReader, pointerQueue);
            this.BitmapTransforms.ReadInstances(binaryReader, pointerQueue);
            this.ValueParameters.ReadInstances(binaryReader, pointerQueue);
            this.ColorParameters.ReadInstances(binaryReader, pointerQueue);
            this.BitmapTransformOverlays.ReadInstances(binaryReader, pointerQueue);
            this.ValueOverlays.ReadInstances(binaryReader, pointerQueue);
            this.ColorOverlays.ReadInstances(binaryReader, pointerQueue);
            this.VertexShaderConstants.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.DeferReferences(queueableBinaryWriter);
            this.GPUConstantState.DeferReferences(queueableBinaryWriter);
            this.GPUVolatileState.DeferReferences(queueableBinaryWriter);
            this.BitmapParameters.DeferReferences(queueableBinaryWriter);
            this.BitmapTransforms.DeferReferences(queueableBinaryWriter);
            this.ValueParameters.DeferReferences(queueableBinaryWriter);
            this.ColorParameters.DeferReferences(queueableBinaryWriter);
            this.BitmapTransformOverlays.DeferReferences(queueableBinaryWriter);
            this.ValueOverlays.DeferReferences(queueableBinaryWriter);
            this.ColorOverlays.DeferReferences(queueableBinaryWriter);
            this.VertexShaderConstants.DeferReferences(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            this.GPUConstantState.Write(queueableBinaryWriter);
            this.GPUVolatileState.Write(queueableBinaryWriter);
            this.BitmapParameters.Write(queueableBinaryWriter);
            this.BitmapTransforms.Write(queueableBinaryWriter);
            this.ValueParameters.Write(queueableBinaryWriter);
            this.ColorParameters.Write(queueableBinaryWriter);
            this.BitmapTransformOverlays.Write(queueableBinaryWriter);
            this.ValueOverlays.Write(queueableBinaryWriter);
            this.ColorOverlays.Write(queueableBinaryWriter);
            this.VertexShaderConstants.Write(queueableBinaryWriter);
        }
    }
}
