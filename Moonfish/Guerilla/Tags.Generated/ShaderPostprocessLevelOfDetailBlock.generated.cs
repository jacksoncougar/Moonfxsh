//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("shader_postprocess_level_of_detail_block")]
    public partial class ShaderPostprocessLevelOfDetailBlock : GuerillaBlock, IWriteDeferrable
    {
        public float ProjectedHeightPercentage;
        public int AvailableLayers;
        public ShaderPostprocessLayerBlock[] Layers = new ShaderPostprocessLayerBlock[0];
        public ShaderPostprocessPassBlock[] Passes = new ShaderPostprocessPassBlock[0];
        public ShaderPostprocessImplementationBlock[] Implementations = new ShaderPostprocessImplementationBlock[0];
        public ShaderPostprocessBitmapBlock[] Bitmaps = new ShaderPostprocessBitmapBlock[0];
        public ShaderPostprocessBitmapTransformBlock[] BitmapTransforms = new ShaderPostprocessBitmapTransformBlock[0];
        public ShaderPostprocessValueBlock[] Values = new ShaderPostprocessValueBlock[0];
        public ShaderPostprocessColorBlock[] Colors = new ShaderPostprocessColorBlock[0];
        public ShaderPostprocessBitmapTransformOverlayBlock[] BitmapTransformOverlays = new ShaderPostprocessBitmapTransformOverlayBlock[0];
        public ShaderPostprocessValueOverlayBlock[] ValueOverlays = new ShaderPostprocessValueOverlayBlock[0];
        public ShaderPostprocessColorOverlayBlock[] ColorOverlays = new ShaderPostprocessColorOverlayBlock[0];
        public ShaderPostprocessVertexShaderConstantBlock[] VertexShaderConstants = new ShaderPostprocessVertexShaderConstantBlock[0];
        public ShaderGpuStateStructBlock GPUState = new ShaderGpuStateStructBlock();
        public override int SerializedSize
        {
            get
            {
                return 152;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.ProjectedHeightPercentage = binaryReader.ReadSingle();
            this.AvailableLayers = binaryReader.ReadInt32();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(2));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(10));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(44));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(10));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(6));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(5));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(13));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(23));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(21));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(21));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(18));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.GPUState.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Layers = base.ReadBlockArrayData<ShaderPostprocessLayerBlock>(binaryReader, pointerQueue.Dequeue());
            this.Passes = base.ReadBlockArrayData<ShaderPostprocessPassBlock>(binaryReader, pointerQueue.Dequeue());
            this.Implementations = base.ReadBlockArrayData<ShaderPostprocessImplementationBlock>(binaryReader, pointerQueue.Dequeue());
            this.Bitmaps = base.ReadBlockArrayData<ShaderPostprocessBitmapBlock>(binaryReader, pointerQueue.Dequeue());
            this.BitmapTransforms = base.ReadBlockArrayData<ShaderPostprocessBitmapTransformBlock>(binaryReader, pointerQueue.Dequeue());
            this.Values = base.ReadBlockArrayData<ShaderPostprocessValueBlock>(binaryReader, pointerQueue.Dequeue());
            this.Colors = base.ReadBlockArrayData<ShaderPostprocessColorBlock>(binaryReader, pointerQueue.Dequeue());
            this.BitmapTransformOverlays = base.ReadBlockArrayData<ShaderPostprocessBitmapTransformOverlayBlock>(binaryReader, pointerQueue.Dequeue());
            this.ValueOverlays = base.ReadBlockArrayData<ShaderPostprocessValueOverlayBlock>(binaryReader, pointerQueue.Dequeue());
            this.ColorOverlays = base.ReadBlockArrayData<ShaderPostprocessColorOverlayBlock>(binaryReader, pointerQueue.Dequeue());
            this.VertexShaderConstants = base.ReadBlockArrayData<ShaderPostprocessVertexShaderConstantBlock>(binaryReader, pointerQueue.Dequeue());
            this.GPUState.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.DeferReferences(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.Layers);
            queueableBinaryWriter.Defer(this.Passes);
            queueableBinaryWriter.Defer(this.Implementations);
            queueableBinaryWriter.Defer(this.Bitmaps);
            queueableBinaryWriter.Defer(this.BitmapTransforms);
            queueableBinaryWriter.Defer(this.Values);
            queueableBinaryWriter.Defer(this.Colors);
            queueableBinaryWriter.Defer(this.BitmapTransformOverlays);
            queueableBinaryWriter.Defer(this.ValueOverlays);
            queueableBinaryWriter.Defer(this.ColorOverlays);
            queueableBinaryWriter.Defer(this.VertexShaderConstants);
            this.GPUState.DeferReferences(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.ProjectedHeightPercentage);
            queueableBinaryWriter.Write(this.AvailableLayers);
            queueableBinaryWriter.WritePointer(this.Layers);
            queueableBinaryWriter.WritePointer(this.Passes);
            queueableBinaryWriter.WritePointer(this.Implementations);
            queueableBinaryWriter.WritePointer(this.Bitmaps);
            queueableBinaryWriter.WritePointer(this.BitmapTransforms);
            queueableBinaryWriter.WritePointer(this.Values);
            queueableBinaryWriter.WritePointer(this.Colors);
            queueableBinaryWriter.WritePointer(this.BitmapTransformOverlays);
            queueableBinaryWriter.WritePointer(this.ValueOverlays);
            queueableBinaryWriter.WritePointer(this.ColorOverlays);
            queueableBinaryWriter.WritePointer(this.VertexShaderConstants);
            this.GPUState.Write(queueableBinaryWriter);
        }
    }
}
