//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagBlockOriginalNameAttribute("shader_postprocess_pixel_shader")]
    public partial class ShaderPostprocessPixelShader : GuerillaBlock, IWriteQueueable
    {
        public int PixelShaderHandle;
        public int PixelShaderHandle0;
        public int PixelShaderHandle1;
        public ShaderPostprocessPixelShaderConstantDefaults[] ConstantRegisterDefaults = new ShaderPostprocessPixelShaderConstantDefaults[0];
        public byte[] CompiledShader;
        public byte[] CompiledShader0;
        public byte[] CompiledShader1;
        public override int SerializedSize
        {
            get
            {
                return 44;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.PixelShaderHandle = binaryReader.ReadInt32();
            this.PixelShaderHandle0 = binaryReader.ReadInt32();
            this.PixelShaderHandle1 = binaryReader.ReadInt32();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.ConstantRegisterDefaults = base.ReadBlockArrayData<ShaderPostprocessPixelShaderConstantDefaults>(binaryReader, pointerQueue.Dequeue());
            this.CompiledShader = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
            this.CompiledShader0 = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
            this.CompiledShader1 = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            queueableBinaryWriter.QueueWrite(this.ConstantRegisterDefaults);
            queueableBinaryWriter.QueueWrite(this.CompiledShader);
            queueableBinaryWriter.QueueWrite(this.CompiledShader0);
            queueableBinaryWriter.QueueWrite(this.CompiledShader1);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.PixelShaderHandle);
            queueableBinaryWriter.Write(this.PixelShaderHandle0);
            queueableBinaryWriter.Write(this.PixelShaderHandle1);
            queueableBinaryWriter.WritePointer(this.ConstantRegisterDefaults);
            queueableBinaryWriter.WritePointer(this.CompiledShader);
            queueableBinaryWriter.WritePointer(this.CompiledShader0);
            queueableBinaryWriter.WritePointer(this.CompiledShader1);
        }
    }
}
