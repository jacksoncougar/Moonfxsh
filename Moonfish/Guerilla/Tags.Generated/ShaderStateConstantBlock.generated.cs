//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("shader_state_constant_block")]
    public partial class ShaderStateConstantBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.StringIdent SourceParameter;
        private byte[] fieldpad = new byte[2];
        public ConstantEnum Constant;
        public override int SerializedSize
        {
            get
            {
                return 8;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.SourceParameter = binaryReader.ReadStringIdent();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.Constant = ((ConstantEnum)(binaryReader.ReadInt16()));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.SourceParameter);
            writer.Write(this.fieldpad);
            writer.Write(((short)(this.Constant)));
        }
        public enum ConstantEnum : short
        {
            ConstantBlendColor = 0,
            ConstantBlendAlphavalue = 1,
            AlphatestRefvalue = 2,
            DepthBiasSlopeScalevalue = 3,
            DepthBiasvalue = 4,
            LineWidthvalue = 5,
            FogColor = 6,
        }
    }
}
