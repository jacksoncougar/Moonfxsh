//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("stem")]
    [TagBlockOriginalNameAttribute("shader_template_block")]
    public partial class ShaderTemplateBlock : GuerillaBlock, IWriteDeferrable
    {
        private byte[] Documentation;
        public Moonfish.Tags.StringIdent DefaultMaterialName;
        /// <summary>
        /// Force Active Camo: Should be used with cautuion, as this causes a backbuffer copy when this shader is rendered.
        /// </summary>
        private byte[] fieldpad = new byte[2];
        public Flags ShaderTemplateFlags;
        public ShaderTemplatePropertyBlock[] Properties = new ShaderTemplatePropertyBlock[0];
        public ShaderTemplateCategoryBlock[] Categories = new ShaderTemplateCategoryBlock[0];
        /// <summary>
        /// Not used anymore.
        /// </summary>
        [Moonfish.Tags.TagReferenceAttribute("slit")]
        public Moonfish.Tags.TagReference LightResponse;
        public ShaderTemplateLevelOfDetailBlock[] LODs = new ShaderTemplateLevelOfDetailBlock[0];
        public ShaderTemplateRuntimeExternalLightResponseIndexBlock[] EMPTYSTRING = new ShaderTemplateRuntimeExternalLightResponseIndexBlock[0];
        public ShaderTemplateRuntimeExternalLightResponseIndexBlock[] EMPTYSTRING0 = new ShaderTemplateRuntimeExternalLightResponseIndexBlock[0];
        /// <summary>
        /// Really cool stuff.
        /// </summary>
        [Moonfish.Tags.TagReferenceAttribute("shad")]
        public Moonfish.Tags.TagReference Aux1Shader;
        public Aux1LayerEnum Aux1Layer;
        private byte[] fieldpad0 = new byte[2];
        [Moonfish.Tags.TagReferenceAttribute("shad")]
        public Moonfish.Tags.TagReference Aux2Shader;
        public Aux2LayerEnum Aux2Layer;
        private byte[] fieldpad1 = new byte[2];
        public ShaderTemplatePostprocessDefinitionNewBlock[] PostprocessDefinition = new ShaderTemplatePostprocessDefinitionNewBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 96;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            this.DefaultMaterialName = binaryReader.ReadStringIdent();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.ShaderTemplateFlags = ((Flags)(binaryReader.ReadInt16()));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            this.LightResponse = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            this.Aux1Shader = binaryReader.ReadTagReference();
            this.Aux1Layer = ((Aux1LayerEnum)(binaryReader.ReadInt16()));
            this.fieldpad0 = binaryReader.ReadBytes(2);
            this.Aux2Shader = binaryReader.ReadTagReference();
            this.Aux2Layer = ((Aux2LayerEnum)(binaryReader.ReadInt16()));
            this.fieldpad1 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Documentation = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
            this.Properties = base.ReadBlockArrayData<ShaderTemplatePropertyBlock>(binaryReader, pointerQueue.Dequeue());
            this.Categories = base.ReadBlockArrayData<ShaderTemplateCategoryBlock>(binaryReader, pointerQueue.Dequeue());
            this.LODs = base.ReadBlockArrayData<ShaderTemplateLevelOfDetailBlock>(binaryReader, pointerQueue.Dequeue());
            this.EMPTYSTRING = base.ReadBlockArrayData<ShaderTemplateRuntimeExternalLightResponseIndexBlock>(binaryReader, pointerQueue.Dequeue());
            this.EMPTYSTRING0 = base.ReadBlockArrayData<ShaderTemplateRuntimeExternalLightResponseIndexBlock>(binaryReader, pointerQueue.Dequeue());
            this.PostprocessDefinition = base.ReadBlockArrayData<ShaderTemplatePostprocessDefinitionNewBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Documentation);
            writer.Defer(this.Properties);
            writer.Defer(this.Categories);
            writer.Defer(this.LODs);
            writer.Defer(this.EMPTYSTRING);
            writer.Defer(this.EMPTYSTRING0);
            writer.Defer(this.PostprocessDefinition);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.WritePointer(this.Documentation);
            writer.Write(this.DefaultMaterialName);
            writer.Write(this.fieldpad);
            writer.Write(((short)(this.ShaderTemplateFlags)));
            writer.WritePointer(this.Properties);
            writer.WritePointer(this.Categories);
            writer.Write(this.LightResponse);
            writer.WritePointer(this.LODs);
            writer.WritePointer(this.EMPTYSTRING);
            writer.WritePointer(this.EMPTYSTRING0);
            writer.Write(this.Aux1Shader);
            writer.Write(((short)(this.Aux1Layer)));
            writer.Write(this.fieldpad0);
            writer.Write(this.Aux2Shader);
            writer.Write(((short)(this.Aux2Layer)));
            writer.Write(this.fieldpad1);
            writer.WritePointer(this.PostprocessDefinition);
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            ForceActiveCamo = 1,
            Water = 2,
            Foliage = 4,
            HideStandardParameters = 8,
        }
        public enum Aux1LayerEnum : short
        {
            Texaccum = 0,
            EnvironmentMap = 1,
            SelfIllumination = 2,
            Overlay = 3,
            Transparent = 4,
            LightmapIndirect = 5,
            Diffuse = 6,
            Specular = 7,
            ShadowGenerate = 8,
            ShadowApply = 9,
            Boom = 10,
            Fog = 11,
            ShPrt = 12,
            ActiveCamo = 13,
            WaterEdgeBlend = 14,
            Decal = 15,
            ActiveCamoStencilModulate = 16,
            Hologram = 17,
            LightAlbedo = 18,
        }
        public enum Aux2LayerEnum : short
        {
            Texaccum = 0,
            EnvironmentMap = 1,
            SelfIllumination = 2,
            Overlay = 3,
            Transparent = 4,
            LightmapIndirect = 5,
            Diffuse = 6,
            Specular = 7,
            ShadowGenerate = 8,
            ShadowApply = 9,
            Boom = 10,
            Fog = 11,
            ShPrt = 12,
            ActiveCamo = 13,
            WaterEdgeBlend = 14,
            Decal = 15,
            ActiveCamoStencilModulate = 16,
            Hologram = 17,
            LightAlbedo = 18,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Stem = ((TagClass)("stem"));
    }
}
