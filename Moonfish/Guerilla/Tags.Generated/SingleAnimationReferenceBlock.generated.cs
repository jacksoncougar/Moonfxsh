//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class SingleAnimationReferenceBlock : GuerillaBlock, IWriteQueueable
    {
        public Flags SingleAnimationReferenceFlags;
        public int AnimationPeriod;
        public ScreenAnimationKeyframeReferenceBlock[] Keyframes = new ScreenAnimationKeyframeReferenceBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 16;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.SingleAnimationReferenceFlags = ((Flags)(binaryReader.ReadInt32()));
            this.AnimationPeriod = binaryReader.ReadInt32();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Keyframes = base.ReadBlockArrayData<ScreenAnimationKeyframeReferenceBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.Keyframes);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((int)(this.SingleAnimationReferenceFlags)));
            queueableBlamBinaryWriter.Write(this.AnimationPeriod);
            queueableBlamBinaryWriter.WritePointer(this.Keyframes);
        }
        /// <summary>
        /// Animations ordered as follows:
        ///0) list item focused
        ///1) list item unfocused
        ///2) list item ambient
        ///3) list item hovered
        ///4) list item unhovered
        ///5) list item clicked (hovered->focused)
        ///6) list item unfocused back to hovered state (focused->hovered)
        /// </summary>
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            Unused = 1,
        }
    }
}
