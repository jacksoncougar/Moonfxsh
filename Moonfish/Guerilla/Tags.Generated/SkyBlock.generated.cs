//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("sky ")]
    public partial class SkyBlock : GuerillaBlock, IWriteQueueable
    {
        [Moonfish.Tags.TagReferenceAttribute("mode")]
        public Moonfish.Tags.TagReference RenderModel;
        [Moonfish.Tags.TagReferenceAttribute("jmad")]
        public Moonfish.Tags.TagReference AnimationGraph;
        public Flags SkyFlags;
        public float RenderModelScale;
        public float MovementScale;
        public SkyCubemapBlock[] CubeMap = new SkyCubemapBlock[0];
        /// <summary>
        /// EMPTY STRING
        /// </summary>
        public Moonfish.Tags.ColourR8G8B8 IndoorAmbientColor;
        private byte[] fieldpad = new byte[4];
        public Moonfish.Tags.ColourR8G8B8 OutdoorAmbientColor;
        private byte[] fieldpad0 = new byte[4];
        /// <summary>
        /// EMPTY STRING
        /// </summary>
        public float FogSpreadDistance;
        public SkyAtmosphericFogBlock[] AtmosphericFog = new SkyAtmosphericFogBlock[0];
        public SkyAtmosphericFogBlock[] SecondaryFog = new SkyAtmosphericFogBlock[0];
        public SkyFogBlock[] SkyFog = new SkyFogBlock[0];
        public SkyPatchyFogBlock[] PatchyFog = new SkyPatchyFogBlock[0];
        /// <summary>
        /// EMPTY STRING
        /// </summary>
        public float Amount;
        public float Threshold;
        public float Brightness;
        public float GammaPower;
        public SkyLightBlock[] Lights = new SkyLightBlock[0];
        /// <summary>
        /// EMPTY STRING
        /// </summary>
        public float GlobalSkyRotation;
        public SkyShaderFunctionBlock[] ShaderFunctions = new SkyShaderFunctionBlock[0];
        public SkyAnimationBlock[] Animations = new SkyAnimationBlock[0];
        private byte[] fieldpad1 = new byte[12];
        public Moonfish.Tags.ColourR8G8B8 ClearColor;
        public override int SerializedSize
        {
            get
            {
                return 172;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.RenderModel = binaryReader.ReadTagReference();
            this.AnimationGraph = binaryReader.ReadTagReference();
            this.SkyFlags = ((Flags)(binaryReader.ReadInt32()));
            this.RenderModelScale = binaryReader.ReadSingle();
            this.MovementScale = binaryReader.ReadSingle();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            this.IndoorAmbientColor = binaryReader.ReadColorR8G8B8();
            this.fieldpad = binaryReader.ReadBytes(4);
            this.OutdoorAmbientColor = binaryReader.ReadColorR8G8B8();
            this.fieldpad0 = binaryReader.ReadBytes(4);
            this.FogSpreadDistance = binaryReader.ReadSingle();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(80));
            this.Amount = binaryReader.ReadSingle();
            this.Threshold = binaryReader.ReadSingle();
            this.Brightness = binaryReader.ReadSingle();
            this.GammaPower = binaryReader.ReadSingle();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(52));
            this.GlobalSkyRotation = binaryReader.ReadSingle();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(36));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(36));
            this.fieldpad1 = binaryReader.ReadBytes(12);
            this.ClearColor = binaryReader.ReadColorR8G8B8();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.CubeMap = base.ReadBlockArrayData<SkyCubemapBlock>(binaryReader, pointerQueue.Dequeue());
            this.AtmosphericFog = base.ReadBlockArrayData<SkyAtmosphericFogBlock>(binaryReader, pointerQueue.Dequeue());
            this.SecondaryFog = base.ReadBlockArrayData<SkyAtmosphericFogBlock>(binaryReader, pointerQueue.Dequeue());
            this.SkyFog = base.ReadBlockArrayData<SkyFogBlock>(binaryReader, pointerQueue.Dequeue());
            this.PatchyFog = base.ReadBlockArrayData<SkyPatchyFogBlock>(binaryReader, pointerQueue.Dequeue());
            this.Lights = base.ReadBlockArrayData<SkyLightBlock>(binaryReader, pointerQueue.Dequeue());
            this.ShaderFunctions = base.ReadBlockArrayData<SkyShaderFunctionBlock>(binaryReader, pointerQueue.Dequeue());
            this.Animations = base.ReadBlockArrayData<SkyAnimationBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.CubeMap);
            queueableBlamBinaryWriter.QueueWrite(this.AtmosphericFog);
            queueableBlamBinaryWriter.QueueWrite(this.SecondaryFog);
            queueableBlamBinaryWriter.QueueWrite(this.SkyFog);
            queueableBlamBinaryWriter.QueueWrite(this.PatchyFog);
            queueableBlamBinaryWriter.QueueWrite(this.Lights);
            queueableBlamBinaryWriter.QueueWrite(this.ShaderFunctions);
            queueableBlamBinaryWriter.QueueWrite(this.Animations);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.RenderModel);
            queueableBlamBinaryWriter.Write(this.AnimationGraph);
            queueableBlamBinaryWriter.Write(((int)(this.SkyFlags)));
            queueableBlamBinaryWriter.Write(this.RenderModelScale);
            queueableBlamBinaryWriter.Write(this.MovementScale);
            queueableBlamBinaryWriter.WritePointer(this.CubeMap);
            queueableBlamBinaryWriter.Write(this.IndoorAmbientColor);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.OutdoorAmbientColor);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.FogSpreadDistance);
            queueableBlamBinaryWriter.WritePointer(this.AtmosphericFog);
            queueableBlamBinaryWriter.WritePointer(this.SecondaryFog);
            queueableBlamBinaryWriter.WritePointer(this.SkyFog);
            queueableBlamBinaryWriter.WritePointer(this.PatchyFog);
            queueableBlamBinaryWriter.Write(this.Amount);
            queueableBlamBinaryWriter.Write(this.Threshold);
            queueableBlamBinaryWriter.Write(this.Brightness);
            queueableBlamBinaryWriter.Write(this.GammaPower);
            queueableBlamBinaryWriter.WritePointer(this.Lights);
            queueableBlamBinaryWriter.Write(this.GlobalSkyRotation);
            queueableBlamBinaryWriter.WritePointer(this.ShaderFunctions);
            queueableBlamBinaryWriter.WritePointer(this.Animations);
            queueableBlamBinaryWriter.Write(this.fieldpad1);
            queueableBlamBinaryWriter.Write(this.ClearColor);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            FixedInWorldSpace = 1,
            Depreciated = 2,
            SkyCastsLightFromBelow = 4,
            DisableSkyInLightmaps = 8,
            FogOnlyAffectsContainingClusters = 16,
            UseClearColor = 32,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Sky = ((TagClass)("sky "));
    }
}
