//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class SkyLightBlock : GuerillaBlock, IWriteQueueable
    {
        public OpenTK.Vector3 DirectionVector;
        public OpenTK.Vector2 Direction;
        [Moonfish.Tags.TagReferenceAttribute("lens")]
        public Moonfish.Tags.TagReference LensFlare;
        public SkyLightFogBlock[] Fog = new SkyLightFogBlock[0];
        public SkyLightFogBlock[] FogOpposite = new SkyLightFogBlock[0];
        public SkyRadiosityLightBlock[] Radiosity = new SkyRadiosityLightBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 52;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.DirectionVector = binaryReader.ReadVector3();
            this.Direction = binaryReader.ReadVector2();
            this.LensFlare = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(44));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(44));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(40));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Fog = base.ReadBlockArrayData<SkyLightFogBlock>(binaryReader, pointerQueue.Dequeue());
            this.FogOpposite = base.ReadBlockArrayData<SkyLightFogBlock>(binaryReader, pointerQueue.Dequeue());
            this.Radiosity = base.ReadBlockArrayData<SkyRadiosityLightBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            queueableBinaryWriter.QueueWrite(this.Fog);
            queueableBinaryWriter.QueueWrite(this.FogOpposite);
            queueableBinaryWriter.QueueWrite(this.Radiosity);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.DirectionVector);
            queueableBinaryWriter.Write(this.Direction);
            queueableBinaryWriter.Write(this.LensFlare);
            queueableBinaryWriter.WritePointer(this.Fog);
            queueableBinaryWriter.WritePointer(this.FogOpposite);
            queueableBinaryWriter.WritePointer(this.Radiosity);
        }
    }
}
