//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("ugh!")]
    public partial class SoundCacheFileGestaltBlock : GuerillaBlock, IWriteQueueable
    {
        public SoundGestaltPlaybackBlock[] Playbacks = new SoundGestaltPlaybackBlock[0];
        public SoundGestaltScaleBlock[] Scales = new SoundGestaltScaleBlock[0];
        public SoundGestaltImportNamesBlock[] ImportNames = new SoundGestaltImportNamesBlock[0];
        public SoundGestaltPitchRangeParametersBlock[] PitchRangeParameters = new SoundGestaltPitchRangeParametersBlock[0];
        public SoundGestaltPitchRangesBlock[] PitchRanges = new SoundGestaltPitchRangesBlock[0];
        public SoundGestaltPermutationsBlock[] Permutations = new SoundGestaltPermutationsBlock[0];
        public SoundGestaltCustomPlaybackBlock[] CustomPlaybacks = new SoundGestaltCustomPlaybackBlock[0];
        public SoundGestaltRuntimePermutationBitVectorBlock[] RuntimePermutationFlags = new SoundGestaltRuntimePermutationBitVectorBlock[0];
        public SoundPermutationChunkBlock[] Chunks = new SoundPermutationChunkBlock[0];
        public SoundGestaltPromotionsBlock[] Promotions = new SoundGestaltPromotionsBlock[0];
        public SoundGestaltExtraInfoBlock[] ExtraInfos = new SoundGestaltExtraInfoBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 88;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(10));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(52));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(28));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(44));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Playbacks = base.ReadBlockArrayData<SoundGestaltPlaybackBlock>(binaryReader, pointerQueue.Dequeue());
            this.Scales = base.ReadBlockArrayData<SoundGestaltScaleBlock>(binaryReader, pointerQueue.Dequeue());
            this.ImportNames = base.ReadBlockArrayData<SoundGestaltImportNamesBlock>(binaryReader, pointerQueue.Dequeue());
            this.PitchRangeParameters = base.ReadBlockArrayData<SoundGestaltPitchRangeParametersBlock>(binaryReader, pointerQueue.Dequeue());
            this.PitchRanges = base.ReadBlockArrayData<SoundGestaltPitchRangesBlock>(binaryReader, pointerQueue.Dequeue());
            this.Permutations = base.ReadBlockArrayData<SoundGestaltPermutationsBlock>(binaryReader, pointerQueue.Dequeue());
            this.CustomPlaybacks = base.ReadBlockArrayData<SoundGestaltCustomPlaybackBlock>(binaryReader, pointerQueue.Dequeue());
            this.RuntimePermutationFlags = base.ReadBlockArrayData<SoundGestaltRuntimePermutationBitVectorBlock>(binaryReader, pointerQueue.Dequeue());
            this.Chunks = base.ReadBlockArrayData<SoundPermutationChunkBlock>(binaryReader, pointerQueue.Dequeue());
            this.Promotions = base.ReadBlockArrayData<SoundGestaltPromotionsBlock>(binaryReader, pointerQueue.Dequeue());
            this.ExtraInfos = base.ReadBlockArrayData<SoundGestaltExtraInfoBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.Playbacks);
            queueableBlamBinaryWriter.QueueWrite(this.Scales);
            queueableBlamBinaryWriter.QueueWrite(this.ImportNames);
            queueableBlamBinaryWriter.QueueWrite(this.PitchRangeParameters);
            queueableBlamBinaryWriter.QueueWrite(this.PitchRanges);
            queueableBlamBinaryWriter.QueueWrite(this.Permutations);
            queueableBlamBinaryWriter.QueueWrite(this.CustomPlaybacks);
            queueableBlamBinaryWriter.QueueWrite(this.RuntimePermutationFlags);
            queueableBlamBinaryWriter.QueueWrite(this.Chunks);
            queueableBlamBinaryWriter.QueueWrite(this.Promotions);
            queueableBlamBinaryWriter.QueueWrite(this.ExtraInfos);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.WritePointer(this.Playbacks);
            queueableBlamBinaryWriter.WritePointer(this.Scales);
            queueableBlamBinaryWriter.WritePointer(this.ImportNames);
            queueableBlamBinaryWriter.WritePointer(this.PitchRangeParameters);
            queueableBlamBinaryWriter.WritePointer(this.PitchRanges);
            queueableBlamBinaryWriter.WritePointer(this.Permutations);
            queueableBlamBinaryWriter.WritePointer(this.CustomPlaybacks);
            queueableBlamBinaryWriter.WritePointer(this.RuntimePermutationFlags);
            queueableBlamBinaryWriter.WritePointer(this.Chunks);
            queueableBlamBinaryWriter.WritePointer(this.Promotions);
            queueableBlamBinaryWriter.WritePointer(this.ExtraInfos);
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Ugh = ((TagClass)("ugh!"));
    }
}
