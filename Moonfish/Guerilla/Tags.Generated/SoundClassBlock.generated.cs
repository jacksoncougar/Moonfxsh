//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("sound_class_block")]
    public partial class SoundClassBlock : GuerillaBlock, IWriteDeferrable
    {
        public short MaxSoundsPerTag116;
        public short MaxSoundsPerObject116;
        public int PreemptionTime;
        public InternalFlags SoundClassInternalFlags;
        public Flags SoundClassFlags;
        public short Priority;
        public CacheMissModeEnum CacheMissMode;
        public float ReverbGain;
        public float OverrideSpeakerGain;
        public Moonfish.Model.Range DistanceBounds;
        public Moonfish.Model.Range GainBounds;
        public float CutsceneDucking;
        public float CutsceneDuckingFadeInTime;
        public float CutsceneDuckingSustainTime;
        public float CutsceneDuckingFadeOutTime;
        public float ScriptedDialogDucking;
        public float ScriptedDialogDuckingFadeInTime;
        public float ScriptedDialogDuckingSustainTime;
        public float ScriptedDialogDuckingFadeOutTime;
        public float DopplerFactor;
        public StereoPlaybackTypeEnum StereoPlaybackType;
        private byte[] fieldpad = new byte[3];
        public float TransmissionMultiplier;
        public float ObstructionMaxBend;
        public float OcclusionMaxBend;
        public override int SerializedSize
        {
            get
            {
                return 92;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.MaxSoundsPerTag116 = binaryReader.ReadInt16();
            this.MaxSoundsPerObject116 = binaryReader.ReadInt16();
            this.PreemptionTime = binaryReader.ReadInt32();
            this.SoundClassInternalFlags = ((InternalFlags)(binaryReader.ReadInt16()));
            this.SoundClassFlags = ((Flags)(binaryReader.ReadInt16()));
            this.Priority = binaryReader.ReadInt16();
            this.CacheMissMode = ((CacheMissModeEnum)(binaryReader.ReadInt16()));
            this.ReverbGain = binaryReader.ReadSingle();
            this.OverrideSpeakerGain = binaryReader.ReadSingle();
            this.DistanceBounds = binaryReader.ReadRange();
            this.GainBounds = binaryReader.ReadRange();
            this.CutsceneDucking = binaryReader.ReadSingle();
            this.CutsceneDuckingFadeInTime = binaryReader.ReadSingle();
            this.CutsceneDuckingSustainTime = binaryReader.ReadSingle();
            this.CutsceneDuckingFadeOutTime = binaryReader.ReadSingle();
            this.ScriptedDialogDucking = binaryReader.ReadSingle();
            this.ScriptedDialogDuckingFadeInTime = binaryReader.ReadSingle();
            this.ScriptedDialogDuckingSustainTime = binaryReader.ReadSingle();
            this.ScriptedDialogDuckingFadeOutTime = binaryReader.ReadSingle();
            this.DopplerFactor = binaryReader.ReadSingle();
            this.StereoPlaybackType = ((StereoPlaybackTypeEnum)(binaryReader.ReadByte()));
            this.fieldpad = binaryReader.ReadBytes(3);
            this.TransmissionMultiplier = binaryReader.ReadSingle();
            this.ObstructionMaxBend = binaryReader.ReadSingle();
            this.OcclusionMaxBend = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.MaxSoundsPerTag116);
            writer.Write(this.MaxSoundsPerObject116);
            writer.Write(this.PreemptionTime);
            writer.Write(((short)(this.SoundClassInternalFlags)));
            writer.Write(((short)(this.SoundClassFlags)));
            writer.Write(this.Priority);
            writer.Write(((short)(this.CacheMissMode)));
            writer.Write(this.ReverbGain);
            writer.Write(this.OverrideSpeakerGain);
            writer.Write(this.DistanceBounds);
            writer.Write(this.GainBounds);
            writer.Write(this.CutsceneDucking);
            writer.Write(this.CutsceneDuckingFadeInTime);
            writer.Write(this.CutsceneDuckingSustainTime);
            writer.Write(this.CutsceneDuckingFadeOutTime);
            writer.Write(this.ScriptedDialogDucking);
            writer.Write(this.ScriptedDialogDuckingFadeInTime);
            writer.Write(this.ScriptedDialogDuckingSustainTime);
            writer.Write(this.ScriptedDialogDuckingFadeOutTime);
            writer.Write(this.DopplerFactor);
            writer.Write(((byte)(this.StereoPlaybackType)));
            writer.Write(this.fieldpad);
            writer.Write(this.TransmissionMultiplier);
            writer.Write(this.ObstructionMaxBend);
            writer.Write(this.OcclusionMaxBend);
        }
        [System.FlagsAttribute()]
        public enum InternalFlags : short
        {
            None = 0,
            Valid = 1,
            IsSpeech = 2,
            Scripted = 4,
            StopsWithObject = 8,
            Unused = 16,
            ValidDopplerFactor = 32,
            ValidObstructionFactor = 64,
            Multilingual = 128,
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            PlaysDuringPause = 1,
            DryStereoMix = 2,
            NoObjectObstruction = 4,
            UseCenterSpeakerUnspatialized = 8,
            SendmonoToLfe = 16,
            Deterministic = 32,
            UseHugeTransmission = 64,
            AlwaysUseSpeakers = 128,
            DontStripFromMainMenu = 256,
            IgnoreStereoHeadroom = 512,
            LoopFadeOutIsLinear = 1024,
            StopWhenObjectDies = 2048,
            AllowCacheFileEditing = 4096,
        }
        public enum CacheMissModeEnum : short
        {
            Discard = 0,
            Postpone = 1,
        }
        public enum StereoPlaybackTypeEnum : byte
        {
            FirstPerson = 0,
            Ambient = 1,
        }
    }
}
