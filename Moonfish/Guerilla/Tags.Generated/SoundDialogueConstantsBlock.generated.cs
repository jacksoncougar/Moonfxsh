//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("spk!")]
    [TagBlockOriginalNameAttribute("sound_dialogue_constants_block")]
    public partial class SoundDialogueConstantsBlock : GuerillaBlock, IWriteDeferrable
    {
        /// <summary>
        /// these values correspond to the named play fractions in the dialogue editor (It's really skip fractions, but who cares?)
        /// </summary>
        public float AlmostNever;
        public float Rarely;
        public float Somewhat;
        public float Often;
        private byte[] fieldpad = new byte[24];
        public override int SerializedSize
        {
            get
            {
                return 40;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.AlmostNever = binaryReader.ReadSingle();
            this.Rarely = binaryReader.ReadSingle();
            this.Somewhat = binaryReader.ReadSingle();
            this.Often = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(24);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.DeferReferences(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.AlmostNever);
            queueableBinaryWriter.Write(this.Rarely);
            queueableBinaryWriter.Write(this.Somewhat);
            queueableBinaryWriter.Write(this.Often);
            queueableBinaryWriter.Write(this.fieldpad);
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Spk = ((TagClass)("spk!"));
    }
}
