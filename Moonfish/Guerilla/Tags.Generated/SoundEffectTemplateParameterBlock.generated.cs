//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("sound_effect_template_parameter_block")]
    public partial class SoundEffectTemplateParameterBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.StringIdent Name;
        public TypeEnum Type;
        public Flags SoundEffectTemplateParameterFlags;
        public int HardwareOffset;
        public int DefaultEnumIntegerValue;
        public float DefaultScalarValue;
        public MappingFunctionBlock DefaultFunction = new MappingFunctionBlock();
        public float MinimumScalarValue;
        public float MaximumScalarValue;
        public override int SerializedSize
        {
            get
            {
                return 36;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadStringIdent();
            this.Type = ((TypeEnum)(binaryReader.ReadInt16()));
            this.SoundEffectTemplateParameterFlags = ((Flags)(binaryReader.ReadInt16()));
            this.HardwareOffset = binaryReader.ReadInt32();
            this.DefaultEnumIntegerValue = binaryReader.ReadInt32();
            this.DefaultScalarValue = binaryReader.ReadSingle();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.DefaultFunction.ReadFields(binaryReader)));
            this.MinimumScalarValue = binaryReader.ReadSingle();
            this.MaximumScalarValue = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.DefaultFunction.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            this.DefaultFunction.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Name);
            writer.Write(((short)(this.Type)));
            writer.Write(((short)(this.SoundEffectTemplateParameterFlags)));
            writer.Write(this.HardwareOffset);
            writer.Write(this.DefaultEnumIntegerValue);
            writer.Write(this.DefaultScalarValue);
            this.DefaultFunction.Write(writer);
            writer.Write(this.MinimumScalarValue);
            writer.Write(this.MaximumScalarValue);
        }
        public enum TypeEnum : short
        {
            Integer = 0,
            Real = 1,
            FilterType = 2,
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            ExposeAsFunction = 1,
        }
    }
}
