//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("snde")]
    public partial class SoundEnvironmentBlock : GuerillaBlock, IWriteQueueable
    {
        private byte[] fieldpad = new byte[4];
        public short Priority;
        private byte[] fieldpad0 = new byte[2];
        public float RoomIntensity;
        public float RoomIntensityHf;
        public float RoomRolloff;
        public float DecayTime;
        public float DecayHfRatio;
        public float ReflectionsIntensity;
        public float ReflectionsDelay;
        public float ReverbIntensity;
        public float ReverbDelay;
        public float Diffusion;
        public float Density;
        public float HfReference;
        private byte[] fieldpad1 = new byte[16];
        public override int SerializedSize
        {
            get
            {
                return 72;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.fieldpad = binaryReader.ReadBytes(4);
            this.Priority = binaryReader.ReadInt16();
            this.fieldpad0 = binaryReader.ReadBytes(2);
            this.RoomIntensity = binaryReader.ReadSingle();
            this.RoomIntensityHf = binaryReader.ReadSingle();
            this.RoomRolloff = binaryReader.ReadSingle();
            this.DecayTime = binaryReader.ReadSingle();
            this.DecayHfRatio = binaryReader.ReadSingle();
            this.ReflectionsIntensity = binaryReader.ReadSingle();
            this.ReflectionsDelay = binaryReader.ReadSingle();
            this.ReverbIntensity = binaryReader.ReadSingle();
            this.ReverbDelay = binaryReader.ReadSingle();
            this.Diffusion = binaryReader.ReadSingle();
            this.Density = binaryReader.ReadSingle();
            this.HfReference = binaryReader.ReadSingle();
            this.fieldpad1 = binaryReader.ReadBytes(16);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.Priority);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.RoomIntensity);
            queueableBlamBinaryWriter.Write(this.RoomIntensityHf);
            queueableBlamBinaryWriter.Write(this.RoomRolloff);
            queueableBlamBinaryWriter.Write(this.DecayTime);
            queueableBlamBinaryWriter.Write(this.DecayHfRatio);
            queueableBlamBinaryWriter.Write(this.ReflectionsIntensity);
            queueableBlamBinaryWriter.Write(this.ReflectionsDelay);
            queueableBlamBinaryWriter.Write(this.ReverbIntensity);
            queueableBlamBinaryWriter.Write(this.ReverbDelay);
            queueableBlamBinaryWriter.Write(this.Diffusion);
            queueableBlamBinaryWriter.Write(this.Density);
            queueableBlamBinaryWriter.Write(this.HfReference);
            queueableBlamBinaryWriter.Write(this.fieldpad1);
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Snde = ((TagClass)("snde"));
    }
}
