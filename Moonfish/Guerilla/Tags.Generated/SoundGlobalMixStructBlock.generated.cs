//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("sound_global_mix_struct_block")]
    public partial class SoundGlobalMixStructBlock : GuerillaBlock, IWriteQueueable
    {
        public float MonoUnspatializedGain;
        public float StereoTo3dGain;
        public float RearSurroundToFrontStereoGain;
        /// <summary>
        /// for sounds that use the center speaker
        /// </summary>
        public float FrontSpeakerGain;
        public float CenterSpeakerGain;
        /// <summary>
        /// for sounds that use the center speaker
        /// </summary>
        public float FrontSpeakerGain0;
        public float CenterSpeakerGain0;
        /// <summary>
        /// for sounds that use the center speaker
        /// </summary>
        public float StereoUnspatializedGain;
        public float SoloPlayerFadeOutDelay;
        public float SoloPlayerFadeOutTime;
        public float SoloPlayerFadeInTime;
        public float GameMusicFadeOutTime;
        public override int SerializedSize
        {
            get
            {
                return 48;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.MonoUnspatializedGain = binaryReader.ReadSingle();
            this.StereoTo3dGain = binaryReader.ReadSingle();
            this.RearSurroundToFrontStereoGain = binaryReader.ReadSingle();
            this.FrontSpeakerGain = binaryReader.ReadSingle();
            this.CenterSpeakerGain = binaryReader.ReadSingle();
            this.FrontSpeakerGain0 = binaryReader.ReadSingle();
            this.CenterSpeakerGain0 = binaryReader.ReadSingle();
            this.StereoUnspatializedGain = binaryReader.ReadSingle();
            this.SoloPlayerFadeOutDelay = binaryReader.ReadSingle();
            this.SoloPlayerFadeOutTime = binaryReader.ReadSingle();
            this.SoloPlayerFadeInTime = binaryReader.ReadSingle();
            this.GameMusicFadeOutTime = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.MonoUnspatializedGain);
            queueableBinaryWriter.Write(this.StereoTo3dGain);
            queueableBinaryWriter.Write(this.RearSurroundToFrontStereoGain);
            queueableBinaryWriter.Write(this.FrontSpeakerGain);
            queueableBinaryWriter.Write(this.CenterSpeakerGain);
            queueableBinaryWriter.Write(this.FrontSpeakerGain0);
            queueableBinaryWriter.Write(this.CenterSpeakerGain0);
            queueableBinaryWriter.Write(this.StereoUnspatializedGain);
            queueableBinaryWriter.Write(this.SoloPlayerFadeOutDelay);
            queueableBinaryWriter.Write(this.SoloPlayerFadeOutTime);
            queueableBinaryWriter.Write(this.SoloPlayerFadeInTime);
            queueableBinaryWriter.Write(this.GameMusicFadeOutTime);
        }
    }
}
