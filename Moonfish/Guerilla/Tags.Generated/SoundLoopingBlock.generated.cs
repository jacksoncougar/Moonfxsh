//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("lsnd")]
    [TagBlockOriginalNameAttribute("sound_looping_block")]
    public partial class SoundLoopingBlock : GuerillaBlock, IWriteQueueable
    {
        public Flags SoundLoopingFlags;
        public float MartysMusicTime;
        public float FieldReal;
        private byte[] fieldpad = new byte[8];
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference TagReference;
        public LoopingSoundTrackBlock[] Tracks = new LoopingSoundTrackBlock[0];
        public LoopingSoundDetailBlock[] DetailSounds = new LoopingSoundDetailBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 44;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.SoundLoopingFlags = ((Flags)(binaryReader.ReadInt32()));
            this.MartysMusicTime = binaryReader.ReadSingle();
            this.FieldReal = binaryReader.ReadSingle();
            this.fieldpad = binaryReader.ReadBytes(8);
            this.TagReference = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(88));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(52));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Tracks = base.ReadBlockArrayData<LoopingSoundTrackBlock>(binaryReader, pointerQueue.Dequeue());
            this.DetailSounds = base.ReadBlockArrayData<LoopingSoundDetailBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.Tracks);
            queueableBinaryWriter.Defer(this.DetailSounds);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((int)(this.SoundLoopingFlags)));
            queueableBinaryWriter.Write(this.MartysMusicTime);
            queueableBinaryWriter.Write(this.FieldReal);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.TagReference);
            queueableBinaryWriter.WritePointer(this.Tracks);
            queueableBinaryWriter.WritePointer(this.DetailSounds);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            DeafeningToAIswhenUsedAsABackgroundStereoTrackCausesNearbyAIsToBeUnableToHear = 1,
            NotALoopthisIsACollectionOfPermutationsStrungTogetherThatShouldPlayOnceThenStop = 2,
            StopsMusicallOtherMusicLoopsWillStopWhenThisOneStarts = 4,
            AlwaysSpatializealwaysPlayAs3dSoundEvenInFirstPerson = 8,
            SynchronizePlaybacksynchronizesPlaybackWithOtherLoopingSoundsAttachedToTheOwnerOfThisSound = 16,
            SynchronizeTracks = 32,
            FakeSpatializationWithDistance = 64,
            CombineAll3dPlayback = 128,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Lsnd = ((TagClass)("lsnd"));
    }
}
