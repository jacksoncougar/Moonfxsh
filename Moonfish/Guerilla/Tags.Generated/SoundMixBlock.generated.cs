//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("snmx")]
    [TagBlockOriginalNameAttribute("sound_mix_block")]
    public partial class SoundMixBlock : GuerillaBlock, IWriteDeferrable
    {
        /// <summary>
        /// for first person sounds to the left of you
        /// </summary>
        public float LeftStereoGain;
        public float RightStereoGain;
        /// <summary>
        /// for first person sounds between your ears
        /// </summary>
        public float LeftStereoGain0;
        public float RightStereoGain0;
        /// <summary>
        /// for first person sounds to the right of you
        /// </summary>
        public float LeftStereoGain1;
        public float RightStereoGain1;
        public float FrontSpeakerGain;
        public float RearSpeakerGain;
        public float FrontSpeakerGain0;
        public float RearSpeakerGain0;
        public SoundGlobalMixStructBlock GlobalMix = new SoundGlobalMixStructBlock();
        public override int SerializedSize
        {
            get
            {
                return 88;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.LeftStereoGain = binaryReader.ReadSingle();
            this.RightStereoGain = binaryReader.ReadSingle();
            this.LeftStereoGain0 = binaryReader.ReadSingle();
            this.RightStereoGain0 = binaryReader.ReadSingle();
            this.LeftStereoGain1 = binaryReader.ReadSingle();
            this.RightStereoGain1 = binaryReader.ReadSingle();
            this.FrontSpeakerGain = binaryReader.ReadSingle();
            this.RearSpeakerGain = binaryReader.ReadSingle();
            this.FrontSpeakerGain0 = binaryReader.ReadSingle();
            this.RearSpeakerGain0 = binaryReader.ReadSingle();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.GlobalMix.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.GlobalMix.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.DeferReferences(queueableBinaryWriter);
            this.GlobalMix.DeferReferences(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.LeftStereoGain);
            queueableBinaryWriter.Write(this.RightStereoGain);
            queueableBinaryWriter.Write(this.LeftStereoGain0);
            queueableBinaryWriter.Write(this.RightStereoGain0);
            queueableBinaryWriter.Write(this.LeftStereoGain1);
            queueableBinaryWriter.Write(this.RightStereoGain1);
            queueableBinaryWriter.Write(this.FrontSpeakerGain);
            queueableBinaryWriter.Write(this.RearSpeakerGain);
            queueableBinaryWriter.Write(this.FrontSpeakerGain0);
            queueableBinaryWriter.Write(this.RearSpeakerGain0);
            this.GlobalMix.Write(queueableBinaryWriter);
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Snmx = ((TagClass)("snmx"));
    }
}
