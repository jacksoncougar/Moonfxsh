//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("sound_playback_parameters_struct_block")]
    public partial class SoundPlaybackParametersStructBlock : GuerillaBlock, IWriteDeferrable
    {
        public float MinimumDistance;
        public float MaximumDistance;
        public float SkipFraction;
        public float MaximumBendPerSecond;
        /// <summary>
        /// these settings control random variation of volume and pitch.
        /// the second parameter gets clipped to the first.
        /// </summary>
        public float GainBase;
        public float GainVariance;
        public int RandomPitchBounds;
        /// <summary>
        /// these settings allow sounds to be directional, fading as they turn away from the listener
        /// </summary>
        public float InnerConeAngle;
        public float OuterConeAngle;
        public float OuterConeGain;
        public Flags SoundPlaybackParametersStructFlags;
        public float Azimuth;
        public float PositionalGain;
        public float FirstPersonGain;
        public override int SerializedSize
        {
            get
            {
                return 56;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.MinimumDistance = binaryReader.ReadSingle();
            this.MaximumDistance = binaryReader.ReadSingle();
            this.SkipFraction = binaryReader.ReadSingle();
            this.MaximumBendPerSecond = binaryReader.ReadSingle();
            this.GainBase = binaryReader.ReadSingle();
            this.GainVariance = binaryReader.ReadSingle();
            this.RandomPitchBounds = binaryReader.ReadInt32();
            this.InnerConeAngle = binaryReader.ReadSingle();
            this.OuterConeAngle = binaryReader.ReadSingle();
            this.OuterConeGain = binaryReader.ReadSingle();
            this.SoundPlaybackParametersStructFlags = ((Flags)(binaryReader.ReadInt32()));
            this.Azimuth = binaryReader.ReadSingle();
            this.PositionalGain = binaryReader.ReadSingle();
            this.FirstPersonGain = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.MinimumDistance);
            writer.Write(this.MaximumDistance);
            writer.Write(this.SkipFraction);
            writer.Write(this.MaximumBendPerSecond);
            writer.Write(this.GainBase);
            writer.Write(this.GainVariance);
            writer.Write(this.RandomPitchBounds);
            writer.Write(this.InnerConeAngle);
            writer.Write(this.OuterConeAngle);
            writer.Write(this.OuterConeGain);
            writer.Write(((int)(this.SoundPlaybackParametersStructFlags)));
            writer.Write(this.Azimuth);
            writer.Write(this.PositionalGain);
            writer.Write(this.FirstPersonGain);
        }
        /// <summary>
        /// NOTE: this will only apply when the sound is started via script
        ///azimuth:
        ///    0 => front
        ///    90 => left
        ///    180 => back
        ///    270 => right
        /// </summary>
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            OverrideAzimuth = 1,
            Override3dGain = 2,
            OverrideSpeakerGain = 4,
        }
    }
}
