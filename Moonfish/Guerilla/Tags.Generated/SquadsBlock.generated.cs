//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("squads_block")]
    public partial class SquadsBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.String32 Name;
        public Flags SquadsFlags;
        public TeamEnum Team;
        public Moonfish.Tags.ShortBlockIndex1 Parent;
        public float SquadDelayTime;
        public short NormalDiffCount;
        public short InsaneDiffCount;
        public MajorUpgradeEnum MajorUpgrade;
        private byte[] fieldpad = new byte[2];
        /// <summary>
        /// The following default values are used for spawned actors
        /// </summary>
        public Moonfish.Tags.ShortBlockIndex1 VehicleType;
        public Moonfish.Tags.ShortBlockIndex1 CharacterType;
        public Moonfish.Tags.ShortBlockIndex1 InitialZone;
        private byte[] fieldpad0 = new byte[2];
        public Moonfish.Tags.ShortBlockIndex1 InitialWeapon;
        public Moonfish.Tags.ShortBlockIndex1 InitialSecondaryWeapon;
        public GrenadeTypeEnum GrenadeType;
        public Moonfish.Tags.ShortBlockIndex1 InitialOrder;
        public Moonfish.Tags.StringIdent VehicleVariant;
        public ActorStartingLocationsBlock[] StartingLocations = new ActorStartingLocationsBlock[0];
        public Moonfish.Tags.String32 PlacementScript;
        private byte[] fieldskip = new byte[2];
        private byte[] fieldpad1 = new byte[2];
        public override int SerializedSize
        {
            get
            {
                return 116;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadString32();
            this.SquadsFlags = ((Flags)(binaryReader.ReadInt32()));
            this.Team = ((TeamEnum)(binaryReader.ReadInt16()));
            this.Parent = binaryReader.ReadShortBlockIndex1();
            this.SquadDelayTime = binaryReader.ReadSingle();
            this.NormalDiffCount = binaryReader.ReadInt16();
            this.InsaneDiffCount = binaryReader.ReadInt16();
            this.MajorUpgrade = ((MajorUpgradeEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.VehicleType = binaryReader.ReadShortBlockIndex1();
            this.CharacterType = binaryReader.ReadShortBlockIndex1();
            this.InitialZone = binaryReader.ReadShortBlockIndex1();
            this.fieldpad0 = binaryReader.ReadBytes(2);
            this.InitialWeapon = binaryReader.ReadShortBlockIndex1();
            this.InitialSecondaryWeapon = binaryReader.ReadShortBlockIndex1();
            this.GrenadeType = ((GrenadeTypeEnum)(binaryReader.ReadInt16()));
            this.InitialOrder = binaryReader.ReadShortBlockIndex1();
            this.VehicleVariant = binaryReader.ReadStringIdent();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(100));
            this.PlacementScript = binaryReader.ReadString32();
            this.fieldskip = binaryReader.ReadBytes(2);
            this.fieldpad1 = binaryReader.ReadBytes(2);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.StartingLocations = base.ReadBlockArrayData<ActorStartingLocationsBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.StartingLocations);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Name);
            writer.Write(((int)(this.SquadsFlags)));
            writer.Write(((short)(this.Team)));
            writer.Write(this.Parent);
            writer.Write(this.SquadDelayTime);
            writer.Write(this.NormalDiffCount);
            writer.Write(this.InsaneDiffCount);
            writer.Write(((short)(this.MajorUpgrade)));
            writer.Write(this.fieldpad);
            writer.Write(this.VehicleType);
            writer.Write(this.CharacterType);
            writer.Write(this.InitialZone);
            writer.Write(this.fieldpad0);
            writer.Write(this.InitialWeapon);
            writer.Write(this.InitialSecondaryWeapon);
            writer.Write(((short)(this.GrenadeType)));
            writer.Write(this.InitialOrder);
            writer.Write(this.VehicleVariant);
            writer.WritePointer(this.StartingLocations);
            writer.Write(this.PlacementScript);
            writer.Write(this.fieldskip);
            writer.Write(this.fieldpad1);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            Unused = 1,
            NeverSearch = 2,
            StartTimerImmediately = 4,
            NoTimerDelayForever = 8,
            MagicSightAfterTimer = 16,
            AutomaticMigration = 32,
            DEPRECATED = 64,
            RespawnEnabled = 128,
            Blind = 256,
            Deaf = 512,
            Braindead = 1024,
            _3dFiringPositions = 2048,
            InitiallyPlaced = 4096,
            UnitsNotEnterableByPlayer = 8192,
        }
        public enum TeamEnum : short
        {
            Default = 0,
            Player = 1,
            Human = 2,
            Covenant = 3,
            Flood = 4,
            Sentinel = 5,
            Heretic = 6,
            Prophet = 7,
            Unused8 = 8,
            Unused9 = 9,
            Unused10 = 10,
            Unused11 = 11,
            Unused12 = 12,
            Unused13 = 13,
            Unused14 = 14,
            Unused15 = 15,
        }
        public enum MajorUpgradeEnum : short
        {
            Normal = 0,
            Few = 1,
            Many = 2,
            None = 3,
            All = 4,
        }
        public enum GrenadeTypeEnum : short
        {
            NONE = 0,
            HumanGrenade = 1,
            CovenantPlasma = 2,
        }
    }
}
