//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class StatesBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.String32 Name;
        public Moonfish.Tags.ColourR8G8B8 Color;
        public short CountsAs;
        private byte[] fieldpad = new byte[2];
        public float InitialPlacementWeight;
        private byte[] fieldpad0 = new byte[24];
        public Moonfish.Tags.ShortBlockIndex1 Zero;
        public Moonfish.Tags.ShortBlockIndex1 One;
        public Moonfish.Tags.ShortBlockIndex1 Two;
        public Moonfish.Tags.ShortBlockIndex1 Three;
        public Moonfish.Tags.ShortBlockIndex1 Four;
        public Moonfish.Tags.ShortBlockIndex1 Five;
        public Moonfish.Tags.ShortBlockIndex1 Six;
        public Moonfish.Tags.ShortBlockIndex1 Seven;
        public Moonfish.Tags.ShortBlockIndex1 Eight;
        private byte[] fieldpad1 = new byte[2];
        public override int SerializedSize
        {
            get
            {
                return 96;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadString32();
            this.Color = binaryReader.ReadColorR8G8B8();
            this.CountsAs = binaryReader.ReadInt16();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.InitialPlacementWeight = binaryReader.ReadSingle();
            this.fieldpad0 = binaryReader.ReadBytes(24);
            this.Zero = binaryReader.ReadShortBlockIndex1();
            this.One = binaryReader.ReadShortBlockIndex1();
            this.Two = binaryReader.ReadShortBlockIndex1();
            this.Three = binaryReader.ReadShortBlockIndex1();
            this.Four = binaryReader.ReadShortBlockIndex1();
            this.Five = binaryReader.ReadShortBlockIndex1();
            this.Six = binaryReader.ReadShortBlockIndex1();
            this.Seven = binaryReader.ReadShortBlockIndex1();
            this.Eight = binaryReader.ReadShortBlockIndex1();
            this.fieldpad1 = binaryReader.ReadBytes(2);
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.Name);
            queueableBlamBinaryWriter.Write(this.Color);
            queueableBlamBinaryWriter.Write(this.CountsAs);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.InitialPlacementWeight);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.Zero);
            queueableBlamBinaryWriter.Write(this.One);
            queueableBlamBinaryWriter.Write(this.Two);
            queueableBlamBinaryWriter.Write(this.Three);
            queueableBlamBinaryWriter.Write(this.Four);
            queueableBlamBinaryWriter.Write(this.Five);
            queueableBlamBinaryWriter.Write(this.Six);
            queueableBlamBinaryWriter.Write(this.Seven);
            queueableBlamBinaryWriter.Write(this.Eight);
            queueableBlamBinaryWriter.Write(this.fieldpad1);
        }
    }
}
