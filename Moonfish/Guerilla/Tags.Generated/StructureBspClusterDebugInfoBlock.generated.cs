//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class StructureBspClusterDebugInfoBlock : GuerillaBlock, IWriteQueueable
    {
        public Errors StructureBspClusterDebugInfoErrors;
        public Warnings StructureBspClusterDebugInfoWarnings;
        private byte[] fieldpad = new byte[28];
        public StructureBspDebugInfoRenderLineBlock[] Lines = new StructureBspDebugInfoRenderLineBlock[0];
        public StructureBspDebugInfoIndicesBlock[] FogPlaneIndices = new StructureBspDebugInfoIndicesBlock[0];
        public StructureBspDebugInfoIndicesBlock[] VisibleFogPlaneIndices = new StructureBspDebugInfoIndicesBlock[0];
        public StructureBspDebugInfoIndicesBlock[] VisFogOmissionClusterIndices = new StructureBspDebugInfoIndicesBlock[0];
        public StructureBspDebugInfoIndicesBlock[] ContainingFogZoneIndices = new StructureBspDebugInfoIndicesBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 72;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.StructureBspClusterDebugInfoErrors = ((Errors)(binaryReader.ReadInt16()));
            this.StructureBspClusterDebugInfoWarnings = ((Warnings)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(28);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Lines = base.ReadBlockArrayData<StructureBspDebugInfoRenderLineBlock>(binaryReader, pointerQueue.Dequeue());
            this.FogPlaneIndices = base.ReadBlockArrayData<StructureBspDebugInfoIndicesBlock>(binaryReader, pointerQueue.Dequeue());
            this.VisibleFogPlaneIndices = base.ReadBlockArrayData<StructureBspDebugInfoIndicesBlock>(binaryReader, pointerQueue.Dequeue());
            this.VisFogOmissionClusterIndices = base.ReadBlockArrayData<StructureBspDebugInfoIndicesBlock>(binaryReader, pointerQueue.Dequeue());
            this.ContainingFogZoneIndices = base.ReadBlockArrayData<StructureBspDebugInfoIndicesBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            queueableBinaryWriter.QueueWrite(this.Lines);
            queueableBinaryWriter.QueueWrite(this.FogPlaneIndices);
            queueableBinaryWriter.QueueWrite(this.VisibleFogPlaneIndices);
            queueableBinaryWriter.QueueWrite(this.VisFogOmissionClusterIndices);
            queueableBinaryWriter.QueueWrite(this.ContainingFogZoneIndices);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.StructureBspClusterDebugInfoErrors)));
            queueableBinaryWriter.Write(((short)(this.StructureBspClusterDebugInfoWarnings)));
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.WritePointer(this.Lines);
            queueableBinaryWriter.WritePointer(this.FogPlaneIndices);
            queueableBinaryWriter.WritePointer(this.VisibleFogPlaneIndices);
            queueableBinaryWriter.WritePointer(this.VisFogOmissionClusterIndices);
            queueableBinaryWriter.WritePointer(this.ContainingFogZoneIndices);
        }
        [System.FlagsAttribute()]
        public enum Errors : short
        {
            None = 0,
            MultipleFogPlanes = 1,
            FogZoneCollision = 2,
            FogZoneImmersion = 4,
        }
        [System.FlagsAttribute()]
        public enum Warnings : short
        {
            None = 0,
            MultipleVisibleFogPlanes = 1,
            VisibleFogClusterOmission = 2,
            FogPlaneMissedRenderBSP = 4,
        }
    }
}
