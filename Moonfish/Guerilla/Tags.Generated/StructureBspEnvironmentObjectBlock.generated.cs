//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("structure_bsp_environment_object_block")]
    public partial class StructureBspEnvironmentObjectBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.String32 Name;
        public OpenTK.Quaternion Rotation;
        public OpenTK.Vector3 Translation;
        public Moonfish.Tags.ShortBlockIndex1 PaletteIndex;
        private byte[] fieldpad = new byte[2];
        public int UniqueID;
        public Moonfish.Tags.TagClass ExportedObjectType;
        public Moonfish.Tags.String32 ScenarioObjectName;
        public override int SerializedSize
        {
            get
            {
                return 104;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadString32();
            this.Rotation = binaryReader.ReadQuaternion();
            this.Translation = binaryReader.ReadVector3();
            this.PaletteIndex = binaryReader.ReadShortBlockIndex1();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.UniqueID = binaryReader.ReadInt32();
            this.ExportedObjectType = binaryReader.ReadTagClass();
            this.ScenarioObjectName = binaryReader.ReadString32();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.Name);
            queueableBinaryWriter.Write(this.Rotation);
            queueableBinaryWriter.Write(this.Translation);
            queueableBinaryWriter.Write(this.PaletteIndex);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.UniqueID);
            queueableBinaryWriter.Write(this.ExportedObjectType);
            queueableBinaryWriter.Write(this.ScenarioObjectName);
        }
    }
}
