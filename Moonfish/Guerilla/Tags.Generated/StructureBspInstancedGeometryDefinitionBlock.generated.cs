//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class StructureBspInstancedGeometryDefinitionBlock : GuerillaBlock, IWriteQueueable
    {
        public StructureInstancedGeometryRenderInfoStructBlock RenderInfo = new StructureInstancedGeometryRenderInfoStructBlock();
        public int Checksum;
        public OpenTK.Vector3 BoundingSphereCenter;
        public float BoundingSphereRadius;
        public GlobalCollisionBspStructBlock CollisionInfo = new GlobalCollisionBspStructBlock();
        public CollisionBspPhysicsBlock[] BspPhysics = new CollisionBspPhysicsBlock[0];
        public StructureBspLeafBlock[] RenderLeaves = new StructureBspLeafBlock[0];
        public StructureBspSurfaceReferenceBlock[] SurfaceReferences = new StructureBspSurfaceReferenceBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 200;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.RenderInfo.ReadFields(binaryReader)));
            this.Checksum = binaryReader.ReadInt32();
            this.BoundingSphereCenter = binaryReader.ReadVector3();
            this.BoundingSphereRadius = binaryReader.ReadSingle();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.CollisionInfo.ReadFields(binaryReader)));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(112));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.RenderInfo.ReadInstances(binaryReader, pointerQueue);
            this.CollisionInfo.ReadInstances(binaryReader, pointerQueue);
            this.BspPhysics = base.ReadBlockArrayData<CollisionBspPhysicsBlock>(binaryReader, pointerQueue.Dequeue());
            this.RenderLeaves = base.ReadBlockArrayData<StructureBspLeafBlock>(binaryReader, pointerQueue.Dequeue());
            this.SurfaceReferences = base.ReadBlockArrayData<StructureBspSurfaceReferenceBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            this.RenderInfo.QueueWrites(queueableBlamBinaryWriter);
            this.CollisionInfo.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.BspPhysics);
            queueableBlamBinaryWriter.QueueWrite(this.RenderLeaves);
            queueableBlamBinaryWriter.QueueWrite(this.SurfaceReferences);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            this.RenderInfo.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.Checksum);
            queueableBlamBinaryWriter.Write(this.BoundingSphereCenter);
            queueableBlamBinaryWriter.Write(this.BoundingSphereRadius);
            this.CollisionInfo.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.WritePointer(this.BspPhysics);
            queueableBlamBinaryWriter.WritePointer(this.RenderLeaves);
            queueableBlamBinaryWriter.WritePointer(this.SurfaceReferences);
        }
    }
}
