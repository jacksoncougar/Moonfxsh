//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class StructureBspInstancedGeometryInstancesBlock : GuerillaBlock, IWriteQueueable
    {
        public float Scale;
        public OpenTK.Vector3 Forward;
        public OpenTK.Vector3 Left;
        public OpenTK.Vector3 Up;
        public OpenTK.Vector3 Position;
        public Moonfish.Tags.ShortBlockIndex1 InstanceDefinition;
        public Flags StructureBspInstancedGeometryInstancesFlags;
        private byte[] fieldpad = new byte[4];
        private byte[] fieldskip = new byte[12];
        private byte[] fieldskip0 = new byte[4];
        public int Checksum;
        public Moonfish.Tags.StringIdent Name;
        public PathfindingPolicyEnum PathfindingPolicy;
        public LightmappingPolicyEnum LightmappingPolicy;
        public override int SerializedSize
        {
            get
            {
                return 88;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Scale = binaryReader.ReadSingle();
            this.Forward = binaryReader.ReadVector3();
            this.Left = binaryReader.ReadVector3();
            this.Up = binaryReader.ReadVector3();
            this.Position = binaryReader.ReadVector3();
            this.InstanceDefinition = binaryReader.ReadShortBlockIndex1();
            this.StructureBspInstancedGeometryInstancesFlags = ((Flags)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(4);
            this.fieldskip = binaryReader.ReadBytes(12);
            this.fieldskip0 = binaryReader.ReadBytes(4);
            this.Checksum = binaryReader.ReadInt32();
            this.Name = binaryReader.ReadStringIdent();
            this.PathfindingPolicy = ((PathfindingPolicyEnum)(binaryReader.ReadInt16()));
            this.LightmappingPolicy = ((LightmappingPolicyEnum)(binaryReader.ReadInt16()));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBinaryWriter queueableBinaryWriter)
        {
            base.Write_(queueableBinaryWriter);
            queueableBinaryWriter.Write(this.Scale);
            queueableBinaryWriter.Write(this.Forward);
            queueableBinaryWriter.Write(this.Left);
            queueableBinaryWriter.Write(this.Up);
            queueableBinaryWriter.Write(this.Position);
            queueableBinaryWriter.Write(this.InstanceDefinition);
            queueableBinaryWriter.Write(((short)(this.StructureBspInstancedGeometryInstancesFlags)));
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.fieldskip);
            queueableBinaryWriter.Write(this.fieldskip0);
            queueableBinaryWriter.Write(this.Checksum);
            queueableBinaryWriter.Write(this.Name);
            queueableBinaryWriter.Write(((short)(this.PathfindingPolicy)));
            queueableBinaryWriter.Write(((short)(this.LightmappingPolicy)));
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            NotInLightprobes = 1,
        }
        public enum PathfindingPolicyEnum : short
        {
            Cutout = 0,
            Static = 1,
            None = 2,
        }
        public enum LightmappingPolicyEnum : short
        {
            PerPixel = 0,
            PerVertex = 1,
        }
    }
}
