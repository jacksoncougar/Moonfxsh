//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class StructureBspWeatherPaletteBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.String32 Name;
        [Moonfish.Tags.TagReferenceAttribute("weat")]
        public Moonfish.Tags.TagReference WeatherSystem;
        private byte[] fieldpad = new byte[2];
        private byte[] fieldpad0 = new byte[2];
        private byte[] fieldpad1 = new byte[32];
        [Moonfish.Tags.TagReferenceAttribute("wind")]
        public Moonfish.Tags.TagReference Wind;
        public OpenTK.Vector3 WindDirection;
        public float WindMagnitude;
        private byte[] fieldpad2 = new byte[4];
        public Moonfish.Tags.String32 WindScaleFunction;
        public override int SerializedSize
        {
            get
            {
                return 136;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadString32();
            this.WeatherSystem = binaryReader.ReadTagReference();
            this.fieldpad = binaryReader.ReadBytes(2);
            this.fieldpad0 = binaryReader.ReadBytes(2);
            this.fieldpad1 = binaryReader.ReadBytes(32);
            this.Wind = binaryReader.ReadTagReference();
            this.WindDirection = binaryReader.ReadVector3();
            this.WindMagnitude = binaryReader.ReadSingle();
            this.fieldpad2 = binaryReader.ReadBytes(4);
            this.WindScaleFunction = binaryReader.ReadString32();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.Name);
            queueableBlamBinaryWriter.Write(this.WeatherSystem);
            queueableBlamBinaryWriter.Write(this.fieldpad);
            queueableBlamBinaryWriter.Write(this.fieldpad0);
            queueableBlamBinaryWriter.Write(this.fieldpad1);
            queueableBlamBinaryWriter.Write(this.Wind);
            queueableBlamBinaryWriter.Write(this.WindDirection);
            queueableBlamBinaryWriter.Write(this.WindMagnitude);
            queueableBlamBinaryWriter.Write(this.fieldpad2);
            queueableBlamBinaryWriter.Write(this.WindScaleFunction);
        }
    }
}
