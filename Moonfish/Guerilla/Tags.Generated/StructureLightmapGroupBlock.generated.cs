//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("structure_lightmap_group_block")]
    public partial class StructureLightmapGroupBlock : GuerillaBlock, IWriteDeferrable
    {
        public TypeEnum Type;
        public Flags StructureLightmapGroupFlags;
        public int StructureChecksum;
        [Moonfish.Guerilla.LayoutAttribute(Pack=64)]
        public StructureLightmapPaletteColorBlock[] SectionPalette = new StructureLightmapPaletteColorBlock[0];
        [Moonfish.Guerilla.LayoutAttribute(Pack=64)]
        public StructureLightmapPaletteColorBlock[] WritablePalettes = new StructureLightmapPaletteColorBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference BitmapGroup;
        public LightmapGeometrySectionBlock[] Clusters = new LightmapGeometrySectionBlock[0];
        public LightmapGeometryRenderInfoBlock[] ClusterRenderInfo = new LightmapGeometryRenderInfoBlock[0];
        public LightmapGeometrySectionBlock[] PoopDefinitions = new LightmapGeometrySectionBlock[0];
        public StructureLightmapLightingEnvironmentBlock[] LightingEnvironments = new StructureLightmapLightingEnvironmentBlock[0];
        public LightmapVertexBufferBucketBlock[] GeometryBuckets = new LightmapVertexBufferBucketBlock[0];
        public LightmapGeometryRenderInfoBlock[] InstanceRenderInfo = new LightmapGeometryRenderInfoBlock[0];
        public LightmapInstanceBucketReferenceBlock[] InstanceBucketRefs = new LightmapInstanceBucketReferenceBlock[0];
        public LightmapSceneryObjectInfoBlock[] SceneryObjectInfo = new LightmapSceneryObjectInfoBlock[0];
        public LightmapInstanceBucketReferenceBlock[] SceneryObjectBucketRefs = new LightmapInstanceBucketReferenceBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 104;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Type = ((TypeEnum)(binaryReader.ReadInt16()));
            this.StructureLightmapGroupFlags = ((Flags)(binaryReader.ReadInt16()));
            this.StructureChecksum = binaryReader.ReadInt32();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1024));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1024));
            this.BitmapGroup = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(84));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(84));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(220));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.SectionPalette = base.ReadBlockArrayData<StructureLightmapPaletteColorBlock>(binaryReader, pointerQueue.Dequeue());
            this.WritablePalettes = base.ReadBlockArrayData<StructureLightmapPaletteColorBlock>(binaryReader, pointerQueue.Dequeue());
            this.Clusters = base.ReadBlockArrayData<LightmapGeometrySectionBlock>(binaryReader, pointerQueue.Dequeue());
            this.ClusterRenderInfo = base.ReadBlockArrayData<LightmapGeometryRenderInfoBlock>(binaryReader, pointerQueue.Dequeue());
            this.PoopDefinitions = base.ReadBlockArrayData<LightmapGeometrySectionBlock>(binaryReader, pointerQueue.Dequeue());
            this.LightingEnvironments = base.ReadBlockArrayData<StructureLightmapLightingEnvironmentBlock>(binaryReader, pointerQueue.Dequeue());
            this.GeometryBuckets = base.ReadBlockArrayData<LightmapVertexBufferBucketBlock>(binaryReader, pointerQueue.Dequeue());
            this.InstanceRenderInfo = base.ReadBlockArrayData<LightmapGeometryRenderInfoBlock>(binaryReader, pointerQueue.Dequeue());
            this.InstanceBucketRefs = base.ReadBlockArrayData<LightmapInstanceBucketReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.SceneryObjectInfo = base.ReadBlockArrayData<LightmapSceneryObjectInfoBlock>(binaryReader, pointerQueue.Dequeue());
            this.SceneryObjectBucketRefs = base.ReadBlockArrayData<LightmapInstanceBucketReferenceBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.SectionPalette);
            writer.Defer(this.WritablePalettes);
            writer.Defer(this.Clusters);
            writer.Defer(this.ClusterRenderInfo);
            writer.Defer(this.PoopDefinitions);
            writer.Defer(this.LightingEnvironments);
            writer.Defer(this.GeometryBuckets);
            writer.Defer(this.InstanceRenderInfo);
            writer.Defer(this.InstanceBucketRefs);
            writer.Defer(this.SceneryObjectInfo);
            writer.Defer(this.SceneryObjectBucketRefs);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((short)(this.Type)));
            writer.Write(((short)(this.StructureLightmapGroupFlags)));
            writer.Write(this.StructureChecksum);
            writer.WritePointer(this.SectionPalette);
            writer.WritePointer(this.WritablePalettes);
            writer.Write(this.BitmapGroup);
            writer.WritePointer(this.Clusters);
            writer.WritePointer(this.ClusterRenderInfo);
            writer.WritePointer(this.PoopDefinitions);
            writer.WritePointer(this.LightingEnvironments);
            writer.WritePointer(this.GeometryBuckets);
            writer.WritePointer(this.InstanceRenderInfo);
            writer.WritePointer(this.InstanceBucketRefs);
            writer.WritePointer(this.SceneryObjectInfo);
            writer.WritePointer(this.SceneryObjectBucketRefs);
        }
        public enum TypeEnum : short
        {
            Normal = 0,
        }
        [System.FlagsAttribute()]
        public enum Flags : short
        {
            None = 0,
            Unused = 1,
        }
    }
}
