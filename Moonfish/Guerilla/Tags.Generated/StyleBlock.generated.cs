//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("styl")]
    [TagBlockOriginalNameAttribute("style_block")]
    public partial class StyleBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.String32 Name;
        public CombatStatusDecayOptionsEnum CombatStatusDecayOptions;
        private byte[] fieldpad = new byte[2];
        public AttitudeEnum Attitude;
        private byte[] fieldpad0 = new byte[2];
        public EngageAttitudeEnum EngageAttitude;
        public EvasionAttitudeEnum EvasionAttitude;
        public CoverAttitudeEnum CoverAttitude;
        public SearchAttitudeEnum SearchAttitude;
        public PresearchAttitudeEnum PresearchAttitude;
        public RetreatAttitudeEnum RetreatAttitude;
        public ChargeAttitudeEnum ChargeAttitude;
        public ReadyAttitudeEnum ReadyAttitude;
        public IdleAttitudeEnum IdleAttitude;
        public WeaponAttitudeEnum WeaponAttitude;
        public SwarmAttitudeEnum SwarmAttitude;
        private byte[] fieldpad1 = new byte[1];
        public StyleControl StyleStyleControl;
        public Behaviors1 StyleBehaviors1;
        public Behaviors2 StyleBehaviors2;
        public Behaviors3 StyleBehaviors3;
        public Behaviors4 StyleBehaviors4;
        public Behaviors5 StyleBehaviors5;
        public SpecialMovementBlock[] SpecialMovement = new SpecialMovementBlock[0];
        public BehaviorNamesBlock[] BehaviorList = new BehaviorNamesBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 92;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Name = binaryReader.ReadString32();
            this.CombatStatusDecayOptions = ((CombatStatusDecayOptionsEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.Attitude = ((AttitudeEnum)(binaryReader.ReadInt16()));
            this.fieldpad0 = binaryReader.ReadBytes(2);
            this.EngageAttitude = ((EngageAttitudeEnum)(binaryReader.ReadByte()));
            this.EvasionAttitude = ((EvasionAttitudeEnum)(binaryReader.ReadByte()));
            this.CoverAttitude = ((CoverAttitudeEnum)(binaryReader.ReadByte()));
            this.SearchAttitude = ((SearchAttitudeEnum)(binaryReader.ReadByte()));
            this.PresearchAttitude = ((PresearchAttitudeEnum)(binaryReader.ReadByte()));
            this.RetreatAttitude = ((RetreatAttitudeEnum)(binaryReader.ReadByte()));
            this.ChargeAttitude = ((ChargeAttitudeEnum)(binaryReader.ReadByte()));
            this.ReadyAttitude = ((ReadyAttitudeEnum)(binaryReader.ReadByte()));
            this.IdleAttitude = ((IdleAttitudeEnum)(binaryReader.ReadByte()));
            this.WeaponAttitude = ((WeaponAttitudeEnum)(binaryReader.ReadByte()));
            this.SwarmAttitude = ((SwarmAttitudeEnum)(binaryReader.ReadByte()));
            this.fieldpad1 = binaryReader.ReadBytes(1);
            this.StyleStyleControl = ((StyleControl)(binaryReader.ReadInt32()));
            this.StyleBehaviors1 = ((Behaviors1)(binaryReader.ReadInt32()));
            this.StyleBehaviors2 = ((Behaviors2)(binaryReader.ReadInt32()));
            this.StyleBehaviors3 = ((Behaviors3)(binaryReader.ReadInt32()));
            this.StyleBehaviors4 = ((Behaviors4)(binaryReader.ReadInt32()));
            this.StyleBehaviors5 = ((Behaviors5)(binaryReader.ReadInt32()));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.SpecialMovement = base.ReadBlockArrayData<SpecialMovementBlock>(binaryReader, pointerQueue.Dequeue());
            this.BehaviorList = base.ReadBlockArrayData<BehaviorNamesBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.SpecialMovement);
            writer.Defer(this.BehaviorList);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Name);
            writer.Write(((short)(this.CombatStatusDecayOptions)));
            writer.Write(this.fieldpad);
            writer.Write(((short)(this.Attitude)));
            writer.Write(this.fieldpad0);
            writer.Write(((byte)(this.EngageAttitude)));
            writer.Write(((byte)(this.EvasionAttitude)));
            writer.Write(((byte)(this.CoverAttitude)));
            writer.Write(((byte)(this.SearchAttitude)));
            writer.Write(((byte)(this.PresearchAttitude)));
            writer.Write(((byte)(this.RetreatAttitude)));
            writer.Write(((byte)(this.ChargeAttitude)));
            writer.Write(((byte)(this.ReadyAttitude)));
            writer.Write(((byte)(this.IdleAttitude)));
            writer.Write(((byte)(this.WeaponAttitude)));
            writer.Write(((byte)(this.SwarmAttitude)));
            writer.Write(this.fieldpad1);
            writer.Write(((int)(this.StyleStyleControl)));
            writer.Write(((int)(this.StyleBehaviors1)));
            writer.Write(((int)(this.StyleBehaviors2)));
            writer.Write(((int)(this.StyleBehaviors3)));
            writer.Write(((int)(this.StyleBehaviors4)));
            writer.Write(((int)(this.StyleBehaviors5)));
            writer.WritePointer(this.SpecialMovement);
            writer.WritePointer(this.BehaviorList);
        }
        /// <summary>
        /// Controls how combat status is allowed to be automatically reduced in the absence of combat stimuli. 'Latch at X' means that once the level of x is attained (and/or surpassed) the combat status never falls below it
        /// </summary>
        public enum CombatStatusDecayOptionsEnum : short
        {
            LatchAtIdle = 0,
            LatchAtAlert = 1,
            LatchAtCombat = 2,
        }
        /// <summary>
        /// Indicates general stance for style. This matches the property blocks in the character definition (e.g. defense properties)
        /// </summary>
        public enum AttitudeEnum : short
        {
            Normal = 0,
            Timid = 1,
            Aggressive = 2,
        }
        public enum EngageAttitudeEnum : byte
        {
            Default = 0,
            Normal = 1,
            Timid = 2,
            Aggressive = 3,
        }
        public enum EvasionAttitudeEnum : byte
        {
            Default = 0,
            Normal = 1,
            Timid = 2,
            Aggressive = 3,
        }
        public enum CoverAttitudeEnum : byte
        {
            Default = 0,
            Normal = 1,
            Timid = 2,
            Aggressive = 3,
        }
        public enum SearchAttitudeEnum : byte
        {
            Default = 0,
            Normal = 1,
            Timid = 2,
            Aggressive = 3,
        }
        public enum PresearchAttitudeEnum : byte
        {
            Default = 0,
            Normal = 1,
            Timid = 2,
            Aggressive = 3,
        }
        public enum RetreatAttitudeEnum : byte
        {
            Default = 0,
            Normal = 1,
            Timid = 2,
            Aggressive = 3,
        }
        public enum ChargeAttitudeEnum : byte
        {
            Default = 0,
            Normal = 1,
            Timid = 2,
            Aggressive = 3,
        }
        public enum ReadyAttitudeEnum : byte
        {
            Default = 0,
            Normal = 1,
            Timid = 2,
            Aggressive = 3,
        }
        public enum IdleAttitudeEnum : byte
        {
            Default = 0,
            Normal = 1,
            Timid = 2,
            Aggressive = 3,
        }
        public enum WeaponAttitudeEnum : byte
        {
            Default = 0,
            Normal = 1,
            Timid = 2,
            Aggressive = 3,
        }
        public enum SwarmAttitudeEnum : byte
        {
            Default = 0,
            Normal = 1,
            Timid = 2,
            Aggressive = 3,
        }
        /// <summary>
        /// Check the appropriate box to turn on/off the given behavior
        /// </summary>
        [System.FlagsAttribute()]
        public enum StyleControl : int
        {
            None = 0,
            NewBehaviorsDefaultToON = 1,
        }
        [System.FlagsAttribute()]
        public enum Behaviors1 : int
        {
            None = 0,
            GENERAL = 1,
            Root = 2,
            Null = 4,
            NullDiscrete = 8,
            Obey = 16,
            Guard = 32,
            FollowBehavior = 64,
            Ready = 128,
            SmashObstacle = 256,
            DestroyObstacle = 512,
            Perch = 1024,
            CoverFriend = 2048,
            BlindPanic = 4096,
            ENGAGE = 8192,
            Engage = 16384,
            Fight = 32768,
            MeleeCharge = 65536,
            MeleeLeapingCharge = 131072,
            Surprise = 262144,
            GrenadeImpulse = 524288,
            AntiVehicleGrenade = 1048576,
            Stalk = 2097152,
            BerserkWanderImpulse = 4194304,
            BERSERK = 8388608,
            LastManBerserk = 16777216,
            StuckWithGrenadeBerserk = 33554432,
            PRESEARCH = 67108864,
            Presearch = 134217728,
            PresearchUncover = 268435456,
            DestroyCover = 536870912,
            SuppressingFire = 1073741824,
            GrenadeUncover = -2147483648,
        }
        [System.FlagsAttribute()]
        public enum Behaviors2 : int
        {
            None = 0,
            LeapOnCover = 1,
            SEARCH = 2,
            Search = 4,
            Uncover = 8,
            Investigate = 16,
            PursuitSync = 32,
            Pursuit = 64,
            Postsearch = 128,
            CovermeInvestigate = 256,
            SELFDEFENSE = 512,
            SelfPreservation = 1024,
            Cover = 2048,
            CoverPeek = 4096,
            Avoid = 8192,
            EvasionImpulse = 16384,
            DiveImpulse = 32768,
            DangerCoverImpulse = 65536,
            DangerCrouchImpulse = 131072,
            ProximityMelee = 262144,
            ProximitySelfPreservation = 524288,
            UnreachableEnemyCover = 1048576,
            ScaryTargetCover = 2097152,
            GroupEmerge = 4194304,
            RETREAT = 8388608,
            Retreat = 16777216,
            RetreatGrenade = 33554432,
            Flee = 67108864,
            Cower = 134217728,
            LowShieldRetreat = 268435456,
            ScaryTargetRetreat = 536870912,
            LeaderDeadRetreat = 1073741824,
            PeerDeadRetreat = -2147483648,
        }
        [System.FlagsAttribute()]
        public enum Behaviors3 : int
        {
            None = 0,
            DangerRetreat = 1,
            ProximityRetreat = 2,
            ChargeWhenCornered = 4,
            SurpriseRetreat = 8,
            OverheatedWeaponRetreat = 16,
            AMBUSH = 32,
            Ambush = 64,
            CoordinatedAmbush = 128,
            ProximityAmbush = 256,
            VulnerableEnemyAmbush = 512,
            NowhereToRunAmbush = 1024,
            VEHICLE = 2048,
            Vehicle = 4096,
            EnterFriendlyVehicle = 8192,
            ReenterFlippedVehicle = 16384,
            VehicleEntryEngageImpulse = 32768,
            VehicleBoard = 65536,
            VehicleFight = 131072,
            VehicleCharge = 262144,
            VehicleRamBehavior = 524288,
            VehicleCover = 1048576,
            DamageVehicleCover = 2097152,
            ExposedRearCoverImpulse = 4194304,
            PlayerEndageredCoverImpulse = 8388608,
            VehicleAvoid = 16777216,
            VehiclePickup = 33554432,
            VehiclePlayerPickup = 67108864,
            VehicleExitImpulse = 134217728,
            DangerVehicleExitImpulse = 268435456,
            VehicleFlip = 536870912,
            VehicleTurtle = 1073741824,
            VehicleEngagePatrolImpulse = -2147483648,
        }
        [System.FlagsAttribute()]
        public enum Behaviors4 : int
        {
            None = 0,
            VehicleEngageWanderImpulse = 1,
            POSTCOMBAT = 2,
            Postcombat = 4,
            PostPostcombat = 8,
            CheckFriend = 16,
            ShootCorpse = 32,
            PostcombatApproach = 64,
            ALERT = 128,
            Alert = 256,
            IDLE = 512,
            Idle = 1024,
            WanderBehavior = 2048,
            FlightWander = 4096,
            Patrol = 8192,
            FallSleep = 16384,
            BUGGERS = 32768,
            BuggerGroundUncover = 65536,
            SWARMS = 131072,
            SwarmRoot = 262144,
            SwarmAttack = 524288,
            SupportAttack = 1048576,
            Infect = 2097152,
            Scatter = 4194304,
            EjectParasite = 8388608,
            FloodSelfPreservation = 16777216,
            JuggernautFlurry = 33554432,
            SENTINELS = 67108864,
            EnforcerWeaponControl = 134217728,
            Grapple = 268435456,
            SPECIAL = 536870912,
            Formation = 1073741824,
            GruntScaredByElite = -2147483648,
        }
        [System.FlagsAttribute()]
        public enum Behaviors5 : int
        {
            None = 0,
            Stunned = 1,
            CureIsolation = 2,
            DeployTurret = 4,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Styl = ((TagClass)("styl"));
    }
}
