//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("ui_model_scene_reference_block")]
    public partial class UiModelSceneReferenceBlock : GuerillaBlock, IWriteQueueable
    {
        public Flags UiModelSceneReferenceFlags;
        public AnimationIndexEnum AnimationIndex;
        public short IntroAnimationDelayMilliseconds;
        public short RenderDepthBias;
        private byte[] fieldpad = new byte[2];
        public UiObjectReferenceBlock[] Objects = new UiObjectReferenceBlock[0];
        public UiLightReferenceBlock[] Lights = new UiLightReferenceBlock[0];
        public OpenTK.Vector3 AnimationScaleFactor;
        public OpenTK.Vector3 CameraPosition;
        public float FovDegress;
        public OpenTK.Vector2 UiViewport;
        public Moonfish.Tags.StringIdent UNUSEDIntroAnim;
        public Moonfish.Tags.StringIdent UNUSEDOutroAnim;
        public Moonfish.Tags.StringIdent UNUSEDAmbientAnim;
        public override int SerializedSize
        {
            get
            {
                return 76;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.UiModelSceneReferenceFlags = ((Flags)(binaryReader.ReadInt32()));
            this.AnimationIndex = ((AnimationIndexEnum)(binaryReader.ReadInt16()));
            this.IntroAnimationDelayMilliseconds = binaryReader.ReadInt16();
            this.RenderDepthBias = binaryReader.ReadInt16();
            this.fieldpad = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(32));
            this.AnimationScaleFactor = binaryReader.ReadVector3();
            this.CameraPosition = binaryReader.ReadVector3();
            this.FovDegress = binaryReader.ReadSingle();
            this.UiViewport = binaryReader.ReadVector2();
            this.UNUSEDIntroAnim = binaryReader.ReadStringIdent();
            this.UNUSEDOutroAnim = binaryReader.ReadStringIdent();
            this.UNUSEDAmbientAnim = binaryReader.ReadStringIdent();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Objects = base.ReadBlockArrayData<UiObjectReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.Lights = base.ReadBlockArrayData<UiLightReferenceBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.Objects);
            queueableBinaryWriter.Defer(this.Lights);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((int)(this.UiModelSceneReferenceFlags)));
            queueableBinaryWriter.Write(((short)(this.AnimationIndex)));
            queueableBinaryWriter.Write(this.IntroAnimationDelayMilliseconds);
            queueableBinaryWriter.Write(this.RenderDepthBias);
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.WritePointer(this.Objects);
            queueableBinaryWriter.WritePointer(this.Lights);
            queueableBinaryWriter.Write(this.AnimationScaleFactor);
            queueableBinaryWriter.Write(this.CameraPosition);
            queueableBinaryWriter.Write(this.FovDegress);
            queueableBinaryWriter.Write(this.UiViewport);
            queueableBinaryWriter.Write(this.UNUSEDIntroAnim);
            queueableBinaryWriter.Write(this.UNUSEDOutroAnim);
            queueableBinaryWriter.Write(this.UNUSEDAmbientAnim);
        }
        /// <summary>
        /// Halo y-axis=ui z-axis, and Halo z-axis=ui y-axis.
        ///As a convention, let's always place objects in the ui scenario such that
        ///they are facing in the '-y' direction, and the camera such that is is
        ///facing the '+y' direction. This way the ui animation for models (which
        ///gets applied to the camera) will always be consisitent.
        /// </summary>
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            Unused = 1,
        }
        public enum AnimationIndexEnum : short
        {
            NONE = 0,
            _00 = 1,
            _01 = 2,
            _02 = 3,
            _03 = 4,
            _04 = 5,
            _05 = 6,
            _06 = 7,
            _07 = 8,
            _08 = 9,
            _09 = 10,
            _10 = 11,
            _11 = 12,
            _12 = 13,
            _13 = 14,
            _14 = 15,
            _15 = 16,
            _16 = 17,
            _17 = 18,
            _18 = 19,
            _19 = 20,
            _20 = 21,
            _21 = 22,
            _22 = 23,
            _23 = 24,
            _24 = 25,
            _25 = 26,
            _26 = 27,
            _27 = 28,
            _28 = 29,
            _29 = 30,
            _30 = 31,
            _31 = 32,
            _32 = 33,
            _33 = 34,
            _34 = 35,
            _35 = 36,
            _36 = 37,
            _37 = 38,
            _38 = 39,
            _39 = 40,
            _40 = 41,
            _41 = 42,
            _42 = 43,
            _43 = 44,
            _44 = 45,
            _45 = 46,
            _46 = 47,
            _47 = 48,
            _48 = 49,
            _49 = 50,
            _50 = 51,
            _51 = 52,
            _52 = 53,
            _53 = 54,
            _54 = 55,
            _55 = 56,
            _56 = 57,
            _57 = 58,
            _58 = 59,
            _59 = 60,
            _60 = 61,
            _61 = 62,
            _62 = 63,
            _63 = 64,
        }
    }
}
