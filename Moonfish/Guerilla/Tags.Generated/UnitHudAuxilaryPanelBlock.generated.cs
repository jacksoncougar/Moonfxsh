//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("unit_hud_auxilary_panel_block")]
    public partial class UnitHudAuxilaryPanelBlock : GuerillaBlock, IWriteQueueable
    {
        public TypeEnum Type;
        private byte[] fieldpad = new byte[2];
        private byte[] fieldpad0 = new byte[16];
        public Moonfish.Tags.Point AnchorOffset;
        public float WidthScale;
        public float HeightScale;
        public ScalingFlags UnitHudAuxilaryPanelScalingFlags;
        private byte[] fieldpad1 = new byte[2];
        private byte[] fieldpad2 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference InterfaceBitmap;
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor;
        public float FlashPeriod;
        public float FlashDelay;
        public short NumberOfFlashes;
        public FlashFlags UnitHudAuxilaryPanelFlashFlags;
        public float FlashLength;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor;
        private byte[] fieldpad3 = new byte[4];
        public short SequenceIndex;
        private byte[] fieldpad4 = new byte[2];
        public GlobalHudMultitextureOverlayDefinition[] MultitexOverlay = new GlobalHudMultitextureOverlayDefinition[0];
        private byte[] fieldpad5 = new byte[4];
        public Moonfish.Tags.Point AnchorOffset0;
        public float WidthScale0;
        public float HeightScale0;
        public UnitHudAuxilaryPanelScalingFlags0 UnitHudAuxilaryPanelUnitHudAuxilaryPanelScalingFlags0;
        private byte[] fieldpad6 = new byte[2];
        private byte[] fieldpad7 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference MeterBitmap;
        public Moonfish.Tags.ColourR1G1B1 ColorAtMeterMinimum;
        public Moonfish.Tags.ColourR1G1B1 ColorAtMeterMaximum;
        public Moonfish.Tags.ColourR1G1B1 FlashColor;
        public Moonfish.Tags.ColourA1R1G1B1 EmptyColor;
        public Flags UnitHudAuxilaryPanelFlags;
        public byte MinumumMeterValue;
        public short SequenceIndex0;
        public byte AlphaMultiplier;
        public byte AlphaBias;
        public short ValueScale;
        public float Opacity;
        public float Translucency;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor0;
        public GNullBlock[] GNullBlock = new GNullBlock[0];
        private byte[] fieldpad8 = new byte[4];
        public float MinimumFractionCutoff;
        public UnitHudAuxilaryPanelFlags0 UnitHudAuxilaryPanelUnitHudAuxilaryPanelFlags0;
        private byte[] fieldpad9 = new byte[24];
        private byte[] fieldpad10 = new byte[64];
        public override int SerializedSize
        {
            get
            {
                return 297;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Type = ((TypeEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.fieldpad0 = binaryReader.ReadBytes(16);
            this.AnchorOffset = binaryReader.ReadPoint();
            this.WidthScale = binaryReader.ReadSingle();
            this.HeightScale = binaryReader.ReadSingle();
            this.UnitHudAuxilaryPanelScalingFlags = ((ScalingFlags)(binaryReader.ReadInt16()));
            this.fieldpad1 = binaryReader.ReadBytes(2);
            this.fieldpad2 = binaryReader.ReadBytes(20);
            this.InterfaceBitmap = binaryReader.ReadTagReference();
            this.DefaultColor = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod = binaryReader.ReadSingle();
            this.FlashDelay = binaryReader.ReadSingle();
            this.NumberOfFlashes = binaryReader.ReadInt16();
            this.UnitHudAuxilaryPanelFlashFlags = ((FlashFlags)(binaryReader.ReadInt16()));
            this.FlashLength = binaryReader.ReadSingle();
            this.DisabledColor = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad3 = binaryReader.ReadBytes(4);
            this.SequenceIndex = binaryReader.ReadInt16();
            this.fieldpad4 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(452));
            this.fieldpad5 = binaryReader.ReadBytes(4);
            this.AnchorOffset0 = binaryReader.ReadPoint();
            this.WidthScale0 = binaryReader.ReadSingle();
            this.HeightScale0 = binaryReader.ReadSingle();
            this.UnitHudAuxilaryPanelUnitHudAuxilaryPanelScalingFlags0 = ((UnitHudAuxilaryPanelScalingFlags0)(binaryReader.ReadInt16()));
            this.fieldpad6 = binaryReader.ReadBytes(2);
            this.fieldpad7 = binaryReader.ReadBytes(20);
            this.MeterBitmap = binaryReader.ReadTagReference();
            this.ColorAtMeterMinimum = binaryReader.ReadColourR1G1B1();
            this.ColorAtMeterMaximum = binaryReader.ReadColourR1G1B1();
            this.FlashColor = binaryReader.ReadColourR1G1B1();
            this.EmptyColor = binaryReader.ReadColourA1R1G1B1();
            this.UnitHudAuxilaryPanelFlags = ((Flags)(binaryReader.ReadByte()));
            this.MinumumMeterValue = binaryReader.ReadByte();
            this.SequenceIndex0 = binaryReader.ReadInt16();
            this.AlphaMultiplier = binaryReader.ReadByte();
            this.AlphaBias = binaryReader.ReadByte();
            this.ValueScale = binaryReader.ReadInt16();
            this.Opacity = binaryReader.ReadSingle();
            this.Translucency = binaryReader.ReadSingle();
            this.DisabledColor0 = binaryReader.ReadColourA1R1G1B1();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            this.fieldpad8 = binaryReader.ReadBytes(4);
            this.MinimumFractionCutoff = binaryReader.ReadSingle();
            this.UnitHudAuxilaryPanelUnitHudAuxilaryPanelFlags0 = ((UnitHudAuxilaryPanelFlags0)(binaryReader.ReadInt32()));
            this.fieldpad9 = binaryReader.ReadBytes(24);
            this.fieldpad10 = binaryReader.ReadBytes(64);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.MultitexOverlay = base.ReadBlockArrayData<GlobalHudMultitextureOverlayDefinition>(binaryReader, pointerQueue.Dequeue());
            this.GNullBlock = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.MultitexOverlay);
            queueableBinaryWriter.Defer(this.GNullBlock);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.Type)));
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.AnchorOffset);
            queueableBinaryWriter.Write(this.WidthScale);
            queueableBinaryWriter.Write(this.HeightScale);
            queueableBinaryWriter.Write(((short)(this.UnitHudAuxilaryPanelScalingFlags)));
            queueableBinaryWriter.Write(this.fieldpad1);
            queueableBinaryWriter.Write(this.fieldpad2);
            queueableBinaryWriter.Write(this.InterfaceBitmap);
            queueableBinaryWriter.Write(this.DefaultColor);
            queueableBinaryWriter.Write(this.FlashingColor);
            queueableBinaryWriter.Write(this.FlashPeriod);
            queueableBinaryWriter.Write(this.FlashDelay);
            queueableBinaryWriter.Write(this.NumberOfFlashes);
            queueableBinaryWriter.Write(((short)(this.UnitHudAuxilaryPanelFlashFlags)));
            queueableBinaryWriter.Write(this.FlashLength);
            queueableBinaryWriter.Write(this.DisabledColor);
            queueableBinaryWriter.Write(this.fieldpad3);
            queueableBinaryWriter.Write(this.SequenceIndex);
            queueableBinaryWriter.Write(this.fieldpad4);
            queueableBinaryWriter.WritePointer(this.MultitexOverlay);
            queueableBinaryWriter.Write(this.fieldpad5);
            queueableBinaryWriter.Write(this.AnchorOffset0);
            queueableBinaryWriter.Write(this.WidthScale0);
            queueableBinaryWriter.Write(this.HeightScale0);
            queueableBinaryWriter.Write(((short)(this.UnitHudAuxilaryPanelUnitHudAuxilaryPanelScalingFlags0)));
            queueableBinaryWriter.Write(this.fieldpad6);
            queueableBinaryWriter.Write(this.fieldpad7);
            queueableBinaryWriter.Write(this.MeterBitmap);
            queueableBinaryWriter.Write(this.ColorAtMeterMinimum);
            queueableBinaryWriter.Write(this.ColorAtMeterMaximum);
            queueableBinaryWriter.Write(this.FlashColor);
            queueableBinaryWriter.Write(this.EmptyColor);
            queueableBinaryWriter.Write(((byte)(this.UnitHudAuxilaryPanelFlags)));
            queueableBinaryWriter.Write(this.MinumumMeterValue);
            queueableBinaryWriter.Write(this.SequenceIndex0);
            queueableBinaryWriter.Write(this.AlphaMultiplier);
            queueableBinaryWriter.Write(this.AlphaBias);
            queueableBinaryWriter.Write(this.ValueScale);
            queueableBinaryWriter.Write(this.Opacity);
            queueableBinaryWriter.Write(this.Translucency);
            queueableBinaryWriter.Write(this.DisabledColor0);
            queueableBinaryWriter.WritePointer(this.GNullBlock);
            queueableBinaryWriter.Write(this.fieldpad8);
            queueableBinaryWriter.Write(this.MinimumFractionCutoff);
            queueableBinaryWriter.Write(((int)(this.UnitHudAuxilaryPanelUnitHudAuxilaryPanelFlags0)));
            queueableBinaryWriter.Write(this.fieldpad9);
            queueableBinaryWriter.Write(this.fieldpad10);
        }
        public enum TypeEnum : short
        {
            IntegratedLight = 0,
        }
        [System.FlagsAttribute()]
        public enum ScalingFlags : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum FlashFlags : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum UnitHudAuxilaryPanelScalingFlags0 : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum Flags : byte
        {
            None = 0,
            UseMinmaxForStateChanges = 1,
            InterpolateBetweenMinmaxFlashColorsAsStateChanges = 2,
            InterpolateColorAlongHsvSpace = 4,
            moreColorsForHsvInterpolation = 8,
            InvertInterpolation = 16,
        }
        [System.FlagsAttribute()]
        public enum UnitHudAuxilaryPanelFlags0 : int
        {
            None = 0,
            ShowOnlyWhenActive = 1,
            FlashOnceIfActivatedWhileDisabled = 2,
        }
    }
}
