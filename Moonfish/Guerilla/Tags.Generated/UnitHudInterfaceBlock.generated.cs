//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("unhi")]
    [TagBlockOriginalNameAttribute("unit_hud_interface_block")]
    public partial class UnitHudInterfaceBlock : GuerillaBlock, IWriteQueueable
    {
        public AnchorEnum Anchor;
        private byte[] fieldpad = new byte[2];
        private byte[] fieldpad0 = new byte[32];
        public Moonfish.Tags.Point AnchorOffset;
        public float WidthScale;
        public float HeightScale;
        public ScalingFlags UnitHudInterfaceScalingFlags;
        private byte[] fieldpad1 = new byte[2];
        private byte[] fieldpad2 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference InterfaceBitmap;
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor;
        public float FlashPeriod;
        public float FlashDelay;
        public short NumberOfFlashes;
        public FlashFlags UnitHudInterfaceFlashFlags;
        public float FlashLength;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor;
        private byte[] fieldpad3 = new byte[4];
        public short SequenceIndex;
        private byte[] fieldpad4 = new byte[2];
        public GlobalHudMultitextureOverlayDefinition[] MultitexOverlay = new GlobalHudMultitextureOverlayDefinition[0];
        private byte[] fieldpad5 = new byte[4];
        public Moonfish.Tags.Point AnchorOffset0;
        public float WidthScale0;
        public float HeightScale0;
        public UnitHudInterfaceScalingFlags0 UnitHudInterfaceUnitHudInterfaceScalingFlags0;
        private byte[] fieldpad6 = new byte[2];
        private byte[] fieldpad7 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference InterfaceBitmap0;
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor0;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor0;
        public float FlashPeriod0;
        public float FlashDelay0;
        public short NumberOfFlashes0;
        public UnitHudInterfaceFlashFlags0 UnitHudInterfaceUnitHudInterfaceFlashFlags0;
        public float FlashLength0;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor0;
        private byte[] fieldpad8 = new byte[4];
        public short SequenceIndex0;
        private byte[] fieldpad9 = new byte[2];
        public GlobalHudMultitextureOverlayDefinition[] MultitexOverlay0 = new GlobalHudMultitextureOverlayDefinition[0];
        private byte[] fieldpad10 = new byte[4];
        public Moonfish.Tags.Point AnchorOffset1;
        public float WidthScale1;
        public float HeightScale1;
        public UnitHudInterfaceScalingFlags1 UnitHudInterfaceUnitHudInterfaceScalingFlags1;
        private byte[] fieldpad11 = new byte[2];
        private byte[] fieldpad12 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference MeterBitmap;
        public Moonfish.Tags.ColourR1G1B1 ColorAtMeterMinimum;
        public Moonfish.Tags.ColourR1G1B1 ColorAtMeterMaximum;
        public Moonfish.Tags.ColourR1G1B1 FlashColor;
        public Moonfish.Tags.ColourA1R1G1B1 EmptyColor;
        public Flags UnitHudInterfaceFlags;
        public byte MinumumMeterValue;
        public short SequenceIndex1;
        public byte AlphaMultiplier;
        public byte AlphaBias;
        public short ValueScale;
        public float Opacity;
        public float Translucency;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor1;
        public GNullBlock[] GNullBlock = new GNullBlock[0];
        private byte[] fieldpad13 = new byte[4];
        public Moonfish.Tags.ColourR1G1B1 OverchargeMinimumColor;
        public Moonfish.Tags.ColourR1G1B1 OverchargeMaximumColor;
        public Moonfish.Tags.ColourR1G1B1 OverchargeFlashColor;
        public Moonfish.Tags.ColourR1G1B1 OverchargeEmptyColor;
        private byte[] fieldpad14 = new byte[16];
        public Moonfish.Tags.Point AnchorOffset2;
        public float WidthScale2;
        public float HeightScale2;
        public UnitHudInterfaceScalingFlags2 UnitHudInterfaceUnitHudInterfaceScalingFlags2;
        private byte[] fieldpad15 = new byte[2];
        private byte[] fieldpad16 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference InterfaceBitmap1;
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor1;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor1;
        public float FlashPeriod1;
        public float FlashDelay1;
        public short NumberOfFlashes1;
        public UnitHudInterfaceFlashFlags1 UnitHudInterfaceUnitHudInterfaceFlashFlags1;
        public float FlashLength1;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor2;
        private byte[] fieldpad17 = new byte[4];
        public short SequenceIndex2;
        private byte[] fieldpad18 = new byte[2];
        public GlobalHudMultitextureOverlayDefinition[] MultitexOverlay1 = new GlobalHudMultitextureOverlayDefinition[0];
        private byte[] fieldpad19 = new byte[4];
        public Moonfish.Tags.Point AnchorOffset3;
        public float WidthScale3;
        public float HeightScale3;
        public UnitHudInterfaceScalingFlags3 UnitHudInterfaceUnitHudInterfaceScalingFlags3;
        private byte[] fieldpad20 = new byte[2];
        private byte[] fieldpad21 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference MeterBitmap0;
        public Moonfish.Tags.ColourR1G1B1 ColorAtMeterMinimum0;
        public Moonfish.Tags.ColourR1G1B1 ColorAtMeterMaximum0;
        public Moonfish.Tags.ColourR1G1B1 FlashColor0;
        public Moonfish.Tags.ColourA1R1G1B1 EmptyColor0;
        public UnitHudInterfaceFlags0 UnitHudInterfaceUnitHudInterfaceFlags0;
        public byte MinumumMeterValue0;
        public short SequenceIndex3;
        public byte AlphaMultiplier0;
        public byte AlphaBias0;
        public short ValueScale0;
        public float Opacity0;
        public float Translucency0;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor3;
        public GNullBlock[] GNullBlock0 = new GNullBlock[0];
        private byte[] fieldpad22 = new byte[4];
        public Moonfish.Tags.ColourR1G1B1 MediumHealthLeftColor;
        public float MaxColorHealthFractionCutoff;
        public float MinColorHealthFractionCutoff;
        private byte[] fieldpad23 = new byte[20];
        public Moonfish.Tags.Point AnchorOffset4;
        public float WidthScale4;
        public float HeightScale4;
        public UnitHudInterfaceScalingFlags4 UnitHudInterfaceUnitHudInterfaceScalingFlags4;
        private byte[] fieldpad24 = new byte[2];
        private byte[] fieldpad25 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference InterfaceBitmap2;
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor2;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor2;
        public float FlashPeriod2;
        public float FlashDelay2;
        public short NumberOfFlashes2;
        public UnitHudInterfaceFlashFlags2 UnitHudInterfaceUnitHudInterfaceFlashFlags2;
        public float FlashLength2;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor4;
        private byte[] fieldpad26 = new byte[4];
        public short SequenceIndex4;
        private byte[] fieldpad27 = new byte[2];
        public GlobalHudMultitextureOverlayDefinition[] MultitexOverlay2 = new GlobalHudMultitextureOverlayDefinition[0];
        private byte[] fieldpad28 = new byte[4];
        public Moonfish.Tags.Point AnchorOffset5;
        public float WidthScale5;
        public float HeightScale5;
        public UnitHudInterfaceScalingFlags5 UnitHudInterfaceUnitHudInterfaceScalingFlags5;
        private byte[] fieldpad29 = new byte[2];
        private byte[] fieldpad30 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference InterfaceBitmap3;
        public Moonfish.Tags.ColourA1R1G1B1 DefaultColor3;
        public Moonfish.Tags.ColourA1R1G1B1 FlashingColor3;
        public float FlashPeriod3;
        public float FlashDelay3;
        public short NumberOfFlashes3;
        public UnitHudInterfaceFlashFlags3 UnitHudInterfaceUnitHudInterfaceFlashFlags3;
        public float FlashLength3;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor5;
        private byte[] fieldpad31 = new byte[4];
        public short SequenceIndex5;
        private byte[] fieldpad32 = new byte[2];
        public GlobalHudMultitextureOverlayDefinition[] MultitexOverlay3 = new GlobalHudMultitextureOverlayDefinition[0];
        private byte[] fieldpad33 = new byte[4];
        private byte[] fieldpad34 = new byte[32];
        /// <summary>
        /// The blips use this as a reference point
        /// </summary>
        public Moonfish.Tags.Point AnchorOffset6;
        public float WidthScale6;
        public float HeightScale6;
        public UnitHudInterfaceScalingFlags6 UnitHudInterfaceUnitHudInterfaceScalingFlags6;
        private byte[] fieldpad35 = new byte[2];
        private byte[] fieldpad36 = new byte[20];
        public UnitHudInterfaceAnchorEnum UnitHudInterfaceUnitHudInterfaceAnchor;
        private byte[] fieldpad37 = new byte[2];
        private byte[] fieldpad38 = new byte[32];
        public UnitHudAuxilaryOverlayBlock[] Overlays = new UnitHudAuxilaryOverlayBlock[0];
        private byte[] fieldpad39 = new byte[16];
        public UnitHudSoundBlock[] Sounds = new UnitHudSoundBlock[0];
        public UnitHudAuxilaryPanelBlock[] Meters = new UnitHudAuxilaryPanelBlock[0];
        [Moonfish.Tags.TagReferenceAttribute("nhdt")]
        public Moonfish.Tags.TagReference NewHud;
        private byte[] fieldpad40 = new byte[356];
        private byte[] fieldpad41 = new byte[48];
        public override int SerializedSize
        {
            get
            {
                return 1289;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Anchor = ((AnchorEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.fieldpad0 = binaryReader.ReadBytes(32);
            this.AnchorOffset = binaryReader.ReadPoint();
            this.WidthScale = binaryReader.ReadSingle();
            this.HeightScale = binaryReader.ReadSingle();
            this.UnitHudInterfaceScalingFlags = ((ScalingFlags)(binaryReader.ReadInt16()));
            this.fieldpad1 = binaryReader.ReadBytes(2);
            this.fieldpad2 = binaryReader.ReadBytes(20);
            this.InterfaceBitmap = binaryReader.ReadTagReference();
            this.DefaultColor = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod = binaryReader.ReadSingle();
            this.FlashDelay = binaryReader.ReadSingle();
            this.NumberOfFlashes = binaryReader.ReadInt16();
            this.UnitHudInterfaceFlashFlags = ((FlashFlags)(binaryReader.ReadInt16()));
            this.FlashLength = binaryReader.ReadSingle();
            this.DisabledColor = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad3 = binaryReader.ReadBytes(4);
            this.SequenceIndex = binaryReader.ReadInt16();
            this.fieldpad4 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(452));
            this.fieldpad5 = binaryReader.ReadBytes(4);
            this.AnchorOffset0 = binaryReader.ReadPoint();
            this.WidthScale0 = binaryReader.ReadSingle();
            this.HeightScale0 = binaryReader.ReadSingle();
            this.UnitHudInterfaceUnitHudInterfaceScalingFlags0 = ((UnitHudInterfaceScalingFlags0)(binaryReader.ReadInt16()));
            this.fieldpad6 = binaryReader.ReadBytes(2);
            this.fieldpad7 = binaryReader.ReadBytes(20);
            this.InterfaceBitmap0 = binaryReader.ReadTagReference();
            this.DefaultColor0 = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor0 = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod0 = binaryReader.ReadSingle();
            this.FlashDelay0 = binaryReader.ReadSingle();
            this.NumberOfFlashes0 = binaryReader.ReadInt16();
            this.UnitHudInterfaceUnitHudInterfaceFlashFlags0 = ((UnitHudInterfaceFlashFlags0)(binaryReader.ReadInt16()));
            this.FlashLength0 = binaryReader.ReadSingle();
            this.DisabledColor0 = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad8 = binaryReader.ReadBytes(4);
            this.SequenceIndex0 = binaryReader.ReadInt16();
            this.fieldpad9 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(452));
            this.fieldpad10 = binaryReader.ReadBytes(4);
            this.AnchorOffset1 = binaryReader.ReadPoint();
            this.WidthScale1 = binaryReader.ReadSingle();
            this.HeightScale1 = binaryReader.ReadSingle();
            this.UnitHudInterfaceUnitHudInterfaceScalingFlags1 = ((UnitHudInterfaceScalingFlags1)(binaryReader.ReadInt16()));
            this.fieldpad11 = binaryReader.ReadBytes(2);
            this.fieldpad12 = binaryReader.ReadBytes(20);
            this.MeterBitmap = binaryReader.ReadTagReference();
            this.ColorAtMeterMinimum = binaryReader.ReadColourR1G1B1();
            this.ColorAtMeterMaximum = binaryReader.ReadColourR1G1B1();
            this.FlashColor = binaryReader.ReadColourR1G1B1();
            this.EmptyColor = binaryReader.ReadColourA1R1G1B1();
            this.UnitHudInterfaceFlags = ((Flags)(binaryReader.ReadByte()));
            this.MinumumMeterValue = binaryReader.ReadByte();
            this.SequenceIndex1 = binaryReader.ReadInt16();
            this.AlphaMultiplier = binaryReader.ReadByte();
            this.AlphaBias = binaryReader.ReadByte();
            this.ValueScale = binaryReader.ReadInt16();
            this.Opacity = binaryReader.ReadSingle();
            this.Translucency = binaryReader.ReadSingle();
            this.DisabledColor1 = binaryReader.ReadColourA1R1G1B1();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            this.fieldpad13 = binaryReader.ReadBytes(4);
            this.OverchargeMinimumColor = binaryReader.ReadColourR1G1B1();
            this.OverchargeMaximumColor = binaryReader.ReadColourR1G1B1();
            this.OverchargeFlashColor = binaryReader.ReadColourR1G1B1();
            this.OverchargeEmptyColor = binaryReader.ReadColourR1G1B1();
            this.fieldpad14 = binaryReader.ReadBytes(16);
            this.AnchorOffset2 = binaryReader.ReadPoint();
            this.WidthScale2 = binaryReader.ReadSingle();
            this.HeightScale2 = binaryReader.ReadSingle();
            this.UnitHudInterfaceUnitHudInterfaceScalingFlags2 = ((UnitHudInterfaceScalingFlags2)(binaryReader.ReadInt16()));
            this.fieldpad15 = binaryReader.ReadBytes(2);
            this.fieldpad16 = binaryReader.ReadBytes(20);
            this.InterfaceBitmap1 = binaryReader.ReadTagReference();
            this.DefaultColor1 = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor1 = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod1 = binaryReader.ReadSingle();
            this.FlashDelay1 = binaryReader.ReadSingle();
            this.NumberOfFlashes1 = binaryReader.ReadInt16();
            this.UnitHudInterfaceUnitHudInterfaceFlashFlags1 = ((UnitHudInterfaceFlashFlags1)(binaryReader.ReadInt16()));
            this.FlashLength1 = binaryReader.ReadSingle();
            this.DisabledColor2 = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad17 = binaryReader.ReadBytes(4);
            this.SequenceIndex2 = binaryReader.ReadInt16();
            this.fieldpad18 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(452));
            this.fieldpad19 = binaryReader.ReadBytes(4);
            this.AnchorOffset3 = binaryReader.ReadPoint();
            this.WidthScale3 = binaryReader.ReadSingle();
            this.HeightScale3 = binaryReader.ReadSingle();
            this.UnitHudInterfaceUnitHudInterfaceScalingFlags3 = ((UnitHudInterfaceScalingFlags3)(binaryReader.ReadInt16()));
            this.fieldpad20 = binaryReader.ReadBytes(2);
            this.fieldpad21 = binaryReader.ReadBytes(20);
            this.MeterBitmap0 = binaryReader.ReadTagReference();
            this.ColorAtMeterMinimum0 = binaryReader.ReadColourR1G1B1();
            this.ColorAtMeterMaximum0 = binaryReader.ReadColourR1G1B1();
            this.FlashColor0 = binaryReader.ReadColourR1G1B1();
            this.EmptyColor0 = binaryReader.ReadColourA1R1G1B1();
            this.UnitHudInterfaceUnitHudInterfaceFlags0 = ((UnitHudInterfaceFlags0)(binaryReader.ReadByte()));
            this.MinumumMeterValue0 = binaryReader.ReadByte();
            this.SequenceIndex3 = binaryReader.ReadInt16();
            this.AlphaMultiplier0 = binaryReader.ReadByte();
            this.AlphaBias0 = binaryReader.ReadByte();
            this.ValueScale0 = binaryReader.ReadInt16();
            this.Opacity0 = binaryReader.ReadSingle();
            this.Translucency0 = binaryReader.ReadSingle();
            this.DisabledColor3 = binaryReader.ReadColourA1R1G1B1();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            this.fieldpad22 = binaryReader.ReadBytes(4);
            this.MediumHealthLeftColor = binaryReader.ReadColourR1G1B1();
            this.MaxColorHealthFractionCutoff = binaryReader.ReadSingle();
            this.MinColorHealthFractionCutoff = binaryReader.ReadSingle();
            this.fieldpad23 = binaryReader.ReadBytes(20);
            this.AnchorOffset4 = binaryReader.ReadPoint();
            this.WidthScale4 = binaryReader.ReadSingle();
            this.HeightScale4 = binaryReader.ReadSingle();
            this.UnitHudInterfaceUnitHudInterfaceScalingFlags4 = ((UnitHudInterfaceScalingFlags4)(binaryReader.ReadInt16()));
            this.fieldpad24 = binaryReader.ReadBytes(2);
            this.fieldpad25 = binaryReader.ReadBytes(20);
            this.InterfaceBitmap2 = binaryReader.ReadTagReference();
            this.DefaultColor2 = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor2 = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod2 = binaryReader.ReadSingle();
            this.FlashDelay2 = binaryReader.ReadSingle();
            this.NumberOfFlashes2 = binaryReader.ReadInt16();
            this.UnitHudInterfaceUnitHudInterfaceFlashFlags2 = ((UnitHudInterfaceFlashFlags2)(binaryReader.ReadInt16()));
            this.FlashLength2 = binaryReader.ReadSingle();
            this.DisabledColor4 = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad26 = binaryReader.ReadBytes(4);
            this.SequenceIndex4 = binaryReader.ReadInt16();
            this.fieldpad27 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(452));
            this.fieldpad28 = binaryReader.ReadBytes(4);
            this.AnchorOffset5 = binaryReader.ReadPoint();
            this.WidthScale5 = binaryReader.ReadSingle();
            this.HeightScale5 = binaryReader.ReadSingle();
            this.UnitHudInterfaceUnitHudInterfaceScalingFlags5 = ((UnitHudInterfaceScalingFlags5)(binaryReader.ReadInt16()));
            this.fieldpad29 = binaryReader.ReadBytes(2);
            this.fieldpad30 = binaryReader.ReadBytes(20);
            this.InterfaceBitmap3 = binaryReader.ReadTagReference();
            this.DefaultColor3 = binaryReader.ReadColourA1R1G1B1();
            this.FlashingColor3 = binaryReader.ReadColourA1R1G1B1();
            this.FlashPeriod3 = binaryReader.ReadSingle();
            this.FlashDelay3 = binaryReader.ReadSingle();
            this.NumberOfFlashes3 = binaryReader.ReadInt16();
            this.UnitHudInterfaceUnitHudInterfaceFlashFlags3 = ((UnitHudInterfaceFlashFlags3)(binaryReader.ReadInt16()));
            this.FlashLength3 = binaryReader.ReadSingle();
            this.DisabledColor5 = binaryReader.ReadColourA1R1G1B1();
            this.fieldpad31 = binaryReader.ReadBytes(4);
            this.SequenceIndex5 = binaryReader.ReadInt16();
            this.fieldpad32 = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(452));
            this.fieldpad33 = binaryReader.ReadBytes(4);
            this.fieldpad34 = binaryReader.ReadBytes(32);
            this.AnchorOffset6 = binaryReader.ReadPoint();
            this.WidthScale6 = binaryReader.ReadSingle();
            this.HeightScale6 = binaryReader.ReadSingle();
            this.UnitHudInterfaceUnitHudInterfaceScalingFlags6 = ((UnitHudInterfaceScalingFlags6)(binaryReader.ReadInt16()));
            this.fieldpad35 = binaryReader.ReadBytes(2);
            this.fieldpad36 = binaryReader.ReadBytes(20);
            this.UnitHudInterfaceUnitHudInterfaceAnchor = ((UnitHudInterfaceAnchorEnum)(binaryReader.ReadInt16()));
            this.fieldpad37 = binaryReader.ReadBytes(2);
            this.fieldpad38 = binaryReader.ReadBytes(32);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(120));
            this.fieldpad39 = binaryReader.ReadBytes(16);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(48));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(297));
            this.NewHud = binaryReader.ReadTagReference();
            this.fieldpad40 = binaryReader.ReadBytes(356);
            this.fieldpad41 = binaryReader.ReadBytes(48);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.MultitexOverlay = base.ReadBlockArrayData<GlobalHudMultitextureOverlayDefinition>(binaryReader, pointerQueue.Dequeue());
            this.MultitexOverlay0 = base.ReadBlockArrayData<GlobalHudMultitextureOverlayDefinition>(binaryReader, pointerQueue.Dequeue());
            this.GNullBlock = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
            this.MultitexOverlay1 = base.ReadBlockArrayData<GlobalHudMultitextureOverlayDefinition>(binaryReader, pointerQueue.Dequeue());
            this.GNullBlock0 = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
            this.MultitexOverlay2 = base.ReadBlockArrayData<GlobalHudMultitextureOverlayDefinition>(binaryReader, pointerQueue.Dequeue());
            this.MultitexOverlay3 = base.ReadBlockArrayData<GlobalHudMultitextureOverlayDefinition>(binaryReader, pointerQueue.Dequeue());
            this.Overlays = base.ReadBlockArrayData<UnitHudAuxilaryOverlayBlock>(binaryReader, pointerQueue.Dequeue());
            this.Sounds = base.ReadBlockArrayData<UnitHudSoundBlock>(binaryReader, pointerQueue.Dequeue());
            this.Meters = base.ReadBlockArrayData<UnitHudAuxilaryPanelBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.QueueWrites(queueableBinaryWriter);
            queueableBinaryWriter.QueueWrite(this.MultitexOverlay);
            queueableBinaryWriter.QueueWrite(this.MultitexOverlay0);
            queueableBinaryWriter.QueueWrite(this.GNullBlock);
            queueableBinaryWriter.QueueWrite(this.MultitexOverlay1);
            queueableBinaryWriter.QueueWrite(this.GNullBlock0);
            queueableBinaryWriter.QueueWrite(this.MultitexOverlay2);
            queueableBinaryWriter.QueueWrite(this.MultitexOverlay3);
            queueableBinaryWriter.QueueWrite(this.Overlays);
            queueableBinaryWriter.QueueWrite(this.Sounds);
            queueableBinaryWriter.QueueWrite(this.Meters);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.Anchor)));
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.AnchorOffset);
            queueableBinaryWriter.Write(this.WidthScale);
            queueableBinaryWriter.Write(this.HeightScale);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceScalingFlags)));
            queueableBinaryWriter.Write(this.fieldpad1);
            queueableBinaryWriter.Write(this.fieldpad2);
            queueableBinaryWriter.Write(this.InterfaceBitmap);
            queueableBinaryWriter.Write(this.DefaultColor);
            queueableBinaryWriter.Write(this.FlashingColor);
            queueableBinaryWriter.Write(this.FlashPeriod);
            queueableBinaryWriter.Write(this.FlashDelay);
            queueableBinaryWriter.Write(this.NumberOfFlashes);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceFlashFlags)));
            queueableBinaryWriter.Write(this.FlashLength);
            queueableBinaryWriter.Write(this.DisabledColor);
            queueableBinaryWriter.Write(this.fieldpad3);
            queueableBinaryWriter.Write(this.SequenceIndex);
            queueableBinaryWriter.Write(this.fieldpad4);
            queueableBinaryWriter.WritePointer(this.MultitexOverlay);
            queueableBinaryWriter.Write(this.fieldpad5);
            queueableBinaryWriter.Write(this.AnchorOffset0);
            queueableBinaryWriter.Write(this.WidthScale0);
            queueableBinaryWriter.Write(this.HeightScale0);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceScalingFlags0)));
            queueableBinaryWriter.Write(this.fieldpad6);
            queueableBinaryWriter.Write(this.fieldpad7);
            queueableBinaryWriter.Write(this.InterfaceBitmap0);
            queueableBinaryWriter.Write(this.DefaultColor0);
            queueableBinaryWriter.Write(this.FlashingColor0);
            queueableBinaryWriter.Write(this.FlashPeriod0);
            queueableBinaryWriter.Write(this.FlashDelay0);
            queueableBinaryWriter.Write(this.NumberOfFlashes0);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceFlashFlags0)));
            queueableBinaryWriter.Write(this.FlashLength0);
            queueableBinaryWriter.Write(this.DisabledColor0);
            queueableBinaryWriter.Write(this.fieldpad8);
            queueableBinaryWriter.Write(this.SequenceIndex0);
            queueableBinaryWriter.Write(this.fieldpad9);
            queueableBinaryWriter.WritePointer(this.MultitexOverlay0);
            queueableBinaryWriter.Write(this.fieldpad10);
            queueableBinaryWriter.Write(this.AnchorOffset1);
            queueableBinaryWriter.Write(this.WidthScale1);
            queueableBinaryWriter.Write(this.HeightScale1);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceScalingFlags1)));
            queueableBinaryWriter.Write(this.fieldpad11);
            queueableBinaryWriter.Write(this.fieldpad12);
            queueableBinaryWriter.Write(this.MeterBitmap);
            queueableBinaryWriter.Write(this.ColorAtMeterMinimum);
            queueableBinaryWriter.Write(this.ColorAtMeterMaximum);
            queueableBinaryWriter.Write(this.FlashColor);
            queueableBinaryWriter.Write(this.EmptyColor);
            queueableBinaryWriter.Write(((byte)(this.UnitHudInterfaceFlags)));
            queueableBinaryWriter.Write(this.MinumumMeterValue);
            queueableBinaryWriter.Write(this.SequenceIndex1);
            queueableBinaryWriter.Write(this.AlphaMultiplier);
            queueableBinaryWriter.Write(this.AlphaBias);
            queueableBinaryWriter.Write(this.ValueScale);
            queueableBinaryWriter.Write(this.Opacity);
            queueableBinaryWriter.Write(this.Translucency);
            queueableBinaryWriter.Write(this.DisabledColor1);
            queueableBinaryWriter.WritePointer(this.GNullBlock);
            queueableBinaryWriter.Write(this.fieldpad13);
            queueableBinaryWriter.Write(this.OverchargeMinimumColor);
            queueableBinaryWriter.Write(this.OverchargeMaximumColor);
            queueableBinaryWriter.Write(this.OverchargeFlashColor);
            queueableBinaryWriter.Write(this.OverchargeEmptyColor);
            queueableBinaryWriter.Write(this.fieldpad14);
            queueableBinaryWriter.Write(this.AnchorOffset2);
            queueableBinaryWriter.Write(this.WidthScale2);
            queueableBinaryWriter.Write(this.HeightScale2);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceScalingFlags2)));
            queueableBinaryWriter.Write(this.fieldpad15);
            queueableBinaryWriter.Write(this.fieldpad16);
            queueableBinaryWriter.Write(this.InterfaceBitmap1);
            queueableBinaryWriter.Write(this.DefaultColor1);
            queueableBinaryWriter.Write(this.FlashingColor1);
            queueableBinaryWriter.Write(this.FlashPeriod1);
            queueableBinaryWriter.Write(this.FlashDelay1);
            queueableBinaryWriter.Write(this.NumberOfFlashes1);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceFlashFlags1)));
            queueableBinaryWriter.Write(this.FlashLength1);
            queueableBinaryWriter.Write(this.DisabledColor2);
            queueableBinaryWriter.Write(this.fieldpad17);
            queueableBinaryWriter.Write(this.SequenceIndex2);
            queueableBinaryWriter.Write(this.fieldpad18);
            queueableBinaryWriter.WritePointer(this.MultitexOverlay1);
            queueableBinaryWriter.Write(this.fieldpad19);
            queueableBinaryWriter.Write(this.AnchorOffset3);
            queueableBinaryWriter.Write(this.WidthScale3);
            queueableBinaryWriter.Write(this.HeightScale3);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceScalingFlags3)));
            queueableBinaryWriter.Write(this.fieldpad20);
            queueableBinaryWriter.Write(this.fieldpad21);
            queueableBinaryWriter.Write(this.MeterBitmap0);
            queueableBinaryWriter.Write(this.ColorAtMeterMinimum0);
            queueableBinaryWriter.Write(this.ColorAtMeterMaximum0);
            queueableBinaryWriter.Write(this.FlashColor0);
            queueableBinaryWriter.Write(this.EmptyColor0);
            queueableBinaryWriter.Write(((byte)(this.UnitHudInterfaceUnitHudInterfaceFlags0)));
            queueableBinaryWriter.Write(this.MinumumMeterValue0);
            queueableBinaryWriter.Write(this.SequenceIndex3);
            queueableBinaryWriter.Write(this.AlphaMultiplier0);
            queueableBinaryWriter.Write(this.AlphaBias0);
            queueableBinaryWriter.Write(this.ValueScale0);
            queueableBinaryWriter.Write(this.Opacity0);
            queueableBinaryWriter.Write(this.Translucency0);
            queueableBinaryWriter.Write(this.DisabledColor3);
            queueableBinaryWriter.WritePointer(this.GNullBlock0);
            queueableBinaryWriter.Write(this.fieldpad22);
            queueableBinaryWriter.Write(this.MediumHealthLeftColor);
            queueableBinaryWriter.Write(this.MaxColorHealthFractionCutoff);
            queueableBinaryWriter.Write(this.MinColorHealthFractionCutoff);
            queueableBinaryWriter.Write(this.fieldpad23);
            queueableBinaryWriter.Write(this.AnchorOffset4);
            queueableBinaryWriter.Write(this.WidthScale4);
            queueableBinaryWriter.Write(this.HeightScale4);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceScalingFlags4)));
            queueableBinaryWriter.Write(this.fieldpad24);
            queueableBinaryWriter.Write(this.fieldpad25);
            queueableBinaryWriter.Write(this.InterfaceBitmap2);
            queueableBinaryWriter.Write(this.DefaultColor2);
            queueableBinaryWriter.Write(this.FlashingColor2);
            queueableBinaryWriter.Write(this.FlashPeriod2);
            queueableBinaryWriter.Write(this.FlashDelay2);
            queueableBinaryWriter.Write(this.NumberOfFlashes2);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceFlashFlags2)));
            queueableBinaryWriter.Write(this.FlashLength2);
            queueableBinaryWriter.Write(this.DisabledColor4);
            queueableBinaryWriter.Write(this.fieldpad26);
            queueableBinaryWriter.Write(this.SequenceIndex4);
            queueableBinaryWriter.Write(this.fieldpad27);
            queueableBinaryWriter.WritePointer(this.MultitexOverlay2);
            queueableBinaryWriter.Write(this.fieldpad28);
            queueableBinaryWriter.Write(this.AnchorOffset5);
            queueableBinaryWriter.Write(this.WidthScale5);
            queueableBinaryWriter.Write(this.HeightScale5);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceScalingFlags5)));
            queueableBinaryWriter.Write(this.fieldpad29);
            queueableBinaryWriter.Write(this.fieldpad30);
            queueableBinaryWriter.Write(this.InterfaceBitmap3);
            queueableBinaryWriter.Write(this.DefaultColor3);
            queueableBinaryWriter.Write(this.FlashingColor3);
            queueableBinaryWriter.Write(this.FlashPeriod3);
            queueableBinaryWriter.Write(this.FlashDelay3);
            queueableBinaryWriter.Write(this.NumberOfFlashes3);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceFlashFlags3)));
            queueableBinaryWriter.Write(this.FlashLength3);
            queueableBinaryWriter.Write(this.DisabledColor5);
            queueableBinaryWriter.Write(this.fieldpad31);
            queueableBinaryWriter.Write(this.SequenceIndex5);
            queueableBinaryWriter.Write(this.fieldpad32);
            queueableBinaryWriter.WritePointer(this.MultitexOverlay3);
            queueableBinaryWriter.Write(this.fieldpad33);
            queueableBinaryWriter.Write(this.fieldpad34);
            queueableBinaryWriter.Write(this.AnchorOffset6);
            queueableBinaryWriter.Write(this.WidthScale6);
            queueableBinaryWriter.Write(this.HeightScale6);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceScalingFlags6)));
            queueableBinaryWriter.Write(this.fieldpad35);
            queueableBinaryWriter.Write(this.fieldpad36);
            queueableBinaryWriter.Write(((short)(this.UnitHudInterfaceUnitHudInterfaceAnchor)));
            queueableBinaryWriter.Write(this.fieldpad37);
            queueableBinaryWriter.Write(this.fieldpad38);
            queueableBinaryWriter.WritePointer(this.Overlays);
            queueableBinaryWriter.Write(this.fieldpad39);
            queueableBinaryWriter.WritePointer(this.Sounds);
            queueableBinaryWriter.WritePointer(this.Meters);
            queueableBinaryWriter.Write(this.NewHud);
            queueableBinaryWriter.Write(this.fieldpad40);
            queueableBinaryWriter.Write(this.fieldpad41);
        }
        public enum AnchorEnum : short
        {
            TopLeft = 0,
            TopRight = 1,
            BottomLeft = 2,
            BottomRight = 3,
            Center = 4,
            Crosshair = 5,
        }
        [System.FlagsAttribute()]
        public enum ScalingFlags : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum FlashFlags : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceScalingFlags0 : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceFlashFlags0 : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceScalingFlags1 : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum Flags : byte
        {
            None = 0,
            UseMinmaxForStateChanges = 1,
            InterpolateBetweenMinmaxFlashColorsAsStateChanges = 2,
            InterpolateColorAlongHsvSpace = 4,
            moreColorsForHsvInterpolation = 8,
            InvertInterpolation = 16,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceScalingFlags2 : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceFlashFlags1 : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceScalingFlags3 : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceFlags0 : byte
        {
            None = 0,
            UseMinmaxForStateChanges = 1,
            InterpolateBetweenMinmaxFlashColorsAsStateChanges = 2,
            InterpolateColorAlongHsvSpace = 4,
            moreColorsForHsvInterpolation = 8,
            InvertInterpolation = 16,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceScalingFlags4 : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceFlashFlags2 : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceScalingFlags5 : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceFlashFlags3 : short
        {
            None = 0,
            ReverseDefaultflashingColors = 1,
        }
        [System.FlagsAttribute()]
        public enum UnitHudInterfaceScalingFlags6 : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        public enum UnitHudInterfaceAnchorEnum : short
        {
            TopLeft = 0,
            TopRight = 1,
            BottomLeft = 2,
            BottomRight = 3,
            Center = 4,
            Crosshair = 5,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Unhi = ((TagClass)("unhi"));
    }
}
