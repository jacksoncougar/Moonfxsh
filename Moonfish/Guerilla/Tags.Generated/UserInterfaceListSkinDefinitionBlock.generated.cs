//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagClassAttribute("skin")]
    [TagBlockOriginalNameAttribute("user_interface_list_skin_definition_block")]
    public partial class UserInterfaceListSkinDefinitionBlock : GuerillaBlock, IWriteQueueable
    {
        public ListFlags UserInterfaceListSkinDefinitionListFlags;
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference ArrowsBitmap;
        public Moonfish.Tags.Point UparrowsOffset;
        public Moonfish.Tags.Point DownarrowsOffset;
        public SingleAnimationReferenceBlock[] ItemAnimations = new SingleAnimationReferenceBlock[0];
        public TextBlockReferenceBlock[] TextBlocks = new TextBlockReferenceBlock[0];
        public BitmapBlockReferenceBlock[] BitmapBlocks = new BitmapBlockReferenceBlock[0];
        public HudBlockReferenceBlock[] HudBlocks = new HudBlockReferenceBlock[0];
        public PlayerBlockReferenceBlock[] PlayerBlocks = new PlayerBlockReferenceBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 60;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.UserInterfaceListSkinDefinitionListFlags = ((ListFlags)(binaryReader.ReadInt32()));
            this.ArrowsBitmap = binaryReader.ReadTagReference();
            this.UparrowsOffset = binaryReader.ReadPoint();
            this.DownarrowsOffset = binaryReader.ReadPoint();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(16));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(44));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(56));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(36));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(24));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.ItemAnimations = base.ReadBlockArrayData<SingleAnimationReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.TextBlocks = base.ReadBlockArrayData<TextBlockReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.BitmapBlocks = base.ReadBlockArrayData<BitmapBlockReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.HudBlocks = base.ReadBlockArrayData<HudBlockReferenceBlock>(binaryReader, pointerQueue.Dequeue());
            this.PlayerBlocks = base.ReadBlockArrayData<PlayerBlockReferenceBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void Defer(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Defer(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.ItemAnimations);
            queueableBinaryWriter.Defer(this.TextBlocks);
            queueableBinaryWriter.Defer(this.BitmapBlocks);
            queueableBinaryWriter.Defer(this.HudBlocks);
            queueableBinaryWriter.Defer(this.PlayerBlocks);
        }
        public override void Write(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((int)(this.UserInterfaceListSkinDefinitionListFlags)));
            queueableBinaryWriter.Write(this.ArrowsBitmap);
            queueableBinaryWriter.Write(this.UparrowsOffset);
            queueableBinaryWriter.Write(this.DownarrowsOffset);
            queueableBinaryWriter.WritePointer(this.ItemAnimations);
            queueableBinaryWriter.WritePointer(this.TextBlocks);
            queueableBinaryWriter.WritePointer(this.BitmapBlocks);
            queueableBinaryWriter.WritePointer(this.HudBlocks);
            queueableBinaryWriter.WritePointer(this.PlayerBlocks);
        }
        [System.FlagsAttribute()]
        public enum ListFlags : int
        {
            None = 0,
            Unused = 1,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Skin = ((TagClass)("skin"));
    }
}
