//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("vehicle_suspension_block")]
    public partial class VehicleSuspensionBlock : GuerillaBlock, IWriteDeferrable
    {
        public Moonfish.Tags.StringIdent Label;
        public AnimationIndexStructBlock Animation = new AnimationIndexStructBlock();
        public Moonfish.Tags.StringIdent MarkerName;
        public float MassPointOffset;
        public float FullExtensionGroundDepth;
        public float FullCompressionGroundDepth;
        /// <summary>
        /// Only Necessary for suspensions with a destroyed state
        /// </summary>
        public Moonfish.Tags.StringIdent RegionName;
        public float DestroyedMassPointOffset;
        public float DestroyedFullExtensionGroundDepth;
        public float DestroyedFullCompressionGroundDepth;
        public override int SerializedSize
        {
            get
            {
                return 40;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Label = binaryReader.ReadStringIdent();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Animation.ReadFields(binaryReader)));
            this.MarkerName = binaryReader.ReadStringIdent();
            this.MassPointOffset = binaryReader.ReadSingle();
            this.FullExtensionGroundDepth = binaryReader.ReadSingle();
            this.FullCompressionGroundDepth = binaryReader.ReadSingle();
            this.RegionName = binaryReader.ReadStringIdent();
            this.DestroyedMassPointOffset = binaryReader.ReadSingle();
            this.DestroyedFullExtensionGroundDepth = binaryReader.ReadSingle();
            this.DestroyedFullCompressionGroundDepth = binaryReader.ReadSingle();
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Animation.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            this.Animation.DeferReferences(writer);
            this.Animation.DeferReferences(writer);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.Label);
            this.Animation.Write(writer);
            writer.Write(this.MarkerName);
            writer.Write(this.MassPointOffset);
            writer.Write(this.FullExtensionGroundDepth);
            writer.Write(this.FullCompressionGroundDepth);
            writer.Write(this.RegionName);
            writer.Write(this.DestroyedMassPointOffset);
            writer.Write(this.DestroyedFullExtensionGroundDepth);
            writer.Write(this.DestroyedFullCompressionGroundDepth);
        }
    }
}
