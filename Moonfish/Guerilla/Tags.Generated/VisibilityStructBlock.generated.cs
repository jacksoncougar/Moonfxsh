//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("visibility_struct_block")]
    public partial class VisibilityStructBlock : GuerillaBlock, IWriteDeferrable
    {
        public short ProjectionCount;
        public short ClusterCount;
        public short VolumeCount;
        private byte[] fieldpad = new byte[2];
        private byte[] Projections;
        private byte[] VisibilityClusters;
        private byte[] ClusterRemapTable;
        private byte[] VisibilityVolumes;
        public override int SerializedSize
        {
            get
            {
                return 40;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.ProjectionCount = binaryReader.ReadInt16();
            this.ClusterCount = binaryReader.ReadInt16();
            this.VolumeCount = binaryReader.ReadInt16();
            this.fieldpad = binaryReader.ReadBytes(2);
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(1));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Projections = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
            this.VisibilityClusters = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
            this.ClusterRemapTable = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
            this.VisibilityVolumes = base.ReadDataByteArray(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Projections);
            writer.Defer(this.VisibilityClusters);
            writer.Defer(this.ClusterRemapTable);
            writer.Defer(this.VisibilityVolumes);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(this.ProjectionCount);
            writer.Write(this.ClusterCount);
            writer.Write(this.VolumeCount);
            writer.Write(this.fieldpad);
            writer.WritePointer(this.Projections);
            writer.WritePointer(this.VisibilityClusters);
            writer.WritePointer(this.ClusterRemapTable);
            writer.WritePointer(this.VisibilityVolumes);
        }
    }
}
