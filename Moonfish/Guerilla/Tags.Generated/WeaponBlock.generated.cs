//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [TagClassAttribute("weap")]
    public partial class WeaponBlock : ItemBlock, IWriteQueueable
    {
        public WeaponFlags WeaponWeaponFlags;
        public Moonfish.Tags.StringIdent FieldOldStringId;
        public SecondaryTriggerModeEnum SecondaryTriggerMode;
        public short MaximumAlternateShotsLoaded;
        public float TurnOnTime;
        public float ReadyTime;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference ReadyEffect;
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference ReadyDamageEffect;
        public float HeatRecoveryThreshold;
        public float OverheatedThreshold;
        public float HeatDetonationThreshold;
        public float HeatDetonationFraction;
        public float HeatLossPerSecond;
        public float HeatIllumination;
        public float OverheatedHeatLossPerSecond;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference Overheated;
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference OverheatedDamageEffect;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference Detonation;
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference DetonationDamageEffect0;
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference PlayerMeleeDamage;
        [Moonfish.Tags.TagReferenceAttribute("jpt!")]
        public Moonfish.Tags.TagReference PlayerMeleeResponse;
        public MeleeAimAssistStructBlock MeleeAimAssist = new MeleeAimAssistStructBlock();
        public MeleeDamageParametersStructBlock MeleeDamageParameters = new MeleeDamageParametersStructBlock();
        public MeleeDamageReportingTypeEnum MeleeDamageReportingType;
        private byte[] fieldpad3 = new byte[1];
        public short MagnificationLevels;
        public Moonfish.Model.Range MagnificationRange;
        public AimAssistStructBlock WeaponAimAssist = new AimAssistStructBlock();
        public MovementPenalizedEnum MovementPenalized;
        private byte[] fieldpad4 = new byte[2];
        public float ForwardMovementPenalty;
        public float SidewaysMovementPenalty;
        public float AIScariness;
        public float WeaponPoweronTime;
        public float WeaponPoweroffTime;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference WeaponPoweronEffect;
        [Moonfish.Tags.TagReferenceAttribute("null")]
        public Moonfish.Tags.TagReference WeaponPoweroffEffect;
        public float AgeHeatRecoveryPenalty;
        public float AgeRateOfFirePenalty;
        public float AgeMisfireStart;
        public float AgeMisfireChance;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference PickupSound;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference ZoominSound;
        [Moonfish.Tags.TagReferenceAttribute("snd!")]
        public Moonfish.Tags.TagReference ZoomoutSound;
        public float ActiveCamoDing;
        public float ActiveCamoRegrowthRate;
        public Moonfish.Tags.StringIdent HandleNode;
        public Moonfish.Tags.StringIdent WeaponClass;
        public Moonfish.Tags.StringIdent WeaponName;
        public MultiplayerWeaponTypeEnum MultiplayerWeaponType;
        public WeaponTypeEnum WeaponType;
        public WeaponTrackingStructBlock Tracking = new WeaponTrackingStructBlock();
        public WeaponInterfaceStructBlock PlayerInterface = new WeaponInterfaceStructBlock();
        public PredictedResourceBlock[] PredictedResources0 = new PredictedResourceBlock[0];
        public Magazines[] Magazines = new Magazines[0];
        public WeaponTriggers[] NewTriggers = new WeaponTriggers[0];
        public WeaponBarrels[] Barrels = new WeaponBarrels[0];
        private byte[] fieldpad5 = new byte[8];
        public float MaxMovementAcceleration;
        public float MaxMovementVelocity;
        public float MaxTurningAcceleration;
        public float MaxTurningVelocity;
        [Moonfish.Tags.TagReferenceAttribute("vehi")]
        public Moonfish.Tags.TagReference DeployedVehicle;
        [Moonfish.Tags.TagReferenceAttribute("effe")]
        public Moonfish.Tags.TagReference AgeEffect;
        [Moonfish.Tags.TagReferenceAttribute("weap")]
        public Moonfish.Tags.TagReference AgedWeapon;
        public OpenTK.Vector3 FirstPersonWeaponOffset;
        public OpenTK.Vector2 FirstPersonScopeSize;
        public override int SerializedSize
        {
            get
            {
                return 796;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.WeaponWeaponFlags = ((WeaponFlags)(binaryReader.ReadInt32()));
            this.FieldOldStringId = binaryReader.ReadStringIdent();
            this.SecondaryTriggerMode = ((SecondaryTriggerModeEnum)(binaryReader.ReadInt16()));
            this.MaximumAlternateShotsLoaded = binaryReader.ReadInt16();
            this.TurnOnTime = binaryReader.ReadSingle();
            this.ReadyTime = binaryReader.ReadSingle();
            this.ReadyEffect = binaryReader.ReadTagReference();
            this.ReadyDamageEffect = binaryReader.ReadTagReference();
            this.HeatRecoveryThreshold = binaryReader.ReadSingle();
            this.OverheatedThreshold = binaryReader.ReadSingle();
            this.HeatDetonationThreshold = binaryReader.ReadSingle();
            this.HeatDetonationFraction = binaryReader.ReadSingle();
            this.HeatLossPerSecond = binaryReader.ReadSingle();
            this.HeatIllumination = binaryReader.ReadSingle();
            this.OverheatedHeatLossPerSecond = binaryReader.ReadSingle();
            this.Overheated = binaryReader.ReadTagReference();
            this.OverheatedDamageEffect = binaryReader.ReadTagReference();
            this.Detonation = binaryReader.ReadTagReference();
            this.DetonationDamageEffect0 = binaryReader.ReadTagReference();
            this.PlayerMeleeDamage = binaryReader.ReadTagReference();
            this.PlayerMeleeResponse = binaryReader.ReadTagReference();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.MeleeAimAssist.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.MeleeDamageParameters.ReadFields(binaryReader)));
            this.MeleeDamageReportingType = ((MeleeDamageReportingTypeEnum)(binaryReader.ReadByte()));
            this.fieldpad3 = binaryReader.ReadBytes(1);
            this.MagnificationLevels = binaryReader.ReadInt16();
            this.MagnificationRange = binaryReader.ReadRange();
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.WeaponAimAssist.ReadFields(binaryReader)));
            this.MovementPenalized = ((MovementPenalizedEnum)(binaryReader.ReadInt16()));
            this.fieldpad4 = binaryReader.ReadBytes(2);
            this.ForwardMovementPenalty = binaryReader.ReadSingle();
            this.SidewaysMovementPenalty = binaryReader.ReadSingle();
            this.AIScariness = binaryReader.ReadSingle();
            this.WeaponPoweronTime = binaryReader.ReadSingle();
            this.WeaponPoweroffTime = binaryReader.ReadSingle();
            this.WeaponPoweronEffect = binaryReader.ReadTagReference();
            this.WeaponPoweroffEffect = binaryReader.ReadTagReference();
            this.AgeHeatRecoveryPenalty = binaryReader.ReadSingle();
            this.AgeRateOfFirePenalty = binaryReader.ReadSingle();
            this.AgeMisfireStart = binaryReader.ReadSingle();
            this.AgeMisfireChance = binaryReader.ReadSingle();
            this.PickupSound = binaryReader.ReadTagReference();
            this.ZoominSound = binaryReader.ReadTagReference();
            this.ZoomoutSound = binaryReader.ReadTagReference();
            this.ActiveCamoDing = binaryReader.ReadSingle();
            this.ActiveCamoRegrowthRate = binaryReader.ReadSingle();
            this.HandleNode = binaryReader.ReadStringIdent();
            this.WeaponClass = binaryReader.ReadStringIdent();
            this.WeaponName = binaryReader.ReadStringIdent();
            this.MultiplayerWeaponType = ((MultiplayerWeaponTypeEnum)(binaryReader.ReadInt16()));
            this.WeaponType = ((WeaponTypeEnum)(binaryReader.ReadInt16()));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Tracking.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.PlayerInterface.ReadFields(binaryReader)));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(92));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(64));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(236));
            this.fieldpad5 = binaryReader.ReadBytes(8);
            this.MaxMovementAcceleration = binaryReader.ReadSingle();
            this.MaxMovementVelocity = binaryReader.ReadSingle();
            this.MaxTurningAcceleration = binaryReader.ReadSingle();
            this.MaxTurningVelocity = binaryReader.ReadSingle();
            this.DeployedVehicle = binaryReader.ReadTagReference();
            this.AgeEffect = binaryReader.ReadTagReference();
            this.AgedWeapon = binaryReader.ReadTagReference();
            this.FirstPersonWeaponOffset = binaryReader.ReadVector3();
            this.FirstPersonScopeSize = binaryReader.ReadVector2();
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.MeleeAimAssist.ReadInstances(binaryReader, pointerQueue);
            this.MeleeDamageParameters.ReadInstances(binaryReader, pointerQueue);
            this.WeaponAimAssist.ReadInstances(binaryReader, pointerQueue);
            this.Tracking.ReadInstances(binaryReader, pointerQueue);
            this.PlayerInterface.ReadInstances(binaryReader, pointerQueue);
            this.PredictedResources0 = base.ReadBlockArrayData<PredictedResourceBlock>(binaryReader, pointerQueue.Dequeue());
            this.Magazines = base.ReadBlockArrayData<Magazines>(binaryReader, pointerQueue.Dequeue());
            this.NewTriggers = base.ReadBlockArrayData<WeaponTriggers>(binaryReader, pointerQueue.Dequeue());
            this.Barrels = base.ReadBlockArrayData<WeaponBarrels>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            this.MeleeAimAssist.QueueWrites(queueableBlamBinaryWriter);
            this.MeleeDamageParameters.QueueWrites(queueableBlamBinaryWriter);
            this.WeaponAimAssist.QueueWrites(queueableBlamBinaryWriter);
            this.Tracking.QueueWrites(queueableBlamBinaryWriter);
            this.PlayerInterface.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.PredictedResources0);
            queueableBlamBinaryWriter.QueueWrite(this.Magazines);
            queueableBlamBinaryWriter.QueueWrite(this.NewTriggers);
            queueableBlamBinaryWriter.QueueWrite(this.Barrels);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((int)(this.WeaponWeaponFlags)));
            queueableBlamBinaryWriter.Write(this.FieldOldStringId);
            queueableBlamBinaryWriter.Write(((short)(this.SecondaryTriggerMode)));
            queueableBlamBinaryWriter.Write(this.MaximumAlternateShotsLoaded);
            queueableBlamBinaryWriter.Write(this.TurnOnTime);
            queueableBlamBinaryWriter.Write(this.ReadyTime);
            queueableBlamBinaryWriter.Write(this.ReadyEffect);
            queueableBlamBinaryWriter.Write(this.ReadyDamageEffect);
            queueableBlamBinaryWriter.Write(this.HeatRecoveryThreshold);
            queueableBlamBinaryWriter.Write(this.OverheatedThreshold);
            queueableBlamBinaryWriter.Write(this.HeatDetonationThreshold);
            queueableBlamBinaryWriter.Write(this.HeatDetonationFraction);
            queueableBlamBinaryWriter.Write(this.HeatLossPerSecond);
            queueableBlamBinaryWriter.Write(this.HeatIllumination);
            queueableBlamBinaryWriter.Write(this.OverheatedHeatLossPerSecond);
            queueableBlamBinaryWriter.Write(this.Overheated);
            queueableBlamBinaryWriter.Write(this.OverheatedDamageEffect);
            queueableBlamBinaryWriter.Write(this.Detonation);
            queueableBlamBinaryWriter.Write(this.DetonationDamageEffect0);
            queueableBlamBinaryWriter.Write(this.PlayerMeleeDamage);
            queueableBlamBinaryWriter.Write(this.PlayerMeleeResponse);
            this.MeleeAimAssist.Write_(queueableBlamBinaryWriter);
            this.MeleeDamageParameters.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((byte)(this.MeleeDamageReportingType)));
            queueableBlamBinaryWriter.Write(this.fieldpad3);
            queueableBlamBinaryWriter.Write(this.MagnificationLevels);
            queueableBlamBinaryWriter.Write(this.MagnificationRange);
            this.WeaponAimAssist.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(((short)(this.MovementPenalized)));
            queueableBlamBinaryWriter.Write(this.fieldpad4);
            queueableBlamBinaryWriter.Write(this.ForwardMovementPenalty);
            queueableBlamBinaryWriter.Write(this.SidewaysMovementPenalty);
            queueableBlamBinaryWriter.Write(this.AIScariness);
            queueableBlamBinaryWriter.Write(this.WeaponPoweronTime);
            queueableBlamBinaryWriter.Write(this.WeaponPoweroffTime);
            queueableBlamBinaryWriter.Write(this.WeaponPoweronEffect);
            queueableBlamBinaryWriter.Write(this.WeaponPoweroffEffect);
            queueableBlamBinaryWriter.Write(this.AgeHeatRecoveryPenalty);
            queueableBlamBinaryWriter.Write(this.AgeRateOfFirePenalty);
            queueableBlamBinaryWriter.Write(this.AgeMisfireStart);
            queueableBlamBinaryWriter.Write(this.AgeMisfireChance);
            queueableBlamBinaryWriter.Write(this.PickupSound);
            queueableBlamBinaryWriter.Write(this.ZoominSound);
            queueableBlamBinaryWriter.Write(this.ZoomoutSound);
            queueableBlamBinaryWriter.Write(this.ActiveCamoDing);
            queueableBlamBinaryWriter.Write(this.ActiveCamoRegrowthRate);
            queueableBlamBinaryWriter.Write(this.HandleNode);
            queueableBlamBinaryWriter.Write(this.WeaponClass);
            queueableBlamBinaryWriter.Write(this.WeaponName);
            queueableBlamBinaryWriter.Write(((short)(this.MultiplayerWeaponType)));
            queueableBlamBinaryWriter.Write(((short)(this.WeaponType)));
            this.Tracking.Write_(queueableBlamBinaryWriter);
            this.PlayerInterface.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.WritePointer(this.PredictedResources0);
            queueableBlamBinaryWriter.WritePointer(this.Magazines);
            queueableBlamBinaryWriter.WritePointer(this.NewTriggers);
            queueableBlamBinaryWriter.WritePointer(this.Barrels);
            queueableBlamBinaryWriter.Write(this.fieldpad5);
            queueableBlamBinaryWriter.Write(this.MaxMovementAcceleration);
            queueableBlamBinaryWriter.Write(this.MaxMovementVelocity);
            queueableBlamBinaryWriter.Write(this.MaxTurningAcceleration);
            queueableBlamBinaryWriter.Write(this.MaxTurningVelocity);
            queueableBlamBinaryWriter.Write(this.DeployedVehicle);
            queueableBlamBinaryWriter.Write(this.AgeEffect);
            queueableBlamBinaryWriter.Write(this.AgedWeapon);
            queueableBlamBinaryWriter.Write(this.FirstPersonWeaponOffset);
            queueableBlamBinaryWriter.Write(this.FirstPersonScopeSize);
        }
        /// <summary>
        /// All weapons should have 'primary trigger' and 'secondary trigger' markers as appropriate.
        ///Blurred permutations are called '$primary-blur' and '$secondary-blur'.
        /// </summary>
        [System.FlagsAttribute()]
        public enum WeaponFlags : int
        {
            None = 0,
            VerticalHeatDisplay = 1,
            MutuallyExclusiveTriggers = 2,
            AttacksAutomaticallyOnBump = 4,
            MustBeReadied = 8,
            DoesntCountTowardMaximum = 16,
            AimAssistsOnlyWhenZoomed = 32,
            PreventsGrenadeThrowing = 64,
            MustBePickedUp = 128,
            HoldsTriggersWhenDropped = 256,
            PreventsMeleeAttack = 512,
            DetonatesWhenDropped = 1024,
            CannotFireAtMaximumAge = 2048,
            SecondaryTriggerOverridesGrenades = 4096,
            OBSOLETEdoesNotDepowerActiveCamoInMultilplayer = 8192,
            EnablesIntegratedNightVision = 16384,
            AIsUseWeaponMeleeDamage = 32768,
            ForcesNoBinoculars = 65536,
            LoopFpFiringAnimation = 131072,
            PreventsSprinting = 262144,
            CannotFireWhileBoosting = 524288,
            PreventsDriving = 1048576,
            PreventsGunning = 2097152,
            CanBeDualWielded = 4194304,
            CanOnlyBeDualWielded = 8388608,
            MeleeOnly = 16777216,
            CantFireIfParentDead = 33554432,
            WeaponAgesWithEachKill = 67108864,
            WeaponUsesOldDualFireErrorCode = 134217728,
            PrimaryTriggerMeleeAttacks = 268435456,
            CannotBeUsedByPlayer = 536870912,
        }
        public enum SecondaryTriggerModeEnum : short
        {
            Normal = 0,
            SlavedToPrimary = 1,
            InhibitsPrimary = 2,
            LoadsAlterateAmmunition = 3,
            LoadsMultiplePrimaryAmmunition = 4,
        }
        public enum MeleeDamageReportingTypeEnum : byte
        {
            TehGuardians11 = 0,
            FallingDamage = 1,
            GenericCollisionDamage = 2,
            GenericMeleeDamage = 3,
            GenericExplosion = 4,
            MagnumPistol = 5,
            PlasmaPistol = 6,
            Needler = 7,
            Smg = 8,
            PlasmaRifle = 9,
            BattleRifle = 10,
            Carbine = 11,
            Shotgun = 12,
            SniperRifle = 13,
            BeamRifle = 14,
            RocketLauncher = 15,
            FlakCannon = 16,
            BruteShot = 17,
            Disintegrator = 18,
            BrutePlasmaRifle = 19,
            EnergySword = 20,
            FragGrenade = 21,
            PlasmaGrenade = 22,
            FlagMeleeDamage = 23,
            BombMeleeDamage = 24,
            BombExplosionDamage = 25,
            BallMeleeDamage = 26,
            HumanTurret = 27,
            PlasmaTurret = 28,
            Banshee = 29,
            Ghost = 30,
            Mongoose = 31,
            Scorpion = 32,
            SpectreDriver = 33,
            SpectreGunner = 34,
            WarthogDriver = 35,
            WarthogGunner = 36,
            Wraith = 37,
            Tank = 38,
            SentinelBeam = 39,
            SentinelRpg = 40,
            Teleporter = 41,
        }
        public enum MovementPenalizedEnum : short
        {
            Always = 0,
            WhenZoomed = 1,
            WhenZoomedOrReloading = 2,
        }
        public enum MultiplayerWeaponTypeEnum : short
        {
            None = 0,
            CtfFlag = 1,
            OddballBall = 2,
            HeadhunterHead = 3,
            JuggernautPowerup = 4,
        }
        public enum WeaponTypeEnum : short
        {
            Undefined = 0,
            Shotgun = 1,
            Needler = 2,
            PlasmaPistol = 3,
            PlasmaRifle = 4,
            RocketLauncher = 5,
        }
    }
}
namespace Moonfish.Tags
{
    
    public partial struct TagClass
    {
        public static TagClass Weap = ((TagClass)("weap"));
    }
}
