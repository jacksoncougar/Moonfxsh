//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("weapon_hud_meter_block")]
    public partial class WeaponHudMeterBlock : GuerillaBlock, IWriteDeferrable
    {
        public StateAttachedToEnum StateAttachedTo;
        private byte[] fieldpad = new byte[2];
        public CanUseOnMapTypeEnum CanUseOnMapType;
        private byte[] fieldpad0 = new byte[2];
        private byte[] fieldpad1 = new byte[28];
        public Moonfish.Tags.Point AnchorOffset;
        public float WidthScale;
        public float HeightScale;
        public ScalingFlags WeaponHudMeterScalingFlags;
        private byte[] fieldpad2 = new byte[2];
        private byte[] fieldpad3 = new byte[20];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference MeterBitmap;
        public Moonfish.Tags.ColourR1G1B1 ColorAtMeterMinimum;
        public Moonfish.Tags.ColourR1G1B1 ColorAtMeterMaximum;
        public Moonfish.Tags.ColourR1G1B1 FlashColor;
        public Moonfish.Tags.ColourA1R1G1B1 EmptyColor;
        public Flags WeaponHudMeterFlags;
        public byte MinumumMeterValue;
        public short SequenceIndex;
        public byte AlphaMultiplier;
        public byte AlphaBias;
        public short ValueScale;
        public float Opacity;
        public float Translucency;
        public Moonfish.Tags.ColourA1R1G1B1 DisabledColor;
        public GNullBlock[] GNullBlock = new GNullBlock[0];
        private byte[] fieldpad4 = new byte[4];
        private byte[] fieldpad5 = new byte[40];
        public override int SerializedSize
        {
            get
            {
                return 165;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.StateAttachedTo = ((StateAttachedToEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.CanUseOnMapType = ((CanUseOnMapTypeEnum)(binaryReader.ReadInt16()));
            this.fieldpad0 = binaryReader.ReadBytes(2);
            this.fieldpad1 = binaryReader.ReadBytes(28);
            this.AnchorOffset = binaryReader.ReadPoint();
            this.WidthScale = binaryReader.ReadSingle();
            this.HeightScale = binaryReader.ReadSingle();
            this.WeaponHudMeterScalingFlags = ((ScalingFlags)(binaryReader.ReadInt16()));
            this.fieldpad2 = binaryReader.ReadBytes(2);
            this.fieldpad3 = binaryReader.ReadBytes(20);
            this.MeterBitmap = binaryReader.ReadTagReference();
            this.ColorAtMeterMinimum = binaryReader.ReadColourR1G1B1();
            this.ColorAtMeterMaximum = binaryReader.ReadColourR1G1B1();
            this.FlashColor = binaryReader.ReadColourR1G1B1();
            this.EmptyColor = binaryReader.ReadColourA1R1G1B1();
            this.WeaponHudMeterFlags = ((Flags)(binaryReader.ReadByte()));
            this.MinumumMeterValue = binaryReader.ReadByte();
            this.SequenceIndex = binaryReader.ReadInt16();
            this.AlphaMultiplier = binaryReader.ReadByte();
            this.AlphaBias = binaryReader.ReadByte();
            this.ValueScale = binaryReader.ReadInt16();
            this.Opacity = binaryReader.ReadSingle();
            this.Translucency = binaryReader.ReadSingle();
            this.DisabledColor = binaryReader.ReadColourA1R1G1B1();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(0));
            this.fieldpad4 = binaryReader.ReadBytes(4);
            this.fieldpad5 = binaryReader.ReadBytes(40);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.GNullBlock = base.ReadBlockArrayData<GNullBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.DeferReferences(queueableBinaryWriter);
            queueableBinaryWriter.Defer(this.GNullBlock);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((short)(this.StateAttachedTo)));
            queueableBinaryWriter.Write(this.fieldpad);
            queueableBinaryWriter.Write(((short)(this.CanUseOnMapType)));
            queueableBinaryWriter.Write(this.fieldpad0);
            queueableBinaryWriter.Write(this.fieldpad1);
            queueableBinaryWriter.Write(this.AnchorOffset);
            queueableBinaryWriter.Write(this.WidthScale);
            queueableBinaryWriter.Write(this.HeightScale);
            queueableBinaryWriter.Write(((short)(this.WeaponHudMeterScalingFlags)));
            queueableBinaryWriter.Write(this.fieldpad2);
            queueableBinaryWriter.Write(this.fieldpad3);
            queueableBinaryWriter.Write(this.MeterBitmap);
            queueableBinaryWriter.Write(this.ColorAtMeterMinimum);
            queueableBinaryWriter.Write(this.ColorAtMeterMaximum);
            queueableBinaryWriter.Write(this.FlashColor);
            queueableBinaryWriter.Write(this.EmptyColor);
            queueableBinaryWriter.Write(((byte)(this.WeaponHudMeterFlags)));
            queueableBinaryWriter.Write(this.MinumumMeterValue);
            queueableBinaryWriter.Write(this.SequenceIndex);
            queueableBinaryWriter.Write(this.AlphaMultiplier);
            queueableBinaryWriter.Write(this.AlphaBias);
            queueableBinaryWriter.Write(this.ValueScale);
            queueableBinaryWriter.Write(this.Opacity);
            queueableBinaryWriter.Write(this.Translucency);
            queueableBinaryWriter.Write(this.DisabledColor);
            queueableBinaryWriter.WritePointer(this.GNullBlock);
            queueableBinaryWriter.Write(this.fieldpad4);
            queueableBinaryWriter.Write(this.fieldpad5);
        }
        public enum StateAttachedToEnum : short
        {
            InventoryAmmo = 0,
            LoadedAmmo = 1,
            Heat = 2,
            Age = 3,
            SecondaryWeaponInventoryAmmo = 4,
            SecondaryWeaponLoadedAmmo = 5,
            DistanceToTarget = 6,
            ElevationToTarget = 7,
        }
        public enum CanUseOnMapTypeEnum : short
        {
            Any = 0,
            Solo = 1,
            Multiplayer = 2,
        }
        [System.FlagsAttribute()]
        public enum ScalingFlags : short
        {
            None = 0,
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        [System.FlagsAttribute()]
        public enum Flags : byte
        {
            None = 0,
            UseMinmaxForStateChanges = 1,
            InterpolateBetweenMinmaxFlashColorsAsStateChanges = 2,
            InterpolateColorAlongHsvSpace = 4,
            moreColorsForHsvInterpolation = 8,
            InvertInterpolation = 16,
        }
    }
}
