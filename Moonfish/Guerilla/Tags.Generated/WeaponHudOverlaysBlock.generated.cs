//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using Moonfish.Guerilla;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("weapon_hud_overlays_block")]
    public partial class WeaponHudOverlaysBlock : GuerillaBlock, IWriteDeferrable
    {
        public StateAttachedToEnum StateAttachedTo;
        private byte[] fieldpad = new byte[2];
        public CanUseOnMapTypeEnum CanUseOnMapType;
        private byte[] fieldpad0 = new byte[2];
        private byte[] fieldpad1 = new byte[28];
        [Moonfish.Tags.TagReferenceAttribute("bitm")]
        public Moonfish.Tags.TagReference OverlayBitmap;
        public WeaponHudOverlayBlock[] Overlays = new WeaponHudOverlayBlock[0];
        private byte[] fieldpad2 = new byte[40];
        public override int SerializedSize
        {
            get
            {
                return 92;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.StateAttachedTo = ((StateAttachedToEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            this.CanUseOnMapType = ((CanUseOnMapTypeEnum)(binaryReader.ReadInt16()));
            this.fieldpad0 = binaryReader.ReadBytes(2);
            this.fieldpad1 = binaryReader.ReadBytes(28);
            this.OverlayBitmap = binaryReader.ReadTagReference();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(136));
            this.fieldpad2 = binaryReader.ReadBytes(40);
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Overlays = base.ReadBlockArrayData<WeaponHudOverlayBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.DeferReferences(writer);
            writer.Defer(this.Overlays);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter writer)
        {
            base.Write(writer);
            writer.Write(((short)(this.StateAttachedTo)));
            writer.Write(this.fieldpad);
            writer.Write(((short)(this.CanUseOnMapType)));
            writer.Write(this.fieldpad0);
            writer.Write(this.fieldpad1);
            writer.Write(this.OverlayBitmap);
            writer.WritePointer(this.Overlays);
            writer.Write(this.fieldpad2);
        }
        public enum StateAttachedToEnum : short
        {
            InventoryAmmo = 0,
            LoadedAmmo = 1,
            Heat = 2,
            Age = 3,
            SecondaryWeaponInventoryAmmo = 4,
            SecondaryWeaponLoadedAmmo = 5,
            DistanceToTarget = 6,
            ElevationToTarget = 7,
        }
        public enum CanUseOnMapTypeEnum : short
        {
            Any = 0,
            Solo = 1,
            Multiplayer = 2,
        }
    }
}
