//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using JetBrains.Annotations;
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    [JetBrains.Annotations.UsedImplicitlyAttribute(ImplicitUseTargetFlags.WithMembers)]
    [TagBlockOriginalNameAttribute("weapon_triggers")]
    public partial class WeaponTriggers : GuerillaBlock, IWriteDeferrable
    {
        public Flags WeaponTriggersFlags;
        public InputEnum Input;
        public BehaviorEnum Behavior;
        public Moonfish.Tags.ShortBlockIndex1 PrimaryBarrel;
        public Moonfish.Tags.ShortBlockIndex1 SecondaryBarrel;
        public PredictionEnum Prediction;
        private byte[] fieldpad = new byte[2];
        public WeaponTriggerAutofireStructBlock Autofire = new WeaponTriggerAutofireStructBlock();
        public WeaponTriggerChargingStructBlock Charging = new WeaponTriggerChargingStructBlock();
        public override int SerializedSize
        {
            get
            {
                return 64;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(Moonfish.Guerilla.BlamBinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.WeaponTriggersFlags = ((Flags)(binaryReader.ReadInt32()));
            this.Input = ((InputEnum)(binaryReader.ReadInt16()));
            this.Behavior = ((BehaviorEnum)(binaryReader.ReadInt16()));
            this.PrimaryBarrel = binaryReader.ReadShortBlockIndex1();
            this.SecondaryBarrel = binaryReader.ReadShortBlockIndex1();
            this.Prediction = ((PredictionEnum)(binaryReader.ReadInt16()));
            this.fieldpad = binaryReader.ReadBytes(2);
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Autofire.ReadFields(binaryReader)));
            pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(pointerQueue.Concat(this.Charging.ReadFields(binaryReader)));
            return pointerQueue;
        }
        public override void ReadInstances(Moonfish.Guerilla.BlamBinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.Autofire.ReadInstances(binaryReader, pointerQueue);
            this.Charging.ReadInstances(binaryReader, pointerQueue);
        }
        public override void DeferReferences(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.DeferReferences(queueableBinaryWriter);
            this.Autofire.DeferReferences(queueableBinaryWriter);
            this.Charging.DeferReferences(queueableBinaryWriter);
        }
        public override void Write(Moonfish.Guerilla.LinearBinaryWriter queueableBinaryWriter)
        {
            base.Write(queueableBinaryWriter);
            queueableBinaryWriter.Write(((int)(this.WeaponTriggersFlags)));
            queueableBinaryWriter.Write(((short)(this.Input)));
            queueableBinaryWriter.Write(((short)(this.Behavior)));
            queueableBinaryWriter.Write(this.PrimaryBarrel);
            queueableBinaryWriter.Write(this.SecondaryBarrel);
            queueableBinaryWriter.Write(((short)(this.Prediction)));
            queueableBinaryWriter.Write(this.fieldpad);
            this.Autofire.Write(queueableBinaryWriter);
            this.Charging.Write(queueableBinaryWriter);
        }
        [System.FlagsAttribute()]
        public enum Flags : int
        {
            None = 0,
            AutofireSingleActionOnly = 1,
        }
        public enum InputEnum : short
        {
            RightTrigger = 0,
            LeftTrigger = 1,
            MeleeAttack = 2,
        }
        public enum BehaviorEnum : short
        {
            Spew = 0,
            Latch = 1,
            Latchautofire = 2,
            Charge = 3,
            Latchzoom = 4,
            Latchrocketlauncher = 5,
        }
        public enum PredictionEnum : short
        {
            None = 0,
            Spew = 1,
            Charge = 2,
        }
    }
}
