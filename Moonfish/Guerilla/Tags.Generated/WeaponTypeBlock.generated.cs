//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moonfish.Guerilla.Tags
{
    using Moonfish.Tags;
    using Moonfish.Model;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class WeaponTypeBlock : GuerillaBlock, IWriteQueueable
    {
        public Moonfish.Tags.StringIdent Label;
        public AnimationEntryBlock[] ActionsAABBCC = new AnimationEntryBlock[0];
        public AnimationEntryBlock[] OverlaysAABBCC = new AnimationEntryBlock[0];
        public DamageAnimationBlock[] DeathAndDamageAABBCC = new DamageAnimationBlock[0];
        public AnimationTransitionBlock[] TransitionsAABBCC = new AnimationTransitionBlock[0];
        public PrecacheListBlock[] HighPrecacheCCCCC = new PrecacheListBlock[0];
        public PrecacheListBlock[] LowPrecacheCCCCC = new PrecacheListBlock[0];
        public override int SerializedSize
        {
            get
            {
                return 52;
            }
        }
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        public override System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> ReadFields(System.IO.BinaryReader binaryReader)
        {
            System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue = new System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer>(base.ReadFields(binaryReader));
            this.Label = binaryReader.ReadStringIdent();
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(8));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(12));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(20));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            pointerQueue.Enqueue(binaryReader.ReadBlamPointer(4));
            return pointerQueue;
        }
        public override void ReadInstances(System.IO.BinaryReader binaryReader, System.Collections.Generic.Queue<Moonfish.Tags.BlamPointer> pointerQueue)
        {
            base.ReadInstances(binaryReader, pointerQueue);
            this.ActionsAABBCC = base.ReadBlockArrayData<AnimationEntryBlock>(binaryReader, pointerQueue.Dequeue());
            this.OverlaysAABBCC = base.ReadBlockArrayData<AnimationEntryBlock>(binaryReader, pointerQueue.Dequeue());
            this.DeathAndDamageAABBCC = base.ReadBlockArrayData<DamageAnimationBlock>(binaryReader, pointerQueue.Dequeue());
            this.TransitionsAABBCC = base.ReadBlockArrayData<AnimationTransitionBlock>(binaryReader, pointerQueue.Dequeue());
            this.HighPrecacheCCCCC = base.ReadBlockArrayData<PrecacheListBlock>(binaryReader, pointerQueue.Dequeue());
            this.LowPrecacheCCCCC = base.ReadBlockArrayData<PrecacheListBlock>(binaryReader, pointerQueue.Dequeue());
        }
        public override void QueueWrites(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.QueueWrites(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.QueueWrite(this.ActionsAABBCC);
            queueableBlamBinaryWriter.QueueWrite(this.OverlaysAABBCC);
            queueableBlamBinaryWriter.QueueWrite(this.DeathAndDamageAABBCC);
            queueableBlamBinaryWriter.QueueWrite(this.TransitionsAABBCC);
            queueableBlamBinaryWriter.QueueWrite(this.HighPrecacheCCCCC);
            queueableBlamBinaryWriter.QueueWrite(this.LowPrecacheCCCCC);
        }
        public override void Write_(Moonfish.Guerilla.QueueableBlamBinaryWriter queueableBlamBinaryWriter)
        {
            base.Write_(queueableBlamBinaryWriter);
            queueableBlamBinaryWriter.Write(this.Label);
            queueableBlamBinaryWriter.WritePointer(this.ActionsAABBCC);
            queueableBlamBinaryWriter.WritePointer(this.OverlaysAABBCC);
            queueableBlamBinaryWriter.WritePointer(this.DeathAndDamageAABBCC);
            queueableBlamBinaryWriter.WritePointer(this.TransitionsAABBCC);
            queueableBlamBinaryWriter.WritePointer(this.HighPrecacheCCCCC);
            queueableBlamBinaryWriter.WritePointer(this.LowPrecacheCCCCC);
        }
    }
}
